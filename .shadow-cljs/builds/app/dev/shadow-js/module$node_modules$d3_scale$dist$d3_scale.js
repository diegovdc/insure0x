["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/d3-scale/dist/d3-scale.js"],"~:js","shadow$provide.module$node_modules$d3_scale$dist$d3_scale=function(global$jscomp$0,require,module,exports$jscomp$0){(function(global,factory){\"object\"===typeof exports$jscomp$0&&\"undefined\"!==typeof module?factory(exports$jscomp$0,require(\"module$node_modules$d3_array$dist$d3_array\"),require(\"module$node_modules$d3_interpolate$dist$d3_interpolate\"),require(\"module$node_modules$d3_format$dist$d3_format\"),require(\"module$node_modules$d3_time$dist$d3_time\"),require(\"module$node_modules$d3_time_format$dist$d3_time_format\")):\n\"function\"===typeof define&&define.amd?define(\"exports d3-array d3-interpolate d3-format d3-time d3-time-format\".split(\" \"),factory):(global=global||self,factory(global.d3=global.d3||{},global.d3,global.d3,global.d3,global.d3,global.d3))})(this,function(exports,d3Array,d3Interpolate,d3Format,d3Time,d3TimeFormat){function initRange(domain,range){switch(arguments.length){case 0:break;case 1:this.range(domain);break;default:this.range(range).domain(domain)}return this}function initInterpolator(domain,\ninterpolator){switch(arguments.length){case 0:break;case 1:\"function\"===typeof domain?this.interpolator(domain):this.range(domain);break;default:this.domain(domain),\"function\"===typeof interpolator?this.interpolator(interpolator):this.range(interpolator)}return this}function ordinal(){function scale(d){var key=d+\"\",i=index.get(key);if(!i){if(unknown!==implicit)return unknown;index.set(key,i=domain.push(d))}return range[(i-1)%range.length]}var index=new Map,domain=[],range=[],unknown=implicit;scale.domain=\nfunction(_){if(!arguments.length)return domain.slice();domain=[];index=new Map;for(var $jscomp$iter$90=$jscomp.makeIterator(_),$jscomp$key$value=$jscomp$iter$90.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$90.next()){$jscomp$key$value=$jscomp$key$value.value;var key=$jscomp$key$value+\"\";index.has(key)||index.set(key,domain.push($jscomp$key$value))}return scale};scale.range=function(_){return arguments.length?(range=Array.from(_),scale):range.slice()};scale.unknown=function(_){return arguments.length?\n(unknown=_,scale):unknown};scale.copy=function(){return ordinal(domain,range).unknown(unknown)};initRange.apply(scale,arguments);return scale}function band(){function rescale(){var n=domain().length,reverse=r1<r0,start=reverse?r1:r0,stop=reverse?r0:r1;step=(stop-start)/Math.max(1,n-paddingInner+2*paddingOuter);round&&(step=Math.floor(step));start+=(stop-start-step*(n-paddingInner))*align;bandwidth=step*(1-paddingInner);round&&(start=Math.round(start),bandwidth=Math.round(bandwidth));n=d3Array.range(n).map(function(i){return start+\nstep*i});return ordinalRange(reverse?n.reverse():n)}var scale=ordinal().unknown(void 0),domain=scale.domain,ordinalRange=scale.range,r0=0,r1=1,step,bandwidth,round=!1,paddingInner=0,paddingOuter=0,align=.5;delete scale.unknown;scale.domain=function(_){return arguments.length?(domain(_),rescale()):domain()};scale.range=function(_){if(arguments.length){var JSCompiler_temp=$jscomp.makeIterator(_);r0=JSCompiler_temp.next().value;r1=JSCompiler_temp.next().value;JSCompiler_temp=(r0=+r0,r1=+r1,rescale())}else JSCompiler_temp=\n[r0,r1];return JSCompiler_temp};scale.rangeRound=function(_){_=$jscomp.makeIterator(_);r0=_.next().value;r1=_.next().value;return r0=+r0,r1=+r1,round=!0,rescale()};scale.bandwidth=function(){return bandwidth};scale.step=function(){return step};scale.round=function(_){return arguments.length?(round=!!_,rescale()):round};scale.padding=function(_){return arguments.length?(paddingInner=Math.min(1,paddingOuter=+_),rescale()):paddingInner};scale.paddingInner=function(_){return arguments.length?(paddingInner=\nMath.min(1,_),rescale()):paddingInner};scale.paddingOuter=function(_){return arguments.length?(paddingOuter=+_,rescale()):paddingOuter};scale.align=function(_){return arguments.length?(align=Math.max(0,Math.min(1,_)),rescale()):align};scale.copy=function(){return band(domain(),[r0,r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align)};return initRange.apply(rescale(),arguments)}function pointish(scale){var copy=scale.copy;scale.padding=scale.paddingOuter;delete scale.paddingInner;\ndelete scale.paddingOuter;scale.copy=function(){return pointish(copy())};return scale}function constant(x){return function(){return x}}function number(x){return+x}function identity(x){return x}function normalize(a,b){return(b-=a=+a)?function(x){return(x-a)/b}:constant(isNaN(b)?NaN:.5)}function clamper(a,b){if(a>b){var t=a;a=b;b=t}return function(x){return Math.max(a,Math.min(b,x))}}function bimap(domain,range,interpolate){var d0=domain[0];domain=domain[1];var r0=range[0];range=range[1];domain<d0?\n(d0=normalize(domain,d0),r0=interpolate(range,r0)):(d0=normalize(d0,domain),r0=interpolate(r0,range));return function(x){return r0(d0(x))}}function polymap(domain,range,interpolate){var j=Math.min(domain.length,range.length)-1,d=Array(j),r=Array(j),i$jscomp$0=-1;domain[j]<domain[0]&&(domain=domain.slice().reverse(),range=range.slice().reverse());for(;++i$jscomp$0<j;)d[i$jscomp$0]=normalize(domain[i$jscomp$0],domain[i$jscomp$0+1]),r[i$jscomp$0]=interpolate(range[i$jscomp$0],range[i$jscomp$0+1]);return function(x){var i=\nd3Array.bisect(domain,x,1,j)-1;return r[i](d[i](x))}}function copy$jscomp$0(source,target){return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown())}function transformer(){function rescale(){var n=Math.min(domain.length,range.length);clamp!==identity&&(clamp=clamper(domain[0],domain[n-1]));piecewise=2<n?polymap:bimap;output=input=null;return scale}function scale(x){return isNaN(x=+x)?unknown:(output||(output=piecewise(domain.map(transform),\nrange,interpolate)))(transform(clamp(x)))}var domain=unit,range=unit,interpolate=d3Interpolate.interpolate,transform,untransform,unknown,clamp=identity,piecewise,output,input;scale.invert=function(y){return clamp(untransform((input||(input=piecewise(range,domain.map(transform),d3Interpolate.interpolateNumber)))(y)))};scale.domain=function(_){return arguments.length?(domain=Array.from(_,number),rescale()):domain.slice()};scale.range=function(_){return arguments.length?(range=Array.from(_),rescale()):\nrange.slice()};scale.rangeRound=function(_){return range=Array.from(_),interpolate=d3Interpolate.interpolateRound,rescale()};scale.clamp=function(_){return arguments.length?(clamp=_?!0:identity,rescale()):clamp!==identity};scale.interpolate=function(_){return arguments.length?(interpolate=_,rescale()):interpolate};scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown};return function(t,u){transform=t;untransform=u;return rescale()}}function tickFormat(start,stop,count,specifier){count=\nd3Array.tickStep(start,stop,count);var precision;specifier=d3Format.formatSpecifier(null==specifier?\",f\":specifier);switch(specifier.type){case \"s\":return start=Math.max(Math.abs(start),Math.abs(stop)),null!=specifier.precision||isNaN(precision=d3Format.precisionPrefix(count,start))||(specifier.precision=precision),d3Format.formatPrefix(specifier,start);case \"\":case \"e\":case \"g\":case \"p\":case \"r\":null!=specifier.precision||isNaN(precision=d3Format.precisionRound(count,Math.max(Math.abs(start),Math.abs(stop))))||\n(specifier.precision=precision-(\"e\"===specifier.type));break;case \"f\":case \"%\":null!=specifier.precision||isNaN(precision=d3Format.precisionFixed(count))||(specifier.precision=precision-2*(\"%\"===specifier.type))}return d3Format.format(specifier)}function linearish(scale){var domain=scale.domain;scale.ticks=function(count){var d=domain();return d3Array.ticks(d[0],d[d.length-1],null==count?10:count)};scale.tickFormat=function(count,specifier){var d=domain();return tickFormat(d[0],d[d.length-1],null==\ncount?10:count,specifier)};scale.nice=function(count){null==count&&(count=10);var d=domain(),i0=0,i1=d.length-1,start=d[i0],stop=d[i1],maxIter=10;if(stop<start){var step=start;start=stop;stop=step;step=i0;i0=i1;i1=step}for(;0<maxIter--;){step=d3Array.tickIncrement(start,stop,count);if(step===prestep)return d[i0]=start,d[i1]=stop,domain(d);if(0<step)start=Math.floor(start/step)*step,stop=Math.ceil(stop/step)*step;else if(0>step)start=Math.ceil(start*step)/step,stop=Math.floor(stop*step)/step;else break;\nvar prestep=step}return scale};return scale}function linear(){var scale=transformer()(identity,identity);scale.copy=function(){return copy$jscomp$0(scale,linear())};initRange.apply(scale,arguments);return linearish(scale)}function identity$1(domain){function scale(x){return isNaN(x=+x)?unknown:x}var unknown;scale.invert=scale;scale.domain=scale.range=function(_){return arguments.length?(domain=Array.from(_,number),scale):domain.slice()};scale.unknown=function(_){return arguments.length?(unknown=_,\nscale):unknown};scale.copy=function(){return identity$1(domain).unknown(unknown)};domain=arguments.length?Array.from(domain,number):[0,1];return linearish(scale)}function nice(domain,interval){domain=domain.slice();var i0=0,i1=domain.length-1,x0=domain[i0],x1=domain[i1];if(x1<x0){var t=i0;i0=i1;i1=t;t=x0;x0=x1;x1=t}domain[i0]=interval.floor(x0);domain[i1]=interval.ceil(x1);return domain}function transformLog(x){return Math.log(x)}function transformExp(x){return Math.exp(x)}function transformLogn(x){return-Math.log(-x)}\nfunction transformExpn(x){return-Math.exp(-x)}function pow10(x){return isFinite(x)?+(\"1e\"+x):0>x?0:x}function powp(base){return 10===base?pow10:base===Math.E?Math.exp:function(x){return Math.pow(base,x)}}function logp(base){return base===Math.E?Math.log:10===base&&Math.log10||2===base&&Math.log2||(base=Math.log(base),function(x){return Math.log(x)/base})}function reflect(f){return function(x){return-f(-x)}}function loggish(transform){function rescale(){logs=logp(base);pows=powp(base);0>domain()[0]?\n(logs=reflect(logs),pows=reflect(pows),transform(transformLogn,transformExpn)):transform(transformLog,transformExp);return scale}var scale=transform(transformLog,transformExp),domain=scale.domain,base=10,logs,pows;scale.base=function(_){return arguments.length?(base=+_,rescale()):base};scale.domain=function(_){return arguments.length?(domain(_),rescale()):domain()};scale.ticks=function(count){var d=domain(),u=d[0];d=d[d.length-1];var r;if(r=d<u)i=u,u=d,d=i;var i=logs(u),j=logs(d),n=null==count?10:\n+count,z=[];if(!(base%1)&&j-i<n){i=Math.floor(i);j=Math.ceil(j);if(0<u)for(;i<=j;++i){var k=1;for(count=pows(i);k<base;++k){var t=count*k;if(!(t<u)){if(t>d)break;z.push(t)}}}else for(;i<=j;++i)for(k=base-1,count=pows(i);1<=k;--k)if(t=count*k,!(t<u)){if(t>d)break;z.push(t)}2*z.length<n&&(z=d3Array.ticks(u,d,n))}else z=d3Array.ticks(i,j,Math.min(j-i,n)).map(pows);return r?z.reverse():z};scale.tickFormat=function(count,specifier){null==specifier&&(specifier=10===base?\".0e\":\",\");\"function\"!==typeof specifier&&\n(specifier=d3Format.format(specifier));if(Infinity===count)return specifier;null==count&&(count=10);var k=Math.max(1,base*count/scale.ticks().length);return function(d){var i=d/pows(Math.round(logs(d)));i*base<base-.5&&(i*=base);return i<=k?specifier(d):\"\"}};scale.nice=function(){return domain(nice(domain(),{floor:function(x){return pows(Math.floor(logs(x)))},ceil:function(x){return pows(Math.ceil(logs(x)))}}))};return scale}function log(){var scale=loggish(transformer()).domain([1,10]);scale.copy=\nfunction(){return copy$jscomp$0(scale,log()).base(scale.base())};initRange.apply(scale,arguments);return scale}function transformSymlog(c){return function(x){return Math.sign(x)*Math.log1p(Math.abs(x/c))}}function transformSymexp(c){return function(x){return Math.sign(x)*Math.expm1(Math.abs(x))*c}}function symlogish(transform){var c=1,scale=transform(transformSymlog(c),transformSymexp(c));scale.constant=function(_){return arguments.length?transform(transformSymlog(c=+_),transformSymexp(c)):c};return linearish(scale)}\nfunction symlog(){var scale=symlogish(transformer());scale.copy=function(){return copy$jscomp$0(scale,symlog()).constant(scale.constant())};return initRange.apply(scale,arguments)}function transformPow(exponent){return function(x){return 0>x?-Math.pow(-x,exponent):Math.pow(x,exponent)}}function transformSqrt(x){return 0>x?-Math.sqrt(-x):Math.sqrt(x)}function transformSquare(x){return 0>x?-x*x:x*x}function powish(transform){var scale=transform(identity,identity),exponent=1;scale.exponent=function(_){return arguments.length?\n(exponent=+_,1===exponent?transform(identity,identity):.5===exponent?transform(transformSqrt,transformSquare):transform(transformPow(exponent),transformPow(1/exponent))):exponent};return linearish(scale)}function pow(){var scale=powish(transformer());scale.copy=function(){return copy$jscomp$0(scale,pow()).exponent(scale.exponent())};initRange.apply(scale,arguments);return scale}function square(x){return Math.sign(x)*x*x}function radial(){function scale(x){x=squared(x);x=Math.sign(x)*Math.sqrt(Math.abs(x));\nreturn isNaN(x)?unknown:round?Math.round(x):x}var squared=transformer()(identity,identity),range=[0,1],round=!1,unknown;scale.invert=function(y){return squared.invert(square(y))};scale.domain=function(_){return arguments.length?(squared.domain(_),scale):squared.domain()};scale.range=function(_){return arguments.length?(squared.range((range=Array.from(_,number)).map(square)),scale):range.slice()};scale.rangeRound=function(_){return scale.range(_).round(!0)};scale.round=function(_){return arguments.length?\n(round=!!_,scale):round};scale.clamp=function(_){return arguments.length?(squared.clamp(_),scale):squared.clamp()};scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown};scale.copy=function(){return radial(squared.domain(),range).round(round).clamp(squared.clamp()).unknown(unknown)};initRange.apply(scale,arguments);return linearish(scale)}function quantile(){function rescale(){var i=0,n=Math.max(1,range.length);for(thresholds=Array(n-1);++i<n;)thresholds[i-1]=d3Array.quantile(domain,\ni/n);return scale}function scale(x){return isNaN(x=+x)?unknown:range[d3Array.bisect(thresholds,x)]}var domain=[],range=[],thresholds=[],unknown;scale.invertExtent=function(y){y=range.indexOf(y);return 0>y?[NaN,NaN]:[0<y?thresholds[y-1]:domain[0],y<thresholds.length?thresholds[y]:domain[domain.length-1]]};scale.domain=function(_){if(!arguments.length)return domain.slice();domain=[];for(var $jscomp$iter$91=$jscomp.makeIterator(_),$jscomp$key$d=$jscomp$iter$91.next();!$jscomp$key$d.done;$jscomp$key$d=\n$jscomp$iter$91.next())$jscomp$key$d=$jscomp$key$d.value,null==$jscomp$key$d||isNaN($jscomp$key$d=+$jscomp$key$d)||domain.push($jscomp$key$d);domain.sort(d3Array.ascending);return rescale()};scale.range=function(_){return arguments.length?(range=Array.from(_),rescale()):range.slice()};scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown};scale.quantiles=function(){return thresholds.slice()};scale.copy=function(){return quantile().domain(domain).range(range).unknown(unknown)};\nreturn initRange.apply(scale,arguments)}function quantize(){function scale(x){return x<=x?range[d3Array.bisect(domain,x,0,n)]:unknown}function rescale(){var i=-1;for(domain=Array(n);++i<n;)domain[i]=((i+1)*x1-(i-n)*x0)/(n+1);return scale}var x0=0,x1=1,n=1,domain=[.5],range=[0,1],unknown;scale.domain=function(_){if(arguments.length){var JSCompiler_temp=$jscomp.makeIterator(_);x0=JSCompiler_temp.next().value;x1=JSCompiler_temp.next().value;JSCompiler_temp=(x0=+x0,x1=+x1,rescale())}else JSCompiler_temp=\n[x0,x1];return JSCompiler_temp};scale.range=function(_){return arguments.length?(n=(range=Array.from(_)).length-1,rescale()):range.slice()};scale.invertExtent=function(y){y=range.indexOf(y);return 0>y?[NaN,NaN]:1>y?[x0,domain[0]]:y>=n?[domain[n-1],x1]:[domain[y-1],domain[y]]};scale.unknown=function(_){return arguments.length?(unknown=_,scale):scale};scale.thresholds=function(){return domain.slice()};scale.copy=function(){return quantize().domain([x0,x1]).range(range).unknown(unknown)};return initRange.apply(linearish(scale),\narguments)}function threshold(){function scale(x){return x<=x?range[d3Array.bisect(domain,x,0,n)]:unknown}var domain=[.5],range=[0,1],unknown,n=1;scale.domain=function(_){return arguments.length?(domain=Array.from(_),n=Math.min(domain.length,range.length-1),scale):domain.slice()};scale.range=function(_){return arguments.length?(range=Array.from(_),n=Math.min(domain.length,range.length-1),scale):range.slice()};scale.invertExtent=function(y){y=range.indexOf(y);return[domain[y-1],domain[y]]};scale.unknown=\nfunction(_){return arguments.length?(unknown=_,scale):unknown};scale.copy=function(){return threshold().domain(domain).range(range).unknown(unknown)};return initRange.apply(scale,arguments)}function date$jscomp$0(t){return new Date(t)}function number$1(t){return t instanceof Date?+t:+new Date(+t)}function calendar(year,month,week,day,hour,minute,second,millisecond,format){function tickFormat(date){return(second(date)<date?formatMillisecond:minute(date)<date?formatSecond:hour(date)<date?formatMinute:\nday(date)<date?formatHour:month(date)<date?week(date)<date?formatDay:formatWeek:year(date)<date?formatMonth:formatYear)(date)}function tickInterval(interval,start,stop){null==interval&&(interval=10);if(\"number\"===typeof interval){var target=Math.abs(stop-start)/interval,i$jscomp$0=d3Array.bisector(function(i){return i[2]}).right(tickIntervals,target);i$jscomp$0===tickIntervals.length?(start=d3Array.tickStep(start/31536E6,stop/31536E6,interval),interval=year):i$jscomp$0?(i$jscomp$0=tickIntervals[target/\ntickIntervals[i$jscomp$0-1][2]<tickIntervals[i$jscomp$0][2]/target?i$jscomp$0-1:i$jscomp$0],start=i$jscomp$0[1],interval=i$jscomp$0[0]):(start=Math.max(d3Array.tickStep(start,stop,interval),1),interval=millisecond);return interval.every(start)}return interval}var scale=transformer()(identity,identity),invert=scale.invert,domain=scale.domain,formatMillisecond=format(\".%L\"),formatSecond=format(\":%S\"),formatMinute=format(\"%I:%M\"),formatHour=format(\"%I %p\"),formatDay=format(\"%a %d\"),formatWeek=format(\"%b %d\"),\nformatMonth=format(\"%B\"),formatYear=format(\"%Y\"),tickIntervals=[[second,1,1E3],[second,5,5E3],[second,15,15E3],[second,30,3E4],[minute,1,6E4],[minute,5,3E5],[minute,15,9E5],[minute,30,18E5],[hour,1,36E5],[hour,3,108E5],[hour,6,216E5],[hour,12,432E5],[day,1,864E5],[day,2,1728E5],[week,1,6048E5],[month,1,2592E6],[month,3,7776E6],[year,1,31536E6]];scale.invert=function(y){return new Date(invert(y))};scale.domain=function(_){return arguments.length?domain(Array.from(_,number$1)):domain().map(date$jscomp$0)};\nscale.ticks=function(interval){var d=domain(),t0=d[0];d=d[d.length-1];var r=d<t0;if(r){var t=t0;t0=d;d=t}t=(t=tickInterval(interval,t0,d))?t.range(t0,d+1):[];return r?t.reverse():t};scale.tickFormat=function(count,specifier){return null==specifier?tickFormat:format(specifier)};scale.nice=function(interval){var d=domain();return(interval=tickInterval(interval,d[0],d[d.length-1]))?domain(nice(d,interval)):scale};scale.copy=function(){return copy$jscomp$0(scale,calendar(year,month,week,day,hour,minute,\nsecond,millisecond,format))};return scale}function transformer$1(){function scale(x){return isNaN(x=+x)?unknown:interpolator(0===k10?.5:(x=(transform(x)-t0)*k10,clamp?Math.max(0,Math.min(1,x)):x))}function range(interpolate){return function(_){if(arguments.length){var r1=$jscomp.makeIterator(_);var r0=r1.next().value;r1=r1.next().value;r0=(interpolator=interpolate(r0,r1),scale)}else r0=[interpolator(0),interpolator(1)];return r0}}var x0=0,x1=1,t0,t1,k10,transform,interpolator=identity,clamp=!1,unknown;\nscale.domain=function(_){if(arguments.length){var JSCompiler_temp=$jscomp.makeIterator(_);x0=JSCompiler_temp.next().value;x1=JSCompiler_temp.next().value;JSCompiler_temp=(t0=transform(x0=+x0),t1=transform(x1=+x1),k10=t0===t1?0:1/(t1-t0),scale)}else JSCompiler_temp=[x0,x1];return JSCompiler_temp};scale.clamp=function(_){return arguments.length?(clamp=!!_,scale):clamp};scale.interpolator=function(_){return arguments.length?(interpolator=_,scale):interpolator};scale.range=range(d3Interpolate.interpolate);\nscale.rangeRound=range(d3Interpolate.interpolateRound);scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown};return function(t){transform=t;t0=t(x0);t1=t(x1);k10=t0===t1?0:1/(t1-t0);return scale}}function copy$1(source,target){return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown())}function sequential(){var scale=linearish(transformer$1()(identity));scale.copy=function(){return copy$1(scale,sequential())};return initInterpolator.apply(scale,\narguments)}function sequentialLog(){var scale=loggish(transformer$1()).domain([1,10]);scale.copy=function(){return copy$1(scale,sequentialLog()).base(scale.base())};return initInterpolator.apply(scale,arguments)}function sequentialSymlog(){var scale=symlogish(transformer$1());scale.copy=function(){return copy$1(scale,sequentialSymlog()).constant(scale.constant())};return initInterpolator.apply(scale,arguments)}function sequentialPow(){var scale=powish(transformer$1());scale.copy=function(){return copy$1(scale,\nsequentialPow()).exponent(scale.exponent())};return initInterpolator.apply(scale,arguments)}function sequentialQuantile(){function scale(x){if(!isNaN(x=+x))return interpolator((d3Array.bisect(domain,x,1)-1)/(domain.length-1))}var domain=[],interpolator=identity;scale.domain=function(_){if(!arguments.length)return domain.slice();domain=[];for(var $jscomp$iter$92=$jscomp.makeIterator(_),$jscomp$key$d=$jscomp$iter$92.next();!$jscomp$key$d.done;$jscomp$key$d=$jscomp$iter$92.next())$jscomp$key$d=$jscomp$key$d.value,\nnull==$jscomp$key$d||isNaN($jscomp$key$d=+$jscomp$key$d)||domain.push($jscomp$key$d);domain.sort(d3Array.ascending);return scale};scale.interpolator=function(_){return arguments.length?(interpolator=_,scale):interpolator};scale.range=function(){return domain.map(function(d,i){return interpolator(i/(domain.length-1))})};scale.quantiles=function(n){return Array.from({length:n+1},function(_,i){return d3Array.quantile(domain,i/n)})};scale.copy=function(){return sequentialQuantile(interpolator).domain(domain)};\nreturn initInterpolator.apply(scale,arguments)}function transformer$2(){function scale(x){return isNaN(x=+x)?unknown:(x=.5+((x=+transform(x))-t1)*(s*x<s*t1?k10:k21),interpolator(clamp?Math.max(0,Math.min(1,x)):x))}function range(interpolate){return function(_){if(arguments.length){var r2=$jscomp.makeIterator(_);var r0=r2.next().value;var r1=r2.next().value;r2=r2.next().value;r0=(interpolator=d3Interpolate.piecewise(interpolate,[r0,r1,r2]),scale)}else r0=[interpolator(0),interpolator(.5),interpolator(1)];\nreturn r0}}var x0=0,x1=.5,x2=1,s=1,t0,t1,t2,k10,k21,interpolator=identity,transform,clamp=!1,unknown;scale.domain=function(_){if(arguments.length){var JSCompiler_temp=$jscomp.makeIterator(_);x0=JSCompiler_temp.next().value;x1=JSCompiler_temp.next().value;x2=JSCompiler_temp.next().value;JSCompiler_temp=(t0=transform(x0=+x0),t1=transform(x1=+x1),t2=transform(x2=+x2),k10=t0===t1?0:.5/(t1-t0),k21=t1===t2?0:.5/(t2-t1),s=t1<t0?-1:1,scale)}else JSCompiler_temp=[x0,x1,x2];return JSCompiler_temp};scale.clamp=\nfunction(_){return arguments.length?(clamp=!!_,scale):clamp};scale.interpolator=function(_){return arguments.length?(interpolator=_,scale):interpolator};scale.range=range(d3Interpolate.interpolate);scale.rangeRound=range(d3Interpolate.interpolateRound);scale.unknown=function(_){return arguments.length?(unknown=_,scale):unknown};return function(t){transform=t;t0=t(x0);t1=t(x1);t2=t(x2);k10=t0===t1?0:.5/(t1-t0);k21=t1===t2?0:.5/(t2-t1);s=t1<t0?-1:1;return scale}}function diverging(){var scale=linearish(transformer$2()(identity));\nscale.copy=function(){return copy$1(scale,diverging())};return initInterpolator.apply(scale,arguments)}function divergingLog(){var scale=loggish(transformer$2()).domain([.1,1,10]);scale.copy=function(){return copy$1(scale,divergingLog()).base(scale.base())};return initInterpolator.apply(scale,arguments)}function divergingSymlog(){var scale=symlogish(transformer$2());scale.copy=function(){return copy$1(scale,divergingSymlog()).constant(scale.constant())};return initInterpolator.apply(scale,arguments)}\nfunction divergingPow(){var scale=powish(transformer$2());scale.copy=function(){return copy$1(scale,divergingPow()).exponent(scale.exponent())};return initInterpolator.apply(scale,arguments)}var implicit=Symbol(\"implicit\"),unit=[0,1];exports.scaleBand=band;exports.scaleDiverging=diverging;exports.scaleDivergingLog=divergingLog;exports.scaleDivergingPow=divergingPow;exports.scaleDivergingSqrt=function(){return divergingPow.apply(null,arguments).exponent(.5)};exports.scaleDivergingSymlog=divergingSymlog;\nexports.scaleIdentity=identity$1;exports.scaleImplicit=implicit;exports.scaleLinear=linear;exports.scaleLog=log;exports.scaleOrdinal=ordinal;exports.scalePoint=function(){return pointish(band.apply(null,arguments).paddingInner(1))};exports.scalePow=pow;exports.scaleQuantile=quantile;exports.scaleQuantize=quantize;exports.scaleRadial=radial;exports.scaleSequential=sequential;exports.scaleSequentialLog=sequentialLog;exports.scaleSequentialPow=sequentialPow;exports.scaleSequentialQuantile=sequentialQuantile;\nexports.scaleSequentialSqrt=function(){return sequentialPow.apply(null,arguments).exponent(.5)};exports.scaleSequentialSymlog=sequentialSymlog;exports.scaleSqrt=function(){return pow.apply(null,arguments).exponent(.5)};exports.scaleSymlog=symlog;exports.scaleThreshold=threshold;exports.scaleTime=function(){return initRange.apply(calendar(d3Time.timeYear,d3Time.timeMonth,d3Time.timeWeek,d3Time.timeDay,d3Time.timeHour,d3Time.timeMinute,d3Time.timeSecond,d3Time.timeMillisecond,d3TimeFormat.timeFormat).domain([new Date(2E3,\n0,1),new Date(2E3,0,2)]),arguments)};exports.scaleUtc=function(){return initRange.apply(calendar(d3Time.utcYear,d3Time.utcMonth,d3Time.utcWeek,d3Time.utcDay,d3Time.utcHour,d3Time.utcMinute,d3Time.utcSecond,d3Time.utcMillisecond,d3TimeFormat.utcFormat).domain([Date.UTC(2E3,0,1),Date.UTC(2E3,0,2)]),arguments)};exports.tickFormat=tickFormat;Object.defineProperty(exports,\"__esModule\",{value:!0})})}","~:source","shadow$provide[\"module$node_modules$d3_scale$dist$d3_scale\"] = function(global,require,module,exports) {\n// https://d3js.org/d3-scale/ v3.2.2 Copyright 2020 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('d3-interpolate'), require('d3-format'), require('d3-time'), require('d3-time-format')) :\ntypeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-interpolate', 'd3-format', 'd3-time', 'd3-time-format'], factory) :\n(global = global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3));\n}(this, function (exports, d3Array, d3Interpolate, d3Format, d3Time, d3TimeFormat) { 'use strict';\n\nfunction initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nfunction initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === \"function\") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === \"function\") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n\nconst implicit = Symbol(\"implicit\");\n\nfunction ordinal() {\n  var index = new Map(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    var key = d + \"\", i = index.get(key);\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new Map();\n    for (const value of _) {\n      const key = value + \"\";\n      if (index.has(key)) continue;\n      index.set(key, domain.push(value));\n    }\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\nfunction band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      r0 = 0,\n      r1 = 1,\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = r1 < r0,\n        start = reverse ? r1 : r0,\n        stop = reverse ? r0 : r1;\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = d3Array.range(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];\n  };\n\n  scale.rangeRound = function(_) {\n    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band(domain(), [r0, r1])\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return initRange.apply(rescale(), arguments);\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nfunction point() {\n  return pointish(band.apply(null, arguments).paddingInner(1));\n}\n\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\n\nfunction number(x) {\n  return +x;\n}\n\nvar unit = [0, 1];\n\nfunction identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = d3Array.bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nfunction copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nfunction transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = d3Interpolate.interpolate,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3Interpolate.interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = d3Interpolate.interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nfunction continuous() {\n  return transformer()(identity, identity);\n}\n\nfunction tickFormat(start, stop, count, specifier) {\n  var step = d3Array.tickStep(start, stop, count),\n      precision;\n  specifier = d3Format.formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;\n      return d3Format.formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return d3Format.format(specifier);\n}\n\nfunction linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = d3Array.tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start;\n        d[i1] = stop;\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nfunction linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n\nfunction identity$1(domain) {\n  var unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), scale) : domain.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return identity$1(domain).unknown(unknown);\n  };\n\n  domain = arguments.length ? Array.from(domain, number) : [0, 1];\n\n  return linearish(scale);\n}\n\nfunction nice(domain, interval) {\n  domain = domain.slice();\n\n  var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n\n  if (x1 < x0) {\n    t = i0, i0 = i1, i1 = t;\n    t = x0, x0 = x1, x1 = t;\n  }\n\n  domain[i0] = interval.floor(x0);\n  domain[i1] = interval.ceil(x1);\n  return domain;\n}\n\nfunction transformLog(x) {\n  return Math.log(x);\n}\n\nfunction transformExp(x) {\n  return Math.exp(x);\n}\n\nfunction transformLogn(x) {\n  return -Math.log(-x);\n}\n\nfunction transformExpn(x) {\n  return -Math.exp(-x);\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10\n      : base === Math.E ? Math.exp\n      : function(x) { return Math.pow(base, x); };\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log\n      : base === 10 && Math.log10\n      || base === 2 && Math.log2\n      || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n}\n\nfunction reflect(f) {\n  return function(x) {\n    return -f(-x);\n  };\n}\n\nfunction loggish(transform) {\n  var scale = transform(transformLog, transformExp),\n      domain = scale.domain,\n      base = 10,\n      logs,\n      pows;\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) {\n      logs = reflect(logs), pows = reflect(pows);\n      transform(transformLogn, transformExpn);\n    } else {\n      transform(transformLog, transformExp);\n    }\n    return scale;\n  }\n\n  scale.base = function(_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = function(count) {\n    var d = domain(),\n        u = d[0],\n        v = d[d.length - 1],\n        r;\n\n    if (r = v < u) i = u, u = v, v = i;\n\n    var i = logs(u),\n        j = logs(v),\n        p,\n        k,\n        t,\n        n = count == null ? 10 : +count,\n        z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.floor(i), j = Math.ceil(j);\n      if (u > 0) for (; i <= j; ++i) {\n        for (k = 1, p = pows(i); k < base; ++k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i <= j; ++i) {\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n      if (z.length * 2 < n) z = d3Array.ticks(u, v, n);\n    } else {\n      z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);\n    }\n\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n    if (typeof specifier !== \"function\") specifier = d3Format.format(specifier);\n    if (count === Infinity) return specifier;\n    if (count == null) count = 10;\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n    return function(d) {\n      var i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n\n  scale.nice = function() {\n    return domain(nice(domain(), {\n      floor: function(x) { return pows(Math.floor(logs(x))); },\n      ceil: function(x) { return pows(Math.ceil(logs(x))); }\n    }));\n  };\n\n  return scale;\n}\n\nfunction log() {\n  var scale = loggish(transformer()).domain([1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, log()).base(scale.base());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\nfunction transformSymlog(c) {\n  return function(x) {\n    return Math.sign(x) * Math.log1p(Math.abs(x / c));\n  };\n}\n\nfunction transformSymexp(c) {\n  return function(x) {\n    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n  };\n}\n\nfunction symlogish(transform) {\n  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));\n\n  scale.constant = function(_) {\n    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\n  };\n\n  return linearish(scale);\n}\n\nfunction symlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, symlog()).constant(scale.constant());\n  };\n\n  return initRange.apply(scale, arguments);\n}\n\nfunction transformPow(exponent) {\n  return function(x) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  };\n}\n\nfunction transformSqrt(x) {\n  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);\n}\n\nfunction transformSquare(x) {\n  return x < 0 ? -x * x : x * x;\n}\n\nfunction powish(transform) {\n  var scale = transform(identity, identity),\n      exponent = 1;\n\n  function rescale() {\n    return exponent === 1 ? transform(identity, identity)\n        : exponent === 0.5 ? transform(transformSqrt, transformSquare)\n        : transform(transformPow(exponent), transformPow(1 / exponent));\n  }\n\n  scale.exponent = function(_) {\n    return arguments.length ? (exponent = +_, rescale()) : exponent;\n  };\n\n  return linearish(scale);\n}\n\nfunction pow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, pow()).exponent(scale.exponent());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\nfunction sqrt() {\n  return pow.apply(null, arguments).exponent(0.5);\n}\n\nfunction square(x) {\n  return Math.sign(x) * x * x;\n}\n\nfunction unsquare(x) {\n  return Math.sign(x) * Math.sqrt(Math.abs(x));\n}\n\nfunction radial() {\n  var squared = continuous(),\n      range = [0, 1],\n      round = false,\n      unknown;\n\n  function scale(x) {\n    var y = unsquare(squared(x));\n    return isNaN(y) ? unknown : round ? Math.round(y) : y;\n  }\n\n  scale.invert = function(y) {\n    return squared.invert(square(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (squared.domain(_), scale) : squared.domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (squared.range((range = Array.from(_, number)).map(square)), scale) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return scale.range(_).round(true);\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, scale) : round;\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (squared.clamp(_), scale) : squared.clamp();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return radial(squared.domain(), range)\n        .round(round)\n        .clamp(squared.clamp())\n        .unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n\nfunction quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [],\n      unknown;\n\n  function rescale() {\n    var i = 0, n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = d3Array.quantile(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : range[d3Array.bisect(thresholds, x)];\n  }\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [\n      i > 0 ? thresholds[i - 1] : domain[0],\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n    ];\n  };\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(d3Array.ascending);\n    return rescale();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.quantiles = function() {\n    return thresholds.slice();\n  };\n\n  scale.copy = function() {\n    return quantile()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n\nfunction quantize() {\n  var x0 = 0,\n      x1 = 1,\n      n = 1,\n      domain = [0.5],\n      range = [0, 1],\n      unknown;\n\n  function scale(x) {\n    return x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;\n  }\n\n  function rescale() {\n    var i = -1;\n    domain = new Array(n);\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n    return scale;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN]\n        : i < 1 ? [x0, domain[0]]\n        : i >= n ? [domain[n - 1], x1]\n        : [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : scale;\n  };\n\n  scale.thresholds = function() {\n    return domain.slice();\n  };\n\n  scale.copy = function() {\n    return quantize()\n        .domain([x0, x1])\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(linearish(scale), arguments);\n}\n\nfunction threshold() {\n  var domain = [0.5],\n      range = [0, 1],\n      unknown,\n      n = 1;\n\n  function scale(x) {\n    return x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return threshold()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n\nvar durationSecond = 1000,\n    durationMinute = durationSecond * 60,\n    durationHour = durationMinute * 60,\n    durationDay = durationHour * 24,\n    durationWeek = durationDay * 7,\n    durationMonth = durationDay * 30,\n    durationYear = durationDay * 365;\n\nfunction date(t) {\n  return new Date(t);\n}\n\nfunction number$1(t) {\n  return t instanceof Date ? +t : +new Date(+t);\n}\n\nfunction calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n  var scale = continuous(),\n      invert = scale.invert,\n      domain = scale.domain;\n\n  var formatMillisecond = format(\".%L\"),\n      formatSecond = format(\":%S\"),\n      formatMinute = format(\"%I:%M\"),\n      formatHour = format(\"%I %p\"),\n      formatDay = format(\"%a %d\"),\n      formatWeek = format(\"%b %d\"),\n      formatMonth = format(\"%B\"),\n      formatYear = format(\"%Y\");\n\n  var tickIntervals = [\n    [second,  1,      durationSecond],\n    [second,  5,  5 * durationSecond],\n    [second, 15, 15 * durationSecond],\n    [second, 30, 30 * durationSecond],\n    [minute,  1,      durationMinute],\n    [minute,  5,  5 * durationMinute],\n    [minute, 15, 15 * durationMinute],\n    [minute, 30, 30 * durationMinute],\n    [  hour,  1,      durationHour  ],\n    [  hour,  3,  3 * durationHour  ],\n    [  hour,  6,  6 * durationHour  ],\n    [  hour, 12, 12 * durationHour  ],\n    [   day,  1,      durationDay   ],\n    [   day,  2,  2 * durationDay   ],\n    [  week,  1,      durationWeek  ],\n    [ month,  1,      durationMonth ],\n    [ month,  3,  3 * durationMonth ],\n    [  year,  1,      durationYear  ]\n  ];\n\n  function tickFormat(date) {\n    return (second(date) < date ? formatMillisecond\n        : minute(date) < date ? formatSecond\n        : hour(date) < date ? formatMinute\n        : day(date) < date ? formatHour\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n        : year(date) < date ? formatMonth\n        : formatYear)(date);\n  }\n\n  function tickInterval(interval, start, stop) {\n    if (interval == null) interval = 10;\n\n    // If a desired tick count is specified, pick a reasonable tick interval\n    // based on the extent of the domain and a rough estimate of tick size.\n    // Otherwise, assume interval is already a time interval and use it.\n    if (typeof interval === \"number\") {\n      var target = Math.abs(stop - start) / interval,\n          i = d3Array.bisector(function(i) { return i[2]; }).right(tickIntervals, target),\n          step;\n      if (i === tickIntervals.length) {\n        step = d3Array.tickStep(start / durationYear, stop / durationYear, interval);\n        interval = year;\n      } else if (i) {\n        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n        step = i[1];\n        interval = i[0];\n      } else {\n        step = Math.max(d3Array.tickStep(start, stop, interval), 1);\n        interval = millisecond;\n      }\n      return interval.every(step);\n    }\n\n    return interval;\n  }\n\n  scale.invert = function(y) {\n    return new Date(invert(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? domain(Array.from(_, number$1)) : domain().map(date);\n  };\n\n  scale.ticks = function(interval) {\n    var d = domain(),\n        t0 = d[0],\n        t1 = d[d.length - 1],\n        r = t1 < t0,\n        t;\n    if (r) t = t0, t0 = t1, t1 = t;\n    t = tickInterval(interval, t0, t1);\n    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n    return r ? t.reverse() : t;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return specifier == null ? tickFormat : format(specifier);\n  };\n\n  scale.nice = function(interval) {\n    var d = domain();\n    return (interval = tickInterval(interval, d[0], d[d.length - 1]))\n        ? domain(nice(d, interval))\n        : scale;\n  };\n\n  scale.copy = function() {\n    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n  };\n\n  return scale;\n}\n\nfunction time() {\n  return initRange.apply(calendar(d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3Time.timeMillisecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\n}\n\nfunction utcTime() {\n  return initRange.apply(calendar(d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3Time.utcMillisecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);\n}\n\nfunction transformer$1() {\n  var x0 = 0,\n      x1 = 1,\n      t0,\n      t1,\n      k10,\n      transform,\n      interpolator = identity,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  function range(interpolate) {\n    return function(_) {\n      var r0, r1;\n      return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];\n    };\n  }\n\n  scale.range = range(d3Interpolate.interpolate);\n\n  scale.rangeRound = range(d3Interpolate.interpolateRound);\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\n    return scale;\n  };\n}\n\nfunction copy$1(source, target) {\n  return target\n      .domain(source.domain())\n      .interpolator(source.interpolator())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nfunction sequential() {\n  var scale = linearish(transformer$1()(identity));\n\n  scale.copy = function() {\n    return copy$1(scale, sequential());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialLog() {\n  var scale = loggish(transformer$1()).domain([1, 10]);\n\n  scale.copy = function() {\n    return copy$1(scale, sequentialLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialSymlog() {\n  var scale = symlogish(transformer$1());\n\n  scale.copy = function() {\n    return copy$1(scale, sequentialSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialPow() {\n  var scale = powish(transformer$1());\n\n  scale.copy = function() {\n    return copy$1(scale, sequentialPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialSqrt() {\n  return sequentialPow.apply(null, arguments).exponent(0.5);\n}\n\nfunction sequentialQuantile() {\n  var domain = [],\n      interpolator = identity;\n\n  function scale(x) {\n    if (!isNaN(x = +x)) return interpolator((d3Array.bisect(domain, x, 1) - 1) / (domain.length - 1));\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(d3Array.ascending);\n    return scale;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.range = function() {\n    return domain.map((d, i) => interpolator(i / (domain.length - 1)));\n  };\n\n  scale.quantiles = function(n) {\n    return Array.from({length: n + 1}, (_, i) => d3Array.quantile(domain, i / n));\n  };\n\n  scale.copy = function() {\n    return sequentialQuantile(interpolator).domain(domain);\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction transformer$2() {\n  var x0 = 0,\n      x1 = 0.5,\n      x2 = 1,\n      s = 1,\n      t0,\n      t1,\n      t2,\n      k10,\n      k21,\n      interpolator = identity,\n      transform,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  function range(interpolate) {\n    return function(_) {\n      var r0, r1, r2;\n      return arguments.length ? ([r0, r1, r2] = _, interpolator = d3Interpolate.piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];\n    };\n  }\n\n  scale.range = range(d3Interpolate.interpolate);\n\n  scale.rangeRound = range(d3Interpolate.interpolateRound);\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;\n    return scale;\n  };\n}\n\nfunction diverging() {\n  var scale = linearish(transformer$2()(identity));\n\n  scale.copy = function() {\n    return copy$1(scale, diverging());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction divergingLog() {\n  var scale = loggish(transformer$2()).domain([0.1, 1, 10]);\n\n  scale.copy = function() {\n    return copy$1(scale, divergingLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction divergingSymlog() {\n  var scale = symlogish(transformer$2());\n\n  scale.copy = function() {\n    return copy$1(scale, divergingSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction divergingPow() {\n  var scale = powish(transformer$2());\n\n  scale.copy = function() {\n    return copy$1(scale, divergingPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction divergingSqrt() {\n  return divergingPow.apply(null, arguments).exponent(0.5);\n}\n\nexports.scaleBand = band;\nexports.scaleDiverging = diverging;\nexports.scaleDivergingLog = divergingLog;\nexports.scaleDivergingPow = divergingPow;\nexports.scaleDivergingSqrt = divergingSqrt;\nexports.scaleDivergingSymlog = divergingSymlog;\nexports.scaleIdentity = identity$1;\nexports.scaleImplicit = implicit;\nexports.scaleLinear = linear;\nexports.scaleLog = log;\nexports.scaleOrdinal = ordinal;\nexports.scalePoint = point;\nexports.scalePow = pow;\nexports.scaleQuantile = quantile;\nexports.scaleQuantize = quantize;\nexports.scaleRadial = radial;\nexports.scaleSequential = sequential;\nexports.scaleSequentialLog = sequentialLog;\nexports.scaleSequentialPow = sequentialPow;\nexports.scaleSequentialQuantile = sequentialQuantile;\nexports.scaleSequentialSqrt = sequentialSqrt;\nexports.scaleSequentialSymlog = sequentialSymlog;\nexports.scaleSqrt = sqrt;\nexports.scaleSymlog = symlog;\nexports.scaleThreshold = threshold;\nexports.scaleTime = time;\nexports.scaleUtc = utcTime;\nexports.tickFormat = tickFormat;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$d3_time$dist$d3_time","~$shadow.js","~$module$node_modules$d3_format$dist$d3_format","~$module$node_modules$d3_array$dist$d3_array","~$module$node_modules$d3_time_format$dist$d3_time_format","~$module$node_modules$d3_interpolate$dist$d3_interpolate"]],"~:properties",["^5",["scaleIdentity","floor","thresholds","ceil","range","invert","scaleSequentialQuantile","align","precision","interpolate","copy","scaleDivergingPow","rangeRound","constant","scaleSequentialSqrt","scaleSequentialPow","bandwidth","interpolator","scaleSymlog","__esModule","padding","scaleImplicit","base","d3","scaleBand","paddingOuter","scaleLog","scaleSequential","scaleRadial","scaleTime","scaleQuantile","value","paddingInner","scaleLinear","scaleSequentialSymlog","scaleDivergingLog","clamp","domain","invertExtent","scalePoint","length","ticks","unknown","scaleSequentialLog","tickFormat","quantiles","scaleOrdinal","scaleDivergingSymlog","scaleDiverging","scalePow","round","scaleQuantize","exponent","scaleThreshold","scaleSqrt","scaleUtc","nice","scaleDivergingSqrt","step"]],"~:compiled-at",1600144479882,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$d3_scale$dist$d3_scale.js\",\n\"lineCount\":51,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/d3-scale/dist/d3-scale.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$d3_scale$dist$d3_scale\\\"] = function(global,require,module,exports) {\\n// https://d3js.org/d3-scale/ v3.2.2 Copyright 2020 Mike Bostock\\n(function (global, factory) {\\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('d3-interpolate'), require('d3-format'), require('d3-time'), require('d3-time-format')) :\\ntypeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-interpolate', 'd3-format', 'd3-time', 'd3-time-format'], factory) :\\n(global = global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3));\\n}(this, function (exports, d3Array, d3Interpolate, d3Format, d3Time, d3TimeFormat) { 'use strict';\\n\\nfunction initRange(domain, range) {\\n  switch (arguments.length) {\\n    case 0: break;\\n    case 1: this.range(domain); break;\\n    default: this.range(range).domain(domain); break;\\n  }\\n  return this;\\n}\\n\\nfunction initInterpolator(domain, interpolator) {\\n  switch (arguments.length) {\\n    case 0: break;\\n    case 1: {\\n      if (typeof domain === \\\"function\\\") this.interpolator(domain);\\n      else this.range(domain);\\n      break;\\n    }\\n    default: {\\n      this.domain(domain);\\n      if (typeof interpolator === \\\"function\\\") this.interpolator(interpolator);\\n      else this.range(interpolator);\\n      break;\\n    }\\n  }\\n  return this;\\n}\\n\\nconst implicit = Symbol(\\\"implicit\\\");\\n\\nfunction ordinal() {\\n  var index = new Map(),\\n      domain = [],\\n      range = [],\\n      unknown = implicit;\\n\\n  function scale(d) {\\n    var key = d + \\\"\\\", i = index.get(key);\\n    if (!i) {\\n      if (unknown !== implicit) return unknown;\\n      index.set(key, i = domain.push(d));\\n    }\\n    return range[(i - 1) % range.length];\\n  }\\n\\n  scale.domain = function(_) {\\n    if (!arguments.length) return domain.slice();\\n    domain = [], index = new Map();\\n    for (const value of _) {\\n      const key = value + \\\"\\\";\\n      if (index.has(key)) continue;\\n      index.set(key, domain.push(value));\\n    }\\n    return scale;\\n  };\\n\\n  scale.range = function(_) {\\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\\n  };\\n\\n  scale.unknown = function(_) {\\n    return arguments.length ? (unknown = _, scale) : unknown;\\n  };\\n\\n  scale.copy = function() {\\n    return ordinal(domain, range).unknown(unknown);\\n  };\\n\\n  initRange.apply(scale, arguments);\\n\\n  return scale;\\n}\\n\\nfunction band() {\\n  var scale = ordinal().unknown(undefined),\\n      domain = scale.domain,\\n      ordinalRange = scale.range,\\n      r0 = 0,\\n      r1 = 1,\\n      step,\\n      bandwidth,\\n      round = false,\\n      paddingInner = 0,\\n      paddingOuter = 0,\\n      align = 0.5;\\n\\n  delete scale.unknown;\\n\\n  function rescale() {\\n    var n = domain().length,\\n        reverse = r1 < r0,\\n        start = reverse ? r1 : r0,\\n        stop = reverse ? r0 : r1;\\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\\n    if (round) step = Math.floor(step);\\n    start += (stop - start - step * (n - paddingInner)) * align;\\n    bandwidth = step * (1 - paddingInner);\\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\\n    var values = d3Array.range(n).map(function(i) { return start + step * i; });\\n    return ordinalRange(reverse ? values.reverse() : values);\\n  }\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? (domain(_), rescale()) : domain();\\n  };\\n\\n  scale.range = function(_) {\\n    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];\\n  };\\n\\n  scale.rangeRound = function(_) {\\n    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();\\n  };\\n\\n  scale.bandwidth = function() {\\n    return bandwidth;\\n  };\\n\\n  scale.step = function() {\\n    return step;\\n  };\\n\\n  scale.round = function(_) {\\n    return arguments.length ? (round = !!_, rescale()) : round;\\n  };\\n\\n  scale.padding = function(_) {\\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\\n  };\\n\\n  scale.paddingInner = function(_) {\\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\\n  };\\n\\n  scale.paddingOuter = function(_) {\\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\\n  };\\n\\n  scale.align = function(_) {\\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\\n  };\\n\\n  scale.copy = function() {\\n    return band(domain(), [r0, r1])\\n        .round(round)\\n        .paddingInner(paddingInner)\\n        .paddingOuter(paddingOuter)\\n        .align(align);\\n  };\\n\\n  return initRange.apply(rescale(), arguments);\\n}\\n\\nfunction pointish(scale) {\\n  var copy = scale.copy;\\n\\n  scale.padding = scale.paddingOuter;\\n  delete scale.paddingInner;\\n  delete scale.paddingOuter;\\n\\n  scale.copy = function() {\\n    return pointish(copy());\\n  };\\n\\n  return scale;\\n}\\n\\nfunction point() {\\n  return pointish(band.apply(null, arguments).paddingInner(1));\\n}\\n\\nfunction constant(x) {\\n  return function() {\\n    return x;\\n  };\\n}\\n\\nfunction number(x) {\\n  return +x;\\n}\\n\\nvar unit = [0, 1];\\n\\nfunction identity(x) {\\n  return x;\\n}\\n\\nfunction normalize(a, b) {\\n  return (b -= (a = +a))\\n      ? function(x) { return (x - a) / b; }\\n      : constant(isNaN(b) ? NaN : 0.5);\\n}\\n\\nfunction clamper(a, b) {\\n  var t;\\n  if (a > b) t = a, a = b, b = t;\\n  return function(x) { return Math.max(a, Math.min(b, x)); };\\n}\\n\\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\\nfunction bimap(domain, range, interpolate) {\\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\\n  return function(x) { return r0(d0(x)); };\\n}\\n\\nfunction polymap(domain, range, interpolate) {\\n  var j = Math.min(domain.length, range.length) - 1,\\n      d = new Array(j),\\n      r = new Array(j),\\n      i = -1;\\n\\n  // Reverse descending domains.\\n  if (domain[j] < domain[0]) {\\n    domain = domain.slice().reverse();\\n    range = range.slice().reverse();\\n  }\\n\\n  while (++i < j) {\\n    d[i] = normalize(domain[i], domain[i + 1]);\\n    r[i] = interpolate(range[i], range[i + 1]);\\n  }\\n\\n  return function(x) {\\n    var i = d3Array.bisect(domain, x, 1, j) - 1;\\n    return r[i](d[i](x));\\n  };\\n}\\n\\nfunction copy(source, target) {\\n  return target\\n      .domain(source.domain())\\n      .range(source.range())\\n      .interpolate(source.interpolate())\\n      .clamp(source.clamp())\\n      .unknown(source.unknown());\\n}\\n\\nfunction transformer() {\\n  var domain = unit,\\n      range = unit,\\n      interpolate = d3Interpolate.interpolate,\\n      transform,\\n      untransform,\\n      unknown,\\n      clamp = identity,\\n      piecewise,\\n      output,\\n      input;\\n\\n  function rescale() {\\n    var n = Math.min(domain.length, range.length);\\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\\n    piecewise = n > 2 ? polymap : bimap;\\n    output = input = null;\\n    return scale;\\n  }\\n\\n  function scale(x) {\\n    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\\n  }\\n\\n  scale.invert = function(y) {\\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3Interpolate.interpolateNumber)))(y)));\\n  };\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\\n  };\\n\\n  scale.range = function(_) {\\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\\n  };\\n\\n  scale.rangeRound = function(_) {\\n    return range = Array.from(_), interpolate = d3Interpolate.interpolateRound, rescale();\\n  };\\n\\n  scale.clamp = function(_) {\\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\\n  };\\n\\n  scale.interpolate = function(_) {\\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\\n  };\\n\\n  scale.unknown = function(_) {\\n    return arguments.length ? (unknown = _, scale) : unknown;\\n  };\\n\\n  return function(t, u) {\\n    transform = t, untransform = u;\\n    return rescale();\\n  };\\n}\\n\\nfunction continuous() {\\n  return transformer()(identity, identity);\\n}\\n\\nfunction tickFormat(start, stop, count, specifier) {\\n  var step = d3Array.tickStep(start, stop, count),\\n      precision;\\n  specifier = d3Format.formatSpecifier(specifier == null ? \\\",f\\\" : specifier);\\n  switch (specifier.type) {\\n    case \\\"s\\\": {\\n      var value = Math.max(Math.abs(start), Math.abs(stop));\\n      if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;\\n      return d3Format.formatPrefix(specifier, value);\\n    }\\n    case \\\"\\\":\\n    case \\\"e\\\":\\n    case \\\"g\\\":\\n    case \\\"p\\\":\\n    case \\\"r\\\": {\\n      if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \\\"e\\\");\\n      break;\\n    }\\n    case \\\"f\\\":\\n    case \\\"%\\\": {\\n      if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === \\\"%\\\") * 2;\\n      break;\\n    }\\n  }\\n  return d3Format.format(specifier);\\n}\\n\\nfunction linearish(scale) {\\n  var domain = scale.domain;\\n\\n  scale.ticks = function(count) {\\n    var d = domain();\\n    return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);\\n  };\\n\\n  scale.tickFormat = function(count, specifier) {\\n    var d = domain();\\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\\n  };\\n\\n  scale.nice = function(count) {\\n    if (count == null) count = 10;\\n\\n    var d = domain();\\n    var i0 = 0;\\n    var i1 = d.length - 1;\\n    var start = d[i0];\\n    var stop = d[i1];\\n    var prestep;\\n    var step;\\n    var maxIter = 10;\\n\\n    if (stop < start) {\\n      step = start, start = stop, stop = step;\\n      step = i0, i0 = i1, i1 = step;\\n    }\\n    \\n    while (maxIter-- > 0) {\\n      step = d3Array.tickIncrement(start, stop, count);\\n      if (step === prestep) {\\n        d[i0] = start;\\n        d[i1] = stop;\\n        return domain(d);\\n      } else if (step > 0) {\\n        start = Math.floor(start / step) * step;\\n        stop = Math.ceil(stop / step) * step;\\n      } else if (step < 0) {\\n        start = Math.ceil(start * step) / step;\\n        stop = Math.floor(stop * step) / step;\\n      } else {\\n        break;\\n      }\\n      prestep = step;\\n    }\\n\\n    return scale;\\n  };\\n\\n  return scale;\\n}\\n\\nfunction linear() {\\n  var scale = continuous();\\n\\n  scale.copy = function() {\\n    return copy(scale, linear());\\n  };\\n\\n  initRange.apply(scale, arguments);\\n\\n  return linearish(scale);\\n}\\n\\nfunction identity$1(domain) {\\n  var unknown;\\n\\n  function scale(x) {\\n    return isNaN(x = +x) ? unknown : x;\\n  }\\n\\n  scale.invert = scale;\\n\\n  scale.domain = scale.range = function(_) {\\n    return arguments.length ? (domain = Array.from(_, number), scale) : domain.slice();\\n  };\\n\\n  scale.unknown = function(_) {\\n    return arguments.length ? (unknown = _, scale) : unknown;\\n  };\\n\\n  scale.copy = function() {\\n    return identity$1(domain).unknown(unknown);\\n  };\\n\\n  domain = arguments.length ? Array.from(domain, number) : [0, 1];\\n\\n  return linearish(scale);\\n}\\n\\nfunction nice(domain, interval) {\\n  domain = domain.slice();\\n\\n  var i0 = 0,\\n      i1 = domain.length - 1,\\n      x0 = domain[i0],\\n      x1 = domain[i1],\\n      t;\\n\\n  if (x1 < x0) {\\n    t = i0, i0 = i1, i1 = t;\\n    t = x0, x0 = x1, x1 = t;\\n  }\\n\\n  domain[i0] = interval.floor(x0);\\n  domain[i1] = interval.ceil(x1);\\n  return domain;\\n}\\n\\nfunction transformLog(x) {\\n  return Math.log(x);\\n}\\n\\nfunction transformExp(x) {\\n  return Math.exp(x);\\n}\\n\\nfunction transformLogn(x) {\\n  return -Math.log(-x);\\n}\\n\\nfunction transformExpn(x) {\\n  return -Math.exp(-x);\\n}\\n\\nfunction pow10(x) {\\n  return isFinite(x) ? +(\\\"1e\\\" + x) : x < 0 ? 0 : x;\\n}\\n\\nfunction powp(base) {\\n  return base === 10 ? pow10\\n      : base === Math.E ? Math.exp\\n      : function(x) { return Math.pow(base, x); };\\n}\\n\\nfunction logp(base) {\\n  return base === Math.E ? Math.log\\n      : base === 10 && Math.log10\\n      || base === 2 && Math.log2\\n      || (base = Math.log(base), function(x) { return Math.log(x) / base; });\\n}\\n\\nfunction reflect(f) {\\n  return function(x) {\\n    return -f(-x);\\n  };\\n}\\n\\nfunction loggish(transform) {\\n  var scale = transform(transformLog, transformExp),\\n      domain = scale.domain,\\n      base = 10,\\n      logs,\\n      pows;\\n\\n  function rescale() {\\n    logs = logp(base), pows = powp(base);\\n    if (domain()[0] < 0) {\\n      logs = reflect(logs), pows = reflect(pows);\\n      transform(transformLogn, transformExpn);\\n    } else {\\n      transform(transformLog, transformExp);\\n    }\\n    return scale;\\n  }\\n\\n  scale.base = function(_) {\\n    return arguments.length ? (base = +_, rescale()) : base;\\n  };\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? (domain(_), rescale()) : domain();\\n  };\\n\\n  scale.ticks = function(count) {\\n    var d = domain(),\\n        u = d[0],\\n        v = d[d.length - 1],\\n        r;\\n\\n    if (r = v < u) i = u, u = v, v = i;\\n\\n    var i = logs(u),\\n        j = logs(v),\\n        p,\\n        k,\\n        t,\\n        n = count == null ? 10 : +count,\\n        z = [];\\n\\n    if (!(base % 1) && j - i < n) {\\n      i = Math.floor(i), j = Math.ceil(j);\\n      if (u > 0) for (; i <= j; ++i) {\\n        for (k = 1, p = pows(i); k < base; ++k) {\\n          t = p * k;\\n          if (t < u) continue;\\n          if (t > v) break;\\n          z.push(t);\\n        }\\n      } else for (; i <= j; ++i) {\\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\\n          t = p * k;\\n          if (t < u) continue;\\n          if (t > v) break;\\n          z.push(t);\\n        }\\n      }\\n      if (z.length * 2 < n) z = d3Array.ticks(u, v, n);\\n    } else {\\n      z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);\\n    }\\n\\n    return r ? z.reverse() : z;\\n  };\\n\\n  scale.tickFormat = function(count, specifier) {\\n    if (specifier == null) specifier = base === 10 ? \\\".0e\\\" : \\\",\\\";\\n    if (typeof specifier !== \\\"function\\\") specifier = d3Format.format(specifier);\\n    if (count === Infinity) return specifier;\\n    if (count == null) count = 10;\\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\\n    return function(d) {\\n      var i = d / pows(Math.round(logs(d)));\\n      if (i * base < base - 0.5) i *= base;\\n      return i <= k ? specifier(d) : \\\"\\\";\\n    };\\n  };\\n\\n  scale.nice = function() {\\n    return domain(nice(domain(), {\\n      floor: function(x) { return pows(Math.floor(logs(x))); },\\n      ceil: function(x) { return pows(Math.ceil(logs(x))); }\\n    }));\\n  };\\n\\n  return scale;\\n}\\n\\nfunction log() {\\n  var scale = loggish(transformer()).domain([1, 10]);\\n\\n  scale.copy = function() {\\n    return copy(scale, log()).base(scale.base());\\n  };\\n\\n  initRange.apply(scale, arguments);\\n\\n  return scale;\\n}\\n\\nfunction transformSymlog(c) {\\n  return function(x) {\\n    return Math.sign(x) * Math.log1p(Math.abs(x / c));\\n  };\\n}\\n\\nfunction transformSymexp(c) {\\n  return function(x) {\\n    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\\n  };\\n}\\n\\nfunction symlogish(transform) {\\n  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));\\n\\n  scale.constant = function(_) {\\n    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\\n  };\\n\\n  return linearish(scale);\\n}\\n\\nfunction symlog() {\\n  var scale = symlogish(transformer());\\n\\n  scale.copy = function() {\\n    return copy(scale, symlog()).constant(scale.constant());\\n  };\\n\\n  return initRange.apply(scale, arguments);\\n}\\n\\nfunction transformPow(exponent) {\\n  return function(x) {\\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\\n  };\\n}\\n\\nfunction transformSqrt(x) {\\n  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);\\n}\\n\\nfunction transformSquare(x) {\\n  return x < 0 ? -x * x : x * x;\\n}\\n\\nfunction powish(transform) {\\n  var scale = transform(identity, identity),\\n      exponent = 1;\\n\\n  function rescale() {\\n    return exponent === 1 ? transform(identity, identity)\\n        : exponent === 0.5 ? transform(transformSqrt, transformSquare)\\n        : transform(transformPow(exponent), transformPow(1 / exponent));\\n  }\\n\\n  scale.exponent = function(_) {\\n    return arguments.length ? (exponent = +_, rescale()) : exponent;\\n  };\\n\\n  return linearish(scale);\\n}\\n\\nfunction pow() {\\n  var scale = powish(transformer());\\n\\n  scale.copy = function() {\\n    return copy(scale, pow()).exponent(scale.exponent());\\n  };\\n\\n  initRange.apply(scale, arguments);\\n\\n  return scale;\\n}\\n\\nfunction sqrt() {\\n  return pow.apply(null, arguments).exponent(0.5);\\n}\\n\\nfunction square(x) {\\n  return Math.sign(x) * x * x;\\n}\\n\\nfunction unsquare(x) {\\n  return Math.sign(x) * Math.sqrt(Math.abs(x));\\n}\\n\\nfunction radial() {\\n  var squared = continuous(),\\n      range = [0, 1],\\n      round = false,\\n      unknown;\\n\\n  function scale(x) {\\n    var y = unsquare(squared(x));\\n    return isNaN(y) ? unknown : round ? Math.round(y) : y;\\n  }\\n\\n  scale.invert = function(y) {\\n    return squared.invert(square(y));\\n  };\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? (squared.domain(_), scale) : squared.domain();\\n  };\\n\\n  scale.range = function(_) {\\n    return arguments.length ? (squared.range((range = Array.from(_, number)).map(square)), scale) : range.slice();\\n  };\\n\\n  scale.rangeRound = function(_) {\\n    return scale.range(_).round(true);\\n  };\\n\\n  scale.round = function(_) {\\n    return arguments.length ? (round = !!_, scale) : round;\\n  };\\n\\n  scale.clamp = function(_) {\\n    return arguments.length ? (squared.clamp(_), scale) : squared.clamp();\\n  };\\n\\n  scale.unknown = function(_) {\\n    return arguments.length ? (unknown = _, scale) : unknown;\\n  };\\n\\n  scale.copy = function() {\\n    return radial(squared.domain(), range)\\n        .round(round)\\n        .clamp(squared.clamp())\\n        .unknown(unknown);\\n  };\\n\\n  initRange.apply(scale, arguments);\\n\\n  return linearish(scale);\\n}\\n\\nfunction quantile() {\\n  var domain = [],\\n      range = [],\\n      thresholds = [],\\n      unknown;\\n\\n  function rescale() {\\n    var i = 0, n = Math.max(1, range.length);\\n    thresholds = new Array(n - 1);\\n    while (++i < n) thresholds[i - 1] = d3Array.quantile(domain, i / n);\\n    return scale;\\n  }\\n\\n  function scale(x) {\\n    return isNaN(x = +x) ? unknown : range[d3Array.bisect(thresholds, x)];\\n  }\\n\\n  scale.invertExtent = function(y) {\\n    var i = range.indexOf(y);\\n    return i < 0 ? [NaN, NaN] : [\\n      i > 0 ? thresholds[i - 1] : domain[0],\\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\\n    ];\\n  };\\n\\n  scale.domain = function(_) {\\n    if (!arguments.length) return domain.slice();\\n    domain = [];\\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\\n    domain.sort(d3Array.ascending);\\n    return rescale();\\n  };\\n\\n  scale.range = function(_) {\\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\\n  };\\n\\n  scale.unknown = function(_) {\\n    return arguments.length ? (unknown = _, scale) : unknown;\\n  };\\n\\n  scale.quantiles = function() {\\n    return thresholds.slice();\\n  };\\n\\n  scale.copy = function() {\\n    return quantile()\\n        .domain(domain)\\n        .range(range)\\n        .unknown(unknown);\\n  };\\n\\n  return initRange.apply(scale, arguments);\\n}\\n\\nfunction quantize() {\\n  var x0 = 0,\\n      x1 = 1,\\n      n = 1,\\n      domain = [0.5],\\n      range = [0, 1],\\n      unknown;\\n\\n  function scale(x) {\\n    return x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;\\n  }\\n\\n  function rescale() {\\n    var i = -1;\\n    domain = new Array(n);\\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\\n    return scale;\\n  }\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];\\n  };\\n\\n  scale.range = function(_) {\\n    return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();\\n  };\\n\\n  scale.invertExtent = function(y) {\\n    var i = range.indexOf(y);\\n    return i < 0 ? [NaN, NaN]\\n        : i < 1 ? [x0, domain[0]]\\n        : i >= n ? [domain[n - 1], x1]\\n        : [domain[i - 1], domain[i]];\\n  };\\n\\n  scale.unknown = function(_) {\\n    return arguments.length ? (unknown = _, scale) : scale;\\n  };\\n\\n  scale.thresholds = function() {\\n    return domain.slice();\\n  };\\n\\n  scale.copy = function() {\\n    return quantize()\\n        .domain([x0, x1])\\n        .range(range)\\n        .unknown(unknown);\\n  };\\n\\n  return initRange.apply(linearish(scale), arguments);\\n}\\n\\nfunction threshold() {\\n  var domain = [0.5],\\n      range = [0, 1],\\n      unknown,\\n      n = 1;\\n\\n  function scale(x) {\\n    return x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;\\n  }\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\\n  };\\n\\n  scale.range = function(_) {\\n    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\\n  };\\n\\n  scale.invertExtent = function(y) {\\n    var i = range.indexOf(y);\\n    return [domain[i - 1], domain[i]];\\n  };\\n\\n  scale.unknown = function(_) {\\n    return arguments.length ? (unknown = _, scale) : unknown;\\n  };\\n\\n  scale.copy = function() {\\n    return threshold()\\n        .domain(domain)\\n        .range(range)\\n        .unknown(unknown);\\n  };\\n\\n  return initRange.apply(scale, arguments);\\n}\\n\\nvar durationSecond = 1000,\\n    durationMinute = durationSecond * 60,\\n    durationHour = durationMinute * 60,\\n    durationDay = durationHour * 24,\\n    durationWeek = durationDay * 7,\\n    durationMonth = durationDay * 30,\\n    durationYear = durationDay * 365;\\n\\nfunction date(t) {\\n  return new Date(t);\\n}\\n\\nfunction number$1(t) {\\n  return t instanceof Date ? +t : +new Date(+t);\\n}\\n\\nfunction calendar(year, month, week, day, hour, minute, second, millisecond, format) {\\n  var scale = continuous(),\\n      invert = scale.invert,\\n      domain = scale.domain;\\n\\n  var formatMillisecond = format(\\\".%L\\\"),\\n      formatSecond = format(\\\":%S\\\"),\\n      formatMinute = format(\\\"%I:%M\\\"),\\n      formatHour = format(\\\"%I %p\\\"),\\n      formatDay = format(\\\"%a %d\\\"),\\n      formatWeek = format(\\\"%b %d\\\"),\\n      formatMonth = format(\\\"%B\\\"),\\n      formatYear = format(\\\"%Y\\\");\\n\\n  var tickIntervals = [\\n    [second,  1,      durationSecond],\\n    [second,  5,  5 * durationSecond],\\n    [second, 15, 15 * durationSecond],\\n    [second, 30, 30 * durationSecond],\\n    [minute,  1,      durationMinute],\\n    [minute,  5,  5 * durationMinute],\\n    [minute, 15, 15 * durationMinute],\\n    [minute, 30, 30 * durationMinute],\\n    [  hour,  1,      durationHour  ],\\n    [  hour,  3,  3 * durationHour  ],\\n    [  hour,  6,  6 * durationHour  ],\\n    [  hour, 12, 12 * durationHour  ],\\n    [   day,  1,      durationDay   ],\\n    [   day,  2,  2 * durationDay   ],\\n    [  week,  1,      durationWeek  ],\\n    [ month,  1,      durationMonth ],\\n    [ month,  3,  3 * durationMonth ],\\n    [  year,  1,      durationYear  ]\\n  ];\\n\\n  function tickFormat(date) {\\n    return (second(date) < date ? formatMillisecond\\n        : minute(date) < date ? formatSecond\\n        : hour(date) < date ? formatMinute\\n        : day(date) < date ? formatHour\\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\\n        : year(date) < date ? formatMonth\\n        : formatYear)(date);\\n  }\\n\\n  function tickInterval(interval, start, stop) {\\n    if (interval == null) interval = 10;\\n\\n    // If a desired tick count is specified, pick a reasonable tick interval\\n    // based on the extent of the domain and a rough estimate of tick size.\\n    // Otherwise, assume interval is already a time interval and use it.\\n    if (typeof interval === \\\"number\\\") {\\n      var target = Math.abs(stop - start) / interval,\\n          i = d3Array.bisector(function(i) { return i[2]; }).right(tickIntervals, target),\\n          step;\\n      if (i === tickIntervals.length) {\\n        step = d3Array.tickStep(start / durationYear, stop / durationYear, interval);\\n        interval = year;\\n      } else if (i) {\\n        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\\n        step = i[1];\\n        interval = i[0];\\n      } else {\\n        step = Math.max(d3Array.tickStep(start, stop, interval), 1);\\n        interval = millisecond;\\n      }\\n      return interval.every(step);\\n    }\\n\\n    return interval;\\n  }\\n\\n  scale.invert = function(y) {\\n    return new Date(invert(y));\\n  };\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? domain(Array.from(_, number$1)) : domain().map(date);\\n  };\\n\\n  scale.ticks = function(interval) {\\n    var d = domain(),\\n        t0 = d[0],\\n        t1 = d[d.length - 1],\\n        r = t1 < t0,\\n        t;\\n    if (r) t = t0, t0 = t1, t1 = t;\\n    t = tickInterval(interval, t0, t1);\\n    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\\n    return r ? t.reverse() : t;\\n  };\\n\\n  scale.tickFormat = function(count, specifier) {\\n    return specifier == null ? tickFormat : format(specifier);\\n  };\\n\\n  scale.nice = function(interval) {\\n    var d = domain();\\n    return (interval = tickInterval(interval, d[0], d[d.length - 1]))\\n        ? domain(nice(d, interval))\\n        : scale;\\n  };\\n\\n  scale.copy = function() {\\n    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\\n  };\\n\\n  return scale;\\n}\\n\\nfunction time() {\\n  return initRange.apply(calendar(d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3Time.timeMillisecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\\n}\\n\\nfunction utcTime() {\\n  return initRange.apply(calendar(d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3Time.utcMillisecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);\\n}\\n\\nfunction transformer$1() {\\n  var x0 = 0,\\n      x1 = 1,\\n      t0,\\n      t1,\\n      k10,\\n      transform,\\n      interpolator = identity,\\n      clamp = false,\\n      unknown;\\n\\n  function scale(x) {\\n    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\\n  }\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\\n  };\\n\\n  scale.clamp = function(_) {\\n    return arguments.length ? (clamp = !!_, scale) : clamp;\\n  };\\n\\n  scale.interpolator = function(_) {\\n    return arguments.length ? (interpolator = _, scale) : interpolator;\\n  };\\n\\n  function range(interpolate) {\\n    return function(_) {\\n      var r0, r1;\\n      return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];\\n    };\\n  }\\n\\n  scale.range = range(d3Interpolate.interpolate);\\n\\n  scale.rangeRound = range(d3Interpolate.interpolateRound);\\n\\n  scale.unknown = function(_) {\\n    return arguments.length ? (unknown = _, scale) : unknown;\\n  };\\n\\n  return function(t) {\\n    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\\n    return scale;\\n  };\\n}\\n\\nfunction copy$1(source, target) {\\n  return target\\n      .domain(source.domain())\\n      .interpolator(source.interpolator())\\n      .clamp(source.clamp())\\n      .unknown(source.unknown());\\n}\\n\\nfunction sequential() {\\n  var scale = linearish(transformer$1()(identity));\\n\\n  scale.copy = function() {\\n    return copy$1(scale, sequential());\\n  };\\n\\n  return initInterpolator.apply(scale, arguments);\\n}\\n\\nfunction sequentialLog() {\\n  var scale = loggish(transformer$1()).domain([1, 10]);\\n\\n  scale.copy = function() {\\n    return copy$1(scale, sequentialLog()).base(scale.base());\\n  };\\n\\n  return initInterpolator.apply(scale, arguments);\\n}\\n\\nfunction sequentialSymlog() {\\n  var scale = symlogish(transformer$1());\\n\\n  scale.copy = function() {\\n    return copy$1(scale, sequentialSymlog()).constant(scale.constant());\\n  };\\n\\n  return initInterpolator.apply(scale, arguments);\\n}\\n\\nfunction sequentialPow() {\\n  var scale = powish(transformer$1());\\n\\n  scale.copy = function() {\\n    return copy$1(scale, sequentialPow()).exponent(scale.exponent());\\n  };\\n\\n  return initInterpolator.apply(scale, arguments);\\n}\\n\\nfunction sequentialSqrt() {\\n  return sequentialPow.apply(null, arguments).exponent(0.5);\\n}\\n\\nfunction sequentialQuantile() {\\n  var domain = [],\\n      interpolator = identity;\\n\\n  function scale(x) {\\n    if (!isNaN(x = +x)) return interpolator((d3Array.bisect(domain, x, 1) - 1) / (domain.length - 1));\\n  }\\n\\n  scale.domain = function(_) {\\n    if (!arguments.length) return domain.slice();\\n    domain = [];\\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\\n    domain.sort(d3Array.ascending);\\n    return scale;\\n  };\\n\\n  scale.interpolator = function(_) {\\n    return arguments.length ? (interpolator = _, scale) : interpolator;\\n  };\\n\\n  scale.range = function() {\\n    return domain.map((d, i) => interpolator(i / (domain.length - 1)));\\n  };\\n\\n  scale.quantiles = function(n) {\\n    return Array.from({length: n + 1}, (_, i) => d3Array.quantile(domain, i / n));\\n  };\\n\\n  scale.copy = function() {\\n    return sequentialQuantile(interpolator).domain(domain);\\n  };\\n\\n  return initInterpolator.apply(scale, arguments);\\n}\\n\\nfunction transformer$2() {\\n  var x0 = 0,\\n      x1 = 0.5,\\n      x2 = 1,\\n      s = 1,\\n      t0,\\n      t1,\\n      t2,\\n      k10,\\n      k21,\\n      interpolator = identity,\\n      transform,\\n      clamp = false,\\n      unknown;\\n\\n  function scale(x) {\\n    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\\n  }\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];\\n  };\\n\\n  scale.clamp = function(_) {\\n    return arguments.length ? (clamp = !!_, scale) : clamp;\\n  };\\n\\n  scale.interpolator = function(_) {\\n    return arguments.length ? (interpolator = _, scale) : interpolator;\\n  };\\n\\n  function range(interpolate) {\\n    return function(_) {\\n      var r0, r1, r2;\\n      return arguments.length ? ([r0, r1, r2] = _, interpolator = d3Interpolate.piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];\\n    };\\n  }\\n\\n  scale.range = range(d3Interpolate.interpolate);\\n\\n  scale.rangeRound = range(d3Interpolate.interpolateRound);\\n\\n  scale.unknown = function(_) {\\n    return arguments.length ? (unknown = _, scale) : unknown;\\n  };\\n\\n  return function(t) {\\n    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;\\n    return scale;\\n  };\\n}\\n\\nfunction diverging() {\\n  var scale = linearish(transformer$2()(identity));\\n\\n  scale.copy = function() {\\n    return copy$1(scale, diverging());\\n  };\\n\\n  return initInterpolator.apply(scale, arguments);\\n}\\n\\nfunction divergingLog() {\\n  var scale = loggish(transformer$2()).domain([0.1, 1, 10]);\\n\\n  scale.copy = function() {\\n    return copy$1(scale, divergingLog()).base(scale.base());\\n  };\\n\\n  return initInterpolator.apply(scale, arguments);\\n}\\n\\nfunction divergingSymlog() {\\n  var scale = symlogish(transformer$2());\\n\\n  scale.copy = function() {\\n    return copy$1(scale, divergingSymlog()).constant(scale.constant());\\n  };\\n\\n  return initInterpolator.apply(scale, arguments);\\n}\\n\\nfunction divergingPow() {\\n  var scale = powish(transformer$2());\\n\\n  scale.copy = function() {\\n    return copy$1(scale, divergingPow()).exponent(scale.exponent());\\n  };\\n\\n  return initInterpolator.apply(scale, arguments);\\n}\\n\\nfunction divergingSqrt() {\\n  return divergingPow.apply(null, arguments).exponent(0.5);\\n}\\n\\nexports.scaleBand = band;\\nexports.scaleDiverging = diverging;\\nexports.scaleDivergingLog = divergingLog;\\nexports.scaleDivergingPow = divergingPow;\\nexports.scaleDivergingSqrt = divergingSqrt;\\nexports.scaleDivergingSymlog = divergingSymlog;\\nexports.scaleIdentity = identity$1;\\nexports.scaleImplicit = implicit;\\nexports.scaleLinear = linear;\\nexports.scaleLog = log;\\nexports.scaleOrdinal = ordinal;\\nexports.scalePoint = point;\\nexports.scalePow = pow;\\nexports.scaleQuantile = quantile;\\nexports.scaleQuantize = quantize;\\nexports.scaleRadial = radial;\\nexports.scaleSequential = sequential;\\nexports.scaleSequentialLog = sequentialLog;\\nexports.scaleSequentialPow = sequentialPow;\\nexports.scaleSequentialQuantile = sequentialQuantile;\\nexports.scaleSequentialSqrt = sequentialSqrt;\\nexports.scaleSequentialSymlog = sequentialSymlog;\\nexports.scaleSqrt = sqrt;\\nexports.scaleSymlog = symlog;\\nexports.scaleThreshold = threshold;\\nexports.scaleTime = time;\\nexports.scaleUtc = utcTime;\\nexports.tickFormat = tickFormat;\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\n}));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"self\",\"d3\",\"d3Array\",\"d3Interpolate\",\"d3Format\",\"d3Time\",\"d3TimeFormat\",\"initRange\",\"domain\",\"range\",\"arguments\",\"length\",\"initInterpolator\",\"interpolator\",\"ordinal\",\"scale\",\"d\",\"key\",\"i\",\"index\",\"get\",\"unknown\",\"implicit\",\"set\",\"push\",\"Map\",\"scale.domain\",\"_\",\"slice\",\"value\",\"has\",\"scale.range\",\"Array\",\"from\",\"scale.unknown\",\"copy\",\"scale.copy\",\"apply\",\"band\",\"rescale\",\"n\",\"reverse\",\"r1\",\"r0\",\"start\",\"stop\",\"step\",\"Math\",\"max\",\"paddingInner\",\"paddingOuter\",\"round\",\"floor\",\"align\",\"bandwidth\",\"values\",\"map\",\"ordinalRange\",\"undefined\",\"rangeRound\",\"scale.rangeRound\",\"scale.bandwidth\",\"scale.step\",\"scale.round\",\"padding\",\"scale.padding\",\"min\",\"scale.paddingInner\",\"scale.paddingOuter\",\"scale.align\",\"pointish\",\"constant\",\"x\",\"number\",\"identity\",\"normalize\",\"a\",\"b\",\"isNaN\",\"NaN\",\"clamper\",\"t\",\"bimap\",\"interpolate\",\"d0\",\"d1\",\"polymap\",\"j\",\"r\",\"bisect\",\"source\",\"target\",\"clamp\",\"transformer\",\"piecewise\",\"output\",\"input\",\"transform\",\"unit\",\"untransform\",\"invert\",\"scale.invert\",\"y\",\"interpolateNumber\",\"interpolateRound\",\"scale.clamp\",\"scale.interpolate\",\"u\",\"tickFormat\",\"count\",\"specifier\",\"tickStep\",\"precision\",\"formatSpecifier\",\"type\",\"abs\",\"precisionPrefix\",\"formatPrefix\",\"precisionRound\",\"precisionFixed\",\"format\",\"linearish\",\"ticks\",\"scale.ticks\",\"scale.tickFormat\",\"nice\",\"scale.nice\",\"i0\",\"i1\",\"maxIter\",\"tickIncrement\",\"prestep\",\"ceil\",\"linear\",\"identity$1\",\"interval\",\"x0\",\"x1\",\"transformLog\",\"log\",\"transformExp\",\"exp\",\"transformLogn\",\"transformExpn\",\"pow10\",\"isFinite\",\"powp\",\"base\",\"E\",\"pow\",\"logp\",\"log10\",\"log2\",\"reflect\",\"f\",\"loggish\",\"logs\",\"pows\",\"scale.base\",\"v\",\"z\",\"k\",\"p\",\"Infinity\",\"transformSymlog\",\"c\",\"sign\",\"log1p\",\"transformSymexp\",\"expm1\",\"symlogish\",\"scale.constant\",\"symlog\",\"transformPow\",\"exponent\",\"transformSqrt\",\"sqrt\",\"transformSquare\",\"powish\",\"scale.exponent\",\"square\",\"radial\",\"squared\",\"quantile\",\"thresholds\",\"invertExtent\",\"scale.invertExtent\",\"indexOf\",\"sort\",\"ascending\",\"quantiles\",\"scale.quantiles\",\"quantize\",\"scale.thresholds\",\"threshold\",\"date\",\"Date\",\"number$1\",\"calendar\",\"year\",\"month\",\"week\",\"day\",\"hour\",\"minute\",\"second\",\"millisecond\",\"formatMillisecond\",\"formatSecond\",\"formatMinute\",\"formatHour\",\"formatDay\",\"formatWeek\",\"formatMonth\",\"formatYear\",\"tickInterval\",\"bisector\",\"right\",\"tickIntervals\",\"durationYear\",\"every\",\"durationSecond\",\"durationMinute\",\"durationHour\",\"durationDay\",\"durationWeek\",\"durationMonth\",\"t0\",\"t1\",\"transformer$1\",\"k10\",\"scale.interpolator\",\"copy$1\",\"sequential\",\"sequentialLog\",\"sequentialSymlog\",\"sequentialPow\",\"sequentialQuantile\",\"transformer$2\",\"s\",\"k21\",\"r2\",\"x2\",\"t2\",\"diverging\",\"divergingLog\",\"divergingSymlog\",\"divergingPow\",\"Symbol\",\"scaleBand\",\"scaleDiverging\",\"scaleDivergingLog\",\"scaleDivergingPow\",\"scaleDivergingSqrt\",\"divergingSqrt\",\"scaleDivergingSymlog\",\"scaleIdentity\",\"scaleImplicit\",\"scaleLinear\",\"scaleLog\",\"scaleOrdinal\",\"scalePoint\",\"point\",\"scalePow\",\"scaleQuantile\",\"scaleQuantize\",\"scaleRadial\",\"scaleSequential\",\"scaleSequentialLog\",\"scaleSequentialPow\",\"scaleSequentialQuantile\",\"scaleSequentialSqrt\",\"sequentialSqrt\",\"scaleSequentialSymlog\",\"scaleSqrt\",\"scaleSymlog\",\"scaleThreshold\",\"scaleTime\",\"time\",\"timeYear\",\"timeMonth\",\"timeWeek\",\"timeDay\",\"timeHour\",\"timeMinute\",\"timeSecond\",\"timeMillisecond\",\"timeFormat\",\"scaleUtc\",\"utcTime\",\"utcYear\",\"utcMonth\",\"utcWeek\",\"utcDay\",\"utcHour\",\"utcMinute\",\"utcSecond\",\"utcMillisecond\",\"utcFormat\",\"UTC\",\"Object\",\"defineProperty\"]\n}\n"]