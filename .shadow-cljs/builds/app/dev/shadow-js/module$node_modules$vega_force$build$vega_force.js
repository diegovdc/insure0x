["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/vega-force/build/vega-force.js"],"~:js","shadow$provide.module$node_modules$vega_force$build$vega_force=function(global$jscomp$0,require,module,exports$jscomp$0){(function(global,factory){\"object\"===typeof exports$jscomp$0&&\"undefined\"!==typeof module?factory(exports$jscomp$0,require(\"module$node_modules$vega_dataflow$build$vega_dataflow\"),require(\"module$node_modules$vega_util$build$vega_util\"),require(\"module$node_modules$d3_force$dist$d3_force\")):\"function\"===typeof define&&define.amd?define([\"exports\",\"vega-dataflow\",\"vega-util\",\"d3-force\"],\nfactory):(global=\"undefined\"!==typeof globalThis?globalThis:global||self,factory((global.vega=global.vega||{},global.vega.transforms={}),global.vega,global.vega,global.d3))})(this,function(exports,vegaDataflow,vegaUtil,d3Force){function Force(params){vegaDataflow.Transform.call(this,null,params)}function rerun(df,op){return function(){return df.touch(op).run()}}function simulation(nodes,_){nodes=d3Force.forceSimulation(nodes);var stop=nodes.stop,restart=nodes.restart,stopped=!1;nodes.stopped=function(){return stopped};\nnodes.restart=function(){return stopped=!1,restart()};nodes.stop=function(){return stopped=!0,stop()};return setup(nodes,_,!0).on(\"end\",function(){return stopped=!0})}function setup(sim,_$jscomp$0,init,pulse$jscomp$0){var f=vegaUtil.array(_$jscomp$0.forces),n;var i=0;for(n=ForceParams.length;i<n;++i){var p=ForceParams[i];if(\"forces\"!==p&&_$jscomp$0.modified(p))sim[p](_$jscomp$0[p])}i=0;for(n=f.length;i<n;++i){var name=\"forces\"+i;if(init||_$jscomp$0.modified(\"forces\",i)){p=void 0;var _=f[i];vegaUtil.hasOwnProperty(ForceMap,\n_.force)||vegaUtil.error(\"Unrecognized force: \"+_.force);var f$jscomp$0=ForceMap[_.force]();for(p in _)vegaUtil.isFunction(f$jscomp$0[p])&&setForceParam(f$jscomp$0[p],_[p],_);p=f$jscomp$0}else{if(p=pulse$jscomp$0)a:{f$jscomp$0=p=void 0;_=f[i];var pulse=pulse$jscomp$0;for(f$jscomp$0 in _)if(vegaUtil.isFunction(p=_[f$jscomp$0])&&pulse.modified(vegaUtil.accessorFields(p))){p=1;break a}p=0}p=p?sim.force(name):null}p&&sim.force(name,p)}for(n=sim.numForces||0;i<n;++i)sim.force(\"forces\"+i,null);sim.numForces=\nf.length;return sim}function setForceParam(f,v,_){f(vegaUtil.isFunction(v)?function(d){return v(d,_)}:v)}var ForceMap={center:d3Force.forceCenter,collide:d3Force.forceCollide,nbody:d3Force.forceManyBody,link:d3Force.forceLink,x:d3Force.forceX,y:d3Force.forceY},ForceParams=[\"alpha\",\"alphaMin\",\"alphaTarget\",\"velocityDecay\",\"forces\"],ForceConfig=[\"static\",\"iterations\"],ForceOutput=[\"x\",\"y\",\"vx\",\"vy\"];Force.Definition={type:\"Force\",metadata:{modifies:!0},params:[{name:\"static\",type:\"boolean\",\"default\":!1},\n{name:\"restart\",type:\"boolean\",\"default\":!1},{name:\"iterations\",type:\"number\",\"default\":300},{name:\"alpha\",type:\"number\",\"default\":1},{name:\"alphaMin\",type:\"number\",\"default\":.001},{name:\"alphaTarget\",type:\"number\",\"default\":0},{name:\"velocityDecay\",type:\"number\",\"default\":.4},{name:\"forces\",type:\"param\",array:!0,params:[{key:{force:\"center\"},params:[{name:\"x\",type:\"number\",\"default\":0},{name:\"y\",type:\"number\",\"default\":0}]},{key:{force:\"collide\"},params:[{name:\"radius\",type:\"number\",expr:!0},{name:\"strength\",\ntype:\"number\",\"default\":.7},{name:\"iterations\",type:\"number\",\"default\":1}]},{key:{force:\"nbody\"},params:[{name:\"strength\",type:\"number\",\"default\":-30},{name:\"theta\",type:\"number\",\"default\":.9},{name:\"distanceMin\",type:\"number\",\"default\":1},{name:\"distanceMax\",type:\"number\"}]},{key:{force:\"link\"},params:[{name:\"links\",type:\"data\"},{name:\"id\",type:\"field\"},{name:\"distance\",type:\"number\",\"default\":30,expr:!0},{name:\"strength\",type:\"number\",expr:!0},{name:\"iterations\",type:\"number\",\"default\":1}]},{key:{force:\"x\"},\nparams:[{name:\"strength\",type:\"number\",\"default\":.1},{name:\"x\",type:\"field\"}]},{key:{force:\"y\"},params:[{name:\"strength\",type:\"number\",\"default\":.1},{name:\"y\",type:\"field\"}]}]},{name:\"as\",type:\"string\",array:!0,modify:!1,\"default\":ForceOutput}]};vegaUtil.inherits(Force,vegaDataflow.Transform,{transform:function(_,pulse){var sim=this.value,change=pulse.changed(pulse.ADD_REM),params=_.modified(ForceParams),iters=_.iterations||300;sim?(change&&(pulse.modifies(\"index\"),sim.nodes(pulse.source)),(params||\npulse.changed(pulse.MOD))&&setup(sim,_,0,pulse)):(this.value=sim=simulation(pulse.source,_),sim.on(\"tick\",rerun(pulse.dataflow,this)),_.static||(change=!0,sim.tick()),pulse.modifies(\"index\"));if(params||change||_.modified(ForceConfig)||pulse.changed()&&_.restart)if(sim.alpha(Math.max(sim.alpha(),_.alpha||1)).alphaDecay(1-Math.pow(sim.alphaMin(),1/iters)),_.static)for(sim.stop();0<=--iters;)sim.tick();else if(sim.stopped()&&sim.restart(),!change)return pulse.StopPropagation;return this.finish(_,pulse)},\nfinish:function(_,pulse){for(var dataflow=pulse.dataflow,args=this._argops,j=0,m=args.length,arg;j<m;++j)if(arg=args[j],\"forces\"===arg.name&&\"link\"===arg.op._argval.force){arg=arg.op._argops;for(var i=0,n=arg.length,op;i<n;++i)if(\"links\"===arg[i].name&&(op=arg[i].op.source)){dataflow.pulse(op,dataflow.changeset().reflow());break}}return pulse.reflow(_.modified()).modifies(ForceOutput)}});exports.force=Force;Object.defineProperty(exports,\"__esModule\",{value:!0})})}","~:source","shadow$provide[\"module$node_modules$vega_force$build$vega_force\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-util'), require('d3-force')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-util', 'd3-force'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || {}, global.vega.transforms = {}), global.vega, global.vega, global.d3));\n}(this, (function (exports, vegaDataflow, vegaUtil, d3Force) { 'use strict';\n\n  const ForceMap = {\n    center: d3Force.forceCenter,\n    collide: d3Force.forceCollide,\n    nbody: d3Force.forceManyBody,\n    link: d3Force.forceLink,\n    x: d3Force.forceX,\n    y: d3Force.forceY\n  };\n\n  const Forces = 'forces',\n        ForceParams = [\n          'alpha', 'alphaMin', 'alphaTarget',\n          'velocityDecay', 'forces'\n        ],\n        ForceConfig = ['static', 'iterations'],\n        ForceOutput = ['x', 'y', 'vx', 'vy'];\n\n  /**\n   * Force simulation layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<object>} params.forces - The forces to apply.\n   */\n  function Force(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Force.Definition = {\n    'type': 'Force',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'static', 'type': 'boolean', 'default': false },\n      { 'name': 'restart', 'type': 'boolean', 'default': false },\n      { 'name': 'iterations', 'type': 'number', 'default': 300 },\n      { 'name': 'alpha', 'type': 'number', 'default': 1 },\n      { 'name': 'alphaMin', 'type': 'number', 'default': 0.001 },\n      { 'name': 'alphaTarget', 'type': 'number', 'default': 0 },\n      { 'name': 'velocityDecay', 'type': 'number', 'default': 0.4 },\n      { 'name': 'forces', 'type': 'param', 'array': true,\n        'params': [\n          {\n            'key': {'force': 'center'},\n            'params': [\n              { 'name': 'x', 'type': 'number', 'default': 0 },\n              { 'name': 'y', 'type': 'number', 'default': 0 }\n            ]\n          },\n          {\n            'key': {'force': 'collide'},\n            'params': [\n              { 'name': 'radius', 'type': 'number', 'expr': true },\n              { 'name': 'strength', 'type': 'number', 'default': 0.7 },\n              { 'name': 'iterations', 'type': 'number', 'default': 1 }\n            ]\n          },\n          {\n            'key': {'force': 'nbody'},\n            'params': [\n              { 'name': 'strength', 'type': 'number', 'default': -30 },\n              { 'name': 'theta', 'type': 'number', 'default': 0.9 },\n              { 'name': 'distanceMin', 'type': 'number', 'default': 1 },\n              { 'name': 'distanceMax', 'type': 'number' }\n            ]\n          },\n          {\n            'key': {'force': 'link'},\n            'params': [\n              { 'name': 'links', 'type': 'data' },\n              { 'name': 'id', 'type': 'field' },\n              { 'name': 'distance', 'type': 'number', 'default': 30, 'expr': true },\n              { 'name': 'strength', 'type': 'number', 'expr': true },\n              { 'name': 'iterations', 'type': 'number', 'default': 1 }\n            ]\n          },\n          {\n            'key': {'force': 'x'},\n            'params': [\n              { 'name': 'strength', 'type': 'number', 'default': 0.1 },\n              { 'name': 'x', 'type': 'field' }\n            ]\n          },\n          {\n            'key': {'force': 'y'},\n            'params': [\n              { 'name': 'strength', 'type': 'number', 'default': 0.1 },\n              { 'name': 'y', 'type': 'field' }\n            ]\n          }\n        ] },\n      {\n        'name': 'as', 'type': 'string', 'array': true, 'modify': false,\n        'default': ForceOutput\n      }\n    ]\n  };\n\n  vegaUtil.inherits(Force, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      var sim = this.value,\n          change = pulse.changed(pulse.ADD_REM),\n          params = _.modified(ForceParams),\n          iters = _.iterations || 300;\n\n      // configure simulation\n      if (!sim) {\n        this.value = sim = simulation(pulse.source, _);\n        sim.on('tick', rerun(pulse.dataflow, this));\n        if (!_.static) {\n          change = true;\n          sim.tick(); // ensure we run on init\n        }\n        pulse.modifies('index');\n      } else {\n        if (change) {\n          pulse.modifies('index');\n          sim.nodes(pulse.source);\n        }\n        if (params || pulse.changed(pulse.MOD)) {\n          setup(sim, _, 0, pulse);\n        }\n      }\n\n      // run simulation\n      if (params || change || _.modified(ForceConfig)\n          || (pulse.changed() && _.restart))\n      {\n        sim.alpha(Math.max(sim.alpha(), _.alpha || 1))\n          .alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));\n\n        if (_.static) {\n          for (sim.stop(); --iters >= 0;) sim.tick();\n        } else {\n          if (sim.stopped()) sim.restart();\n          if (!change) return pulse.StopPropagation; // defer to sim ticks\n        }\n      }\n\n      return this.finish(_, pulse);\n    },\n\n    finish(_, pulse) {\n      const dataflow = pulse.dataflow;\n\n      // inspect dependencies, touch link source data\n      for (let args=this._argops, j=0, m=args.length, arg; j<m; ++j) {\n        arg = args[j];\n        if (arg.name !== Forces || arg.op._argval.force !== 'link') {\n          continue;\n        }\n        for (var ops=arg.op._argops, i=0, n=ops.length, op; i<n; ++i) {\n          if (ops[i].name === 'links' && (op = ops[i].op.source)) {\n            dataflow.pulse(op, dataflow.changeset().reflow());\n            break;\n          }\n        }\n      }\n\n      // reflow all nodes\n      return pulse.reflow(_.modified()).modifies(ForceOutput);\n    }\n  });\n\n  function rerun(df, op) {\n    return () => df.touch(op).run();\n  }\n\n  function simulation(nodes, _) {\n    const sim = d3Force.forceSimulation(nodes),\n          stop = sim.stop,\n          restart = sim.restart;\n    let stopped = false;\n\n    sim.stopped = () => stopped;\n    sim.restart = () => (stopped = false, restart());\n    sim.stop = () => (stopped = true, stop());\n\n    return setup(sim, _, true).on('end', () => stopped = true);\n  }\n\n  function setup(sim, _, init, pulse) {\n    var f = vegaUtil.array(_.forces), i, n, p, name;\n\n    for (i=0, n=ForceParams.length; i<n; ++i) {\n      p = ForceParams[i];\n      if (p !== Forces && _.modified(p)) sim[p](_[p]);\n    }\n\n    for (i=0, n=f.length; i<n; ++i) {\n      name = Forces + i;\n      p = init || _.modified(Forces, i) ? getForce(f[i])\n        : pulse && modified(f[i], pulse) ? sim.force(name)\n        : null;\n      if (p) sim.force(name, p);\n    }\n\n    for (n=(sim.numForces || 0); i<n; ++i) {\n      sim.force(Forces + i, null); // remove\n    }\n\n    sim.numForces = f.length;\n    return sim;\n  }\n\n  function modified(f, pulse) {\n    var k, v;\n    for (k in f) {\n      if (vegaUtil.isFunction(v = f[k]) && pulse.modified(vegaUtil.accessorFields(v)))\n        return 1;\n    }\n    return 0;\n  }\n\n  function getForce(_) {\n    var f, p;\n\n    if (!vegaUtil.hasOwnProperty(ForceMap, _.force)) {\n      vegaUtil.error('Unrecognized force: ' + _.force);\n    }\n    f = ForceMap[_.force]();\n\n    for (p in _) {\n      if (vegaUtil.isFunction(f[p])) setForceParam(f[p], _[p], _);\n    }\n\n    return f;\n  }\n\n  function setForceParam(f, v, _) {\n    f(vegaUtil.isFunction(v) ? d => v(d, _) : v);\n  }\n\n  exports.force = Force;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$vega_dataflow$build$vega_dataflow","~$shadow.js","~$module$node_modules$d3_force$dist$d3_force","~$module$node_modules$vega_util$build$vega_util"]],"~:properties",["^5",["stop","nbody","x","__esModule","force","numForces","transform","vega","value","center","finish","stopped","link","restart","y","Definition","transforms","collide"]],"~:compiled-at",1600144479979,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$vega_force$build$vega_force.js\",\n\"lineCount\":10,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/vega-force/build/vega-force.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$vega_force$build$vega_force\\\"] = function(global,require,module,exports) {\\n(function (global, factory) {\\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-util'), require('d3-force')) :\\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-util', 'd3-force'], factory) :\\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || {}, global.vega.transforms = {}), global.vega, global.vega, global.d3));\\n}(this, (function (exports, vegaDataflow, vegaUtil, d3Force) { 'use strict';\\n\\n  const ForceMap = {\\n    center: d3Force.forceCenter,\\n    collide: d3Force.forceCollide,\\n    nbody: d3Force.forceManyBody,\\n    link: d3Force.forceLink,\\n    x: d3Force.forceX,\\n    y: d3Force.forceY\\n  };\\n\\n  const Forces = 'forces',\\n        ForceParams = [\\n          'alpha', 'alphaMin', 'alphaTarget',\\n          'velocityDecay', 'forces'\\n        ],\\n        ForceConfig = ['static', 'iterations'],\\n        ForceOutput = ['x', 'y', 'vx', 'vy'];\\n\\n  /**\\n   * Force simulation layout.\\n   * @constructor\\n   * @param {object} params - The parameters for this operator.\\n   * @param {Array<object>} params.forces - The forces to apply.\\n   */\\n  function Force(params) {\\n    vegaDataflow.Transform.call(this, null, params);\\n  }\\n\\n  Force.Definition = {\\n    'type': 'Force',\\n    'metadata': {'modifies': true},\\n    'params': [\\n      { 'name': 'static', 'type': 'boolean', 'default': false },\\n      { 'name': 'restart', 'type': 'boolean', 'default': false },\\n      { 'name': 'iterations', 'type': 'number', 'default': 300 },\\n      { 'name': 'alpha', 'type': 'number', 'default': 1 },\\n      { 'name': 'alphaMin', 'type': 'number', 'default': 0.001 },\\n      { 'name': 'alphaTarget', 'type': 'number', 'default': 0 },\\n      { 'name': 'velocityDecay', 'type': 'number', 'default': 0.4 },\\n      { 'name': 'forces', 'type': 'param', 'array': true,\\n        'params': [\\n          {\\n            'key': {'force': 'center'},\\n            'params': [\\n              { 'name': 'x', 'type': 'number', 'default': 0 },\\n              { 'name': 'y', 'type': 'number', 'default': 0 }\\n            ]\\n          },\\n          {\\n            'key': {'force': 'collide'},\\n            'params': [\\n              { 'name': 'radius', 'type': 'number', 'expr': true },\\n              { 'name': 'strength', 'type': 'number', 'default': 0.7 },\\n              { 'name': 'iterations', 'type': 'number', 'default': 1 }\\n            ]\\n          },\\n          {\\n            'key': {'force': 'nbody'},\\n            'params': [\\n              { 'name': 'strength', 'type': 'number', 'default': -30 },\\n              { 'name': 'theta', 'type': 'number', 'default': 0.9 },\\n              { 'name': 'distanceMin', 'type': 'number', 'default': 1 },\\n              { 'name': 'distanceMax', 'type': 'number' }\\n            ]\\n          },\\n          {\\n            'key': {'force': 'link'},\\n            'params': [\\n              { 'name': 'links', 'type': 'data' },\\n              { 'name': 'id', 'type': 'field' },\\n              { 'name': 'distance', 'type': 'number', 'default': 30, 'expr': true },\\n              { 'name': 'strength', 'type': 'number', 'expr': true },\\n              { 'name': 'iterations', 'type': 'number', 'default': 1 }\\n            ]\\n          },\\n          {\\n            'key': {'force': 'x'},\\n            'params': [\\n              { 'name': 'strength', 'type': 'number', 'default': 0.1 },\\n              { 'name': 'x', 'type': 'field' }\\n            ]\\n          },\\n          {\\n            'key': {'force': 'y'},\\n            'params': [\\n              { 'name': 'strength', 'type': 'number', 'default': 0.1 },\\n              { 'name': 'y', 'type': 'field' }\\n            ]\\n          }\\n        ] },\\n      {\\n        'name': 'as', 'type': 'string', 'array': true, 'modify': false,\\n        'default': ForceOutput\\n      }\\n    ]\\n  };\\n\\n  vegaUtil.inherits(Force, vegaDataflow.Transform, {\\n    transform(_, pulse) {\\n      var sim = this.value,\\n          change = pulse.changed(pulse.ADD_REM),\\n          params = _.modified(ForceParams),\\n          iters = _.iterations || 300;\\n\\n      // configure simulation\\n      if (!sim) {\\n        this.value = sim = simulation(pulse.source, _);\\n        sim.on('tick', rerun(pulse.dataflow, this));\\n        if (!_.static) {\\n          change = true;\\n          sim.tick(); // ensure we run on init\\n        }\\n        pulse.modifies('index');\\n      } else {\\n        if (change) {\\n          pulse.modifies('index');\\n          sim.nodes(pulse.source);\\n        }\\n        if (params || pulse.changed(pulse.MOD)) {\\n          setup(sim, _, 0, pulse);\\n        }\\n      }\\n\\n      // run simulation\\n      if (params || change || _.modified(ForceConfig)\\n          || (pulse.changed() && _.restart))\\n      {\\n        sim.alpha(Math.max(sim.alpha(), _.alpha || 1))\\n          .alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));\\n\\n        if (_.static) {\\n          for (sim.stop(); --iters >= 0;) sim.tick();\\n        } else {\\n          if (sim.stopped()) sim.restart();\\n          if (!change) return pulse.StopPropagation; // defer to sim ticks\\n        }\\n      }\\n\\n      return this.finish(_, pulse);\\n    },\\n\\n    finish(_, pulse) {\\n      const dataflow = pulse.dataflow;\\n\\n      // inspect dependencies, touch link source data\\n      for (let args=this._argops, j=0, m=args.length, arg; j<m; ++j) {\\n        arg = args[j];\\n        if (arg.name !== Forces || arg.op._argval.force !== 'link') {\\n          continue;\\n        }\\n        for (var ops=arg.op._argops, i=0, n=ops.length, op; i<n; ++i) {\\n          if (ops[i].name === 'links' && (op = ops[i].op.source)) {\\n            dataflow.pulse(op, dataflow.changeset().reflow());\\n            break;\\n          }\\n        }\\n      }\\n\\n      // reflow all nodes\\n      return pulse.reflow(_.modified()).modifies(ForceOutput);\\n    }\\n  });\\n\\n  function rerun(df, op) {\\n    return () => df.touch(op).run();\\n  }\\n\\n  function simulation(nodes, _) {\\n    const sim = d3Force.forceSimulation(nodes),\\n          stop = sim.stop,\\n          restart = sim.restart;\\n    let stopped = false;\\n\\n    sim.stopped = () => stopped;\\n    sim.restart = () => (stopped = false, restart());\\n    sim.stop = () => (stopped = true, stop());\\n\\n    return setup(sim, _, true).on('end', () => stopped = true);\\n  }\\n\\n  function setup(sim, _, init, pulse) {\\n    var f = vegaUtil.array(_.forces), i, n, p, name;\\n\\n    for (i=0, n=ForceParams.length; i<n; ++i) {\\n      p = ForceParams[i];\\n      if (p !== Forces && _.modified(p)) sim[p](_[p]);\\n    }\\n\\n    for (i=0, n=f.length; i<n; ++i) {\\n      name = Forces + i;\\n      p = init || _.modified(Forces, i) ? getForce(f[i])\\n        : pulse && modified(f[i], pulse) ? sim.force(name)\\n        : null;\\n      if (p) sim.force(name, p);\\n    }\\n\\n    for (n=(sim.numForces || 0); i<n; ++i) {\\n      sim.force(Forces + i, null); // remove\\n    }\\n\\n    sim.numForces = f.length;\\n    return sim;\\n  }\\n\\n  function modified(f, pulse) {\\n    var k, v;\\n    for (k in f) {\\n      if (vegaUtil.isFunction(v = f[k]) && pulse.modified(vegaUtil.accessorFields(v)))\\n        return 1;\\n    }\\n    return 0;\\n  }\\n\\n  function getForce(_) {\\n    var f, p;\\n\\n    if (!vegaUtil.hasOwnProperty(ForceMap, _.force)) {\\n      vegaUtil.error('Unrecognized force: ' + _.force);\\n    }\\n    f = ForceMap[_.force]();\\n\\n    for (p in _) {\\n      if (vegaUtil.isFunction(f[p])) setForceParam(f[p], _[p], _);\\n    }\\n\\n    return f;\\n  }\\n\\n  function setForceParam(f, v, _) {\\n    f(vegaUtil.isFunction(v) ? d => v(d, _) : v);\\n  }\\n\\n  exports.force = Force;\\n\\n  Object.defineProperty(exports, '__esModule', { value: true });\\n\\n})));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"globalThis\",\"self\",\"vega\",\"transforms\",\"d3\",\"vegaDataflow\",\"vegaUtil\",\"d3Force\",\"Force\",\"params\",\"Transform\",\"call\",\"rerun\",\"df\",\"op\",\"touch\",\"run\",\"simulation\",\"nodes\",\"_\",\"sim\",\"forceSimulation\",\"stop\",\"restart\",\"stopped\",\"sim.stopped\",\"sim.restart\",\"sim.stop\",\"setup\",\"on\",\"init\",\"pulse\",\"f\",\"array\",\"forces\",\"n\",\"i\",\"ForceParams\",\"length\",\"p\",\"Forces\",\"modified\",\"name\",\"hasOwnProperty\",\"ForceMap\",\"force\",\"error\",\"isFunction\",\"setForceParam\",\"k\",\"v\",\"accessorFields\",\"numForces\",\"d\",\"center\",\"forceCenter\",\"collide\",\"forceCollide\",\"nbody\",\"forceManyBody\",\"link\",\"forceLink\",\"x\",\"forceX\",\"y\",\"forceY\",\"ForceConfig\",\"ForceOutput\",\"Definition\",\"inherits\",\"transform\",\"value\",\"change\",\"changed\",\"ADD_REM\",\"iters\",\"iterations\",\"modifies\",\"source\",\"MOD\",\"dataflow\",\"static\",\"tick\",\"alpha\",\"Math\",\"max\",\"alphaDecay\",\"pow\",\"alphaMin\",\"StopPropagation\",\"finish\",\"args\",\"_argops\",\"j\",\"m\",\"arg\",\"_argval\",\"ops\",\"changeset\",\"reflow\",\"Object\",\"defineProperty\"]\n}\n"]