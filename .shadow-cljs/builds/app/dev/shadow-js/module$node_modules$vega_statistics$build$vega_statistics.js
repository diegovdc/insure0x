["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/vega-statistics/build/vega-statistics.js"],"~:js","shadow$provide.module$node_modules$vega_statistics$build$vega_statistics=function(global$jscomp$0,require,module,exports$jscomp$0){(function(global,factory){\"object\"===typeof exports$jscomp$0&&\"undefined\"!==typeof module?factory(exports$jscomp$0,require(\"module$node_modules$d3_array$dist$d3_array\")):\"function\"===typeof define&&define.amd?define([\"exports\",\"d3-array\"],factory):(global=\"undefined\"!==typeof globalThis?globalThis:global||self,factory(global.vega={},global.d3))})(this,function(exports,\nd3Array){function numbers(values,valueof){var index,$jscomp$iter$85,$jscomp$key$value,value$315,$jscomp$iter$84,value;return $jscomp.generator.createGenerator(numbers,function($jscomp$generator$context){switch($jscomp$generator$context.nextAddress){case 1:if(null==valueof){$jscomp$generator$context.jumpTo(2);break}index=-1;$jscomp$iter$85=$jscomp.makeIterator(values);$jscomp$key$value=$jscomp$iter$85.next();case 4:if($jscomp$key$value.done){$jscomp$generator$context.jumpTo(0);break}value$315=$jscomp$key$value.value;\nvalue$315=valueof(value$315,++index,values);if(!(null!=value$315&&\"\"!==value$315&&(value$315=+value$315)>=value$315)){$jscomp$generator$context.jumpTo(5);break}return $jscomp$generator$context.yield(value$315,5);case 5:$jscomp$key$value=$jscomp$iter$85.next();$jscomp$generator$context.jumpTo(4);break;case 2:$jscomp$iter$84=$jscomp.makeIterator(values),$jscomp$key$value=$jscomp$iter$84.next();case 9:if($jscomp$key$value.done){$jscomp$generator$context.jumpTo(0);break}value=$jscomp$key$value.value;\nif(!(null!=value&&\"\"!==value&&(value=+value)>=value)){$jscomp$generator$context.jumpTo(10);break}return $jscomp$generator$context.yield(value,10);case 10:$jscomp$key$value=$jscomp$iter$84.next(),$jscomp$generator$context.jumpTo(9)}})}function quantiles(array,p,f){var values=Float64Array.from(numbers(array,f));values.sort(d3Array.ascending);return p.map(function(_){return d3Array.quantileSorted(values,_)})}function quartiles(array,f){return quantiles(array,[.25,.5,.75],f)}function estimateBandwidth(array,\nf){var n=array.length,d=d3Array.deviation(array,f);array=quartiles(array,f);return 1.06*(Math.min(d,(array[2]-array[0])/1.34)||d||Math.abs(array[0])||1)*Math.pow(n,-.2)}function smoothing(v,thresh){for(var n=v.length,a=0,b=1,c,d;v[a]===v[b];)++b;for(;b<n;){for(c=b+1;v[b]===v[c];)++c;if(v[b]-v[b-1]<thresh){for(d=b+(a+c-b-b>>1);d<b;)v[d++]=v[b];for(;d>b;)v[d--]=v[a]}a=b;b=c}return v}function sampleNormal(mean,stdev){mean=mean||0;stdev=null==stdev?1:stdev;if(nextSample===nextSample){var x=nextSample;\nnextSample=NaN}else{do{x=2*exports.random()-1;var y=2*exports.random()-1;var rds=x*x+y*y}while(0===rds||1<rds);rds=Math.sqrt(-2*Math.log(rds)/rds);x*=rds;nextSample=y*rds}return mean+x*stdev}function densityNormal(value,mean,stdev){stdev=null==stdev?1:stdev;value=(value-(mean||0))/stdev;return Math.exp(-.5*value*value)/(stdev*SQRT2PI)}function cumulativeNormal(value,mean,stdev){value=(value-(mean||0))/(null==stdev?1:stdev);mean=Math.abs(value);37<mean?mean=0:(stdev=Math.exp(-mean*mean/2),mean=7.07106781186547>\nmean?stdev*((((((.0352624965998911*mean+.700383064443688)*mean+6.37396220353165)*mean+33.912866078383)*mean+112.079291497871)*mean+221.213596169931)*mean+220.206867912376)/(((((((.0883883476483184*mean+1.75566716318264)*mean+16.064177579207)*mean+86.7807322029461)*mean+296.564248779674)*mean+637.333633378831)*mean+793.826512519948)*mean+440.413735824752):stdev/(mean+1/(mean+2/(mean+3/(mean+4/(mean+.65)))))/2.506628274631);return 0<value?1-mean:mean}function quantileNormal(p,mean,stdev){if(0>p||1<\np)return NaN;p=2*p-1;var w=-Math.log((1-p)*(1+p));6.25>w?(w-=3.125,w=1.6536545626831027+(.24015818242558962+(-.006033670871430149+(-7.40702534166267E-4+(1.8673420803405714E-4+(-1.3882523362786469E-5+(-1.3654692000834679E-6+(4.2347877827932404E-7+(-2.9070369957882005E-8+(-4.112633980346984E-9+(1.0512122733215323E-9+(-5.415412054294628E-11+(-1.2975133253453532E-11+(2.6335093153082323E-12+(-8.151934197605472E-14+(-4.054566272975207E-14+(6.637638134358324E-15+(2.0972767875968562E-17+(-1.333171662854621E-16+\n(1.1157877678025181E-17+(1.28584807152564E-18+(-1.6850591381820166E-19+-3.64441206401782E-21*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w):16>w?(w=Math.sqrt(w)-3.25,w=3.0838856104922208+(1.0052589676941592+(.005370914553590064+(-.003751208507569241+(.002491442096107851+(-.0016882755560235047+(9.532893797373805E-4+(-3.550375203628475E-4+(2.4031110387097894E-5+(6.828485145957318E-5+(-4.7318229009055734E-5+(1.2475304481671779E-5+(2.9234449089955446E-6+(-4.013867526981546E-6+(1.5027403968909828E-6+\n(1.8239629214389228E-8+(-2.7517406297064545E-7+(9.075656193888539E-8+2.2137376921775787E-9*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w):Number.isFinite(w)?(w=Math.sqrt(w)-5,w=4.849906401408584+(1.0103004648645344+(-1.3871931833623122E-4+(-2.1503011930044477E-4+(7.599527703001776E-5+(-1.968177810553167E-5+(4.526062597223154E-6+(-9.9298272942317E-7+(2.2900482228026655E-7+(-6.771199775845234E-8+(2.914795345090108E-8+(-1.496002662714924E-8+(7.61570120807834E-9+(-3.789465440126737E-9+(1.5076572693500548E-9+\n(-2.555641816996525E-10+-2.7109920616438573E-11*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w)*w):w=Infinity;return(mean||0)+(null==stdev?1:stdev)*SQRT2*w*p}function gaussian(mean,stdev){var mu,sigma,dist={mean:function(_){return arguments.length?(mu=_||0,dist):mu},stdev:function(_){return arguments.length?(sigma=null==_?1:_,dist):sigma},sample:function(){return sampleNormal(mu,sigma)},pdf:function(value){return densityNormal(value,mu,sigma)},cdf:function(value){return cumulativeNormal(value,mu,sigma)},\nicdf:function(p){return quantileNormal(p,mu,sigma)}};return dist.mean(mean).stdev(stdev)}function sampleLogNormal(mean,stdev){stdev=null==stdev?1:stdev;return Math.exp((mean||0)+sampleNormal()*stdev)}function densityLogNormal(value,mean,stdev){if(0>=value)return 0;stdev=null==stdev?1:stdev;mean=(Math.log(value)-(mean||0))/stdev;return Math.exp(-.5*mean*mean)/(stdev*SQRT2PI*value)}function cumulativeLogNormal(value,mean,stdev){return cumulativeNormal(Math.log(value),mean,stdev)}function quantileLogNormal(p,\nmean,stdev){return Math.exp(quantileNormal(p,mean,stdev))}function sampleUniform(min,max){null==max&&(max=null==min?1:min,min=0);return min+(max-min)*exports.random()}function densityUniform(value,min,max){null==max&&(max=null==min?1:min,min=0);return value>=min&&value<=max?1/(max-min):0}function cumulativeUniform(value,min,max){null==max&&(max=null==min?1:min,min=0);return value<min?0:value>max?1:(value-min)/(max-min)}function quantileUniform(p,min,max){null==max&&(max=null==min?1:min,min=0);return 0<=\np&&1>=p?min+p*(max-min):NaN}function ols(uX,uY,uXY,uX2){uX2-=uX*uX;uXY=1E-24>Math.abs(uX2)?0:(uXY-uX*uY)/uX2;return[uY-uXY*uX,uXY]}function points(data,x,y,sort){data=data.filter(function(d){var u=x(d);d=y(d);return null!=u&&(u=+u)>=u&&null!=d&&(d=+d)>=d});sort&&data.sort(function(a,b){return x(a)-x(b)});sort=data.length;var X=new Float64Array(sort),Y=new Float64Array(sort),i=0,ux=0,uy=0,xv;data=$jscomp.makeIterator(data);for(xv=data.next();!xv.done;xv=data.next()){var yv=xv.value;X[i]=xv=+x(yv);\nY[i]=yv=+y(yv);++i;ux+=(xv-ux)/i;uy+=(yv-uy)/i}for(i=0;i<sort;++i)X[i]-=ux,Y[i]-=uy;return[X,Y,ux,uy]}function visitPoints(data,x,y,callback){var i=-1,u;data=$jscomp.makeIterator(data);for(u=data.next();!u.done;u=data.next()){var v=u.value;u=x(v);v=y(v);null!=u&&(u=+u)>=u&&null!=v&&(v=+v)>=v&&callback(u,v,++i)}}function rSquared(data,x,y,uY,predict){var SSE=0,SST=0;visitPoints(data,x,y,function(dx,dy){dx=dy-predict(dx);dy-=uY;SSE+=dx*dx;SST+=dy*dy});return 1-SSE/SST}function linear(data,x$jscomp$0,\ny){var X=0,Y=0,XY=0,X2=0,n=0;visitPoints(data,x$jscomp$0,y,function(dx,dy){++n;X+=(dx-X)/n;Y+=(dy-Y)/n;XY+=(dx*dy-XY)/n;X2+=(dx*dx-X2)/n});var coef=ols(X,Y,XY,X2),predict=function(x){return coef[0]+coef[1]*x};return{coef:coef,predict:predict,rSquared:rSquared(data,x$jscomp$0,y,Y,predict)}}function quad(data,x$jscomp$0,y){var $jscomp$destructuring$var4=$jscomp.makeIterator(points(data,x$jscomp$0,y)),xv=$jscomp$destructuring$var4.next().value,yv=$jscomp$destructuring$var4.next().value,ux=$jscomp$destructuring$var4.next().value,\nuy=$jscomp$destructuring$var4.next().value,n=xv.length,X3=$jscomp$destructuring$var4=0,X4=0,XY=0,X2Y=0,i;for(i=0;i<n;){var dx=xv[i];var dy=yv[i++];var x2=dx*dx;$jscomp$destructuring$var4+=(x2-$jscomp$destructuring$var4)/i;X3+=(x2*dx-X3)/i;X4+=(x2*x2-X4)/i;XY+=(dx*dy-XY)/i;X2Y+=(x2*dy-X2Y)/i}xv=X4-$jscomp$destructuring$var4*$jscomp$destructuring$var4;yv=$jscomp$destructuring$var4*xv-X3*X3;var a=(X2Y*$jscomp$destructuring$var4-XY*X3)/yv,b=(XY*xv-X2Y*X3)/yv,c=-a*$jscomp$destructuring$var4;$jscomp$destructuring$var4=\nfunction(x){x-=ux;return a*x*x+b*x+c+uy};return{coef:[c-b*ux+a*ux*ux+uy,b-2*a*ux,a],predict:$jscomp$destructuring$var4,rSquared:rSquared(data,x$jscomp$0,y,uy,$jscomp$destructuring$var4)}}function uncenter(k,a,x,y){var z=Array(k),i;for(i=0;i<k;++i)z[i]=0;for(i=k-1;0<=i;--i){var v=a[i];var c=1;z[i]+=v;for(k=1;k<=i;++k)c*=(i+1-k)/k,z[i-k]+=v*Math.pow(x,k)*c}z[0]+=y;return z}function gaussianElimination(matrix){var n=matrix.length-1,coef=[],i,j,k;for(i=0;i<n;++i){var r=i;for(j=i+1;j<n;++j)Math.abs(matrix[i][j])>\nMath.abs(matrix[i][r])&&(r=j);for(k=i;k<n+1;++k){var t=matrix[k][i];matrix[k][i]=matrix[k][r];matrix[k][r]=t}for(j=i+1;j<n;++j)for(k=n;k>=i;k--)matrix[k][j]-=matrix[k][i]*matrix[i][j]/matrix[i][i]}for(j=n-1;0<=j;--j){t=0;for(k=j+1;k<n;++k)t+=matrix[k][j]*coef[k];coef[j]=(matrix[n][j]-t)/matrix[j][j]}return coef}exports.random=Math.random;var SQRT2PI=Math.sqrt(2*Math.PI),SQRT2=Math.SQRT2,nextSample=NaN,MIN_RADIANS=.1*Math.PI/180;exports.bandwidthNRD=estimateBandwidth;exports.bin=function(_){var maxb=\n_.maxbins||20,base=_.base||10,logb=Math.log(base),div=_.divide||[5,2],min=_.extent[0],max=_.extent[1],n,span=_.span||max-min||Math.abs(min)||1;if(_.step)var step=_.step;else if(_.steps){var v=span/maxb;var i=0;for(n=_.steps.length;i<n&&_.steps[i]<v;++i);step=_.steps[Math.max(0,i-1)]}else{step=Math.ceil(Math.log(maxb)/logb);var minstep=_.minstep||0;for(step=Math.max(minstep,Math.pow(base,Math.round(Math.log(span)/logb)-step));Math.ceil(span/step)>maxb;)step*=base;i=0;for(n=div.length;i<n;++i)v=step/\ndiv[i],v>=minstep&&span/v<=maxb&&(step=v)}v=Math.log(step);maxb=Math.pow(base,-(0<=v?0:~~(-v/logb)+1)-1);if(_.nice||void 0===_.nice)v=Math.floor(min/step+maxb)*step,min=min<v?v-step:v,max=Math.ceil(max/step)*step;return{start:min,stop:max===min?min+step:max,step:step}};exports.bootstrapCI=function(array,samples,alpha,f){if(!array.length)return[void 0,void 0];array=Float64Array.from(numbers(array,f));f=array.length;var a,i,mu;var j=0;for(mu=Array(samples);j<samples;++j){for(i=a=0;i<f;++i)a+=array[~~(exports.random()*\nf)];mu[j]=a/f}mu.sort(d3Array.ascending);return[d3Array.quantile(mu,alpha/2),d3Array.quantile(mu,1-alpha/2)]};exports.cumulativeLogNormal=cumulativeLogNormal;exports.cumulativeNormal=cumulativeNormal;exports.cumulativeUniform=cumulativeUniform;exports.densityLogNormal=densityLogNormal;exports.densityNormal=densityNormal;exports.densityUniform=densityUniform;exports.dotbin=function(array,step,smooth,f){f=f||function(_){return _};for(var n=array.length,v=new Float64Array(n),i=0,j=1,a=f(array[0]),b=\na,w=a+step,x;j<n;++j){x=f(array[j]);if(x>=w){for(b=(a+b)/2;i<j;++i)v[i]=b;w=x+step;a=x}b=x}for(b=(a+b)/2;i<j;++i)v[i]=b;return smooth?smoothing(v,step+step/4):v};exports.quantileLogNormal=quantileLogNormal;exports.quantileNormal=quantileNormal;exports.quantileUniform=quantileUniform;exports.quantiles=quantiles;exports.quartiles=quartiles;exports.randomInteger=function(min,max){null==max&&(max=min,min=0);var a,b,d,dist={min:function(_){return arguments.length?(a=_||0,d=b-a,dist):a},max:function(_){return arguments.length?\n(b=_||0,d=b-a,dist):b},sample:function(){return a+Math.floor(d*exports.random())},pdf:function(x){return x===Math.floor(x)&&x>=a&&x<b?1/d:0},cdf:function(x){x=Math.floor(x);return x<a?0:x>=b?1:(x-a+1)/d},icdf:function(p){return 0<=p&&1>=p?a-1+Math.floor(p*d):NaN}};return dist.min(min).max(max)};exports.randomKDE=function(support,bandwidth){var kernel=gaussian(),n=0,dist={data:function(_){return arguments.length?(n=(support=_)?_.length:0,dist.bandwidth(bandwidth)):support},bandwidth:function(_){if(!arguments.length)return bandwidth;\nbandwidth=_;!bandwidth&&support&&(bandwidth=estimateBandwidth(support));return dist},sample:function(){return support[~~(exports.random()*n)]+bandwidth*kernel.sample()},pdf:function(x){for(var y=0,i=0;i<n;++i)y+=kernel.pdf((x-support[i])/bandwidth);return y/bandwidth/n},cdf:function(x){for(var y=0,i=0;i<n;++i)y+=kernel.cdf((x-support[i])/bandwidth);return y/n},icdf:function(){throw Error(\"KDE icdf not supported.\");}};return dist.data(support)};exports.randomLCG=function(seed){return function(){seed=\n(1103515245*seed+12345)%2147483647;return seed/2147483647}};exports.randomLogNormal=function(mean,stdev){var mu,sigma,dist={mean:function(_){return arguments.length?(mu=_||0,dist):mu},stdev:function(_){return arguments.length?(sigma=null==_?1:_,dist):sigma},sample:function(){return sampleLogNormal(mu,sigma)},pdf:function(value){return densityLogNormal(value,mu,sigma)},cdf:function(value){return cumulativeLogNormal(value,mu,sigma)},icdf:function(p){return quantileLogNormal(p,mu,sigma)}};return dist.mean(mean).stdev(stdev)};\nexports.randomMixture=function(dists,weights){var m=0,w$jscomp$0,dist={weights:function(_){if(arguments.length){var x=weights=_||[],w=[],sum=0,i;for(i=0;i<m;++i)sum+=w[i]=null==x[i]?1:+x[i];for(i=0;i<m;++i)w[i]/=sum;w$jscomp$0=w;return dist}return weights},distributions:function(_){return arguments.length?(_?(m=_.length,dists=_):(m=0,dists=[]),dist.weights(weights)):dists},sample:function(){for(var r=exports.random(),d=dists[m-1],v=w$jscomp$0[0],i=0;i<m-1;v+=w$jscomp$0[++i])if(r<v){d=dists[i];break}return d.sample()},\npdf:function(x){for(var p=0,i=0;i<m;++i)p+=w$jscomp$0[i]*dists[i].pdf(x);return p},cdf:function(x){for(var p=0,i=0;i<m;++i)p+=w$jscomp$0[i]*dists[i].cdf(x);return p},icdf:function(){throw Error(\"Mixture icdf not supported.\");}};return dist.distributions(dists).weights(weights)};exports.randomNormal=gaussian;exports.randomUniform=function(min,max){var a,b,dist={min:function(_){return arguments.length?(a=_||0,dist):a},max:function(_){return arguments.length?(b=null==_?1:_,dist):b},sample:function(){return sampleUniform(a,\nb)},pdf:function(value){return densityUniform(value,a,b)},cdf:function(value){return cumulativeUniform(value,a,b)},icdf:function(p){return quantileUniform(p,a,b)}};null==max&&(max=null==min?1:min,min=0);return dist.min(min).max(max)};exports.regressionExp=function(data,x$jscomp$0,y){var $jscomp$destructuring$var2=$jscomp.makeIterator(points(data,x$jscomp$0,y)),xv=$jscomp$destructuring$var2.next().value;$jscomp$destructuring$var2.next();var ux=$jscomp$destructuring$var2.next().value;$jscomp$destructuring$var2=\n$jscomp$destructuring$var2.next().value;var YL=0,XY=0,XYL=0,X2Y=0,n=0,dx,ly,xy;visitPoints(data,x$jscomp$0,y,function(_,dy){dx=xv[n++];ly=Math.log(dy);xy=dx*dy;YL+=(dy*ly-YL)/n;XY+=(xy-XY)/n;XYL+=(xy*ly-XYL)/n;X2Y+=(dx*xy-X2Y)/n});var $jscomp$destructuring$var3=$jscomp.makeIterator(ols(XY/$jscomp$destructuring$var2,YL/$jscomp$destructuring$var2,XYL/$jscomp$destructuring$var2,X2Y/$jscomp$destructuring$var2)),c0=$jscomp$destructuring$var3.next().value,c1=$jscomp$destructuring$var3.next().value;$jscomp$destructuring$var3=\nfunction(x){return Math.exp(c0+c1*(x-ux))};return{coef:[Math.exp(c0-c1*ux),c1],predict:$jscomp$destructuring$var3,rSquared:rSquared(data,x$jscomp$0,y,$jscomp$destructuring$var2,$jscomp$destructuring$var3)}};exports.regressionLinear=linear;exports.regressionLoess=function(data,x$jscomp$0,y,bandwidth){y=$jscomp.makeIterator(points(data,x$jscomp$0,y,!0));data=y.next().value;var yv=y.next().value;x$jscomp$0=y.next().value;y=y.next().value;var n=data.length,bw=Math.max(2,~~(bandwidth*n));bandwidth=new Float64Array(n);\nfor(var residuals=new Float64Array(n),robustWeights=(new Float64Array(n)).fill(1),iter=-1;2>=++iter;){for(var interval=[0,bw-1],i=0;i<n;++i){for(var dx=data[i],i0=interval[0],i1=interval[1],W=0,X=0,Y=0,XY=0,X2=0,denom=1/Math.abs(data[dx-data[i0]>data[i1]-dx?i0:i1]-dx||1);i0<=i1;++i0){var xk=data[i0],yk=yv[i0],x=Math.abs(dx-xk)*denom,w=(x=1-x*x*x)*x*x*robustWeights[i0];x=xk*w;W+=w;X+=x;Y+=yk*w;XY+=yk*x;X2+=xk*x}W=$jscomp.makeIterator(ols(X/W,Y/W,XY/W,X2/W));i1=W.next().value;W=W.next().value;bandwidth[i]=\ni1+W*dx;residuals[i]=Math.abs(yv[i]-bandwidth[i]);dx=i+1;i1=data[dx];W=interval[0];X=interval[1]+1;if(!(X>=data.length))for(;dx>W&&data[X]-i1<=i1-data[W];)interval[0]=++W,interval[1]=X,++X}if(2===iter)break;interval=d3Array.median(residuals);if(1E-12>Math.abs(interval))break;i=0;for(i1=void 0;i<n;++i)dx=residuals[i]/(6*interval),robustWeights[i]=1<=dx?1E-12:(i1=1-dx*dx)*i1}yv=data.length;n=[];residuals=bw=0;for(robustWeights=[];bw<yv;++bw)iter=data[bw]+x$jscomp$0,robustWeights[0]===iter?robustWeights[1]+=\n(bandwidth[bw]-robustWeights[1])/++residuals:(residuals=0,robustWeights[1]+=y,robustWeights=[iter,bandwidth[bw]],n.push(robustWeights));robustWeights[1]+=y;return n};exports.regressionLog=function(data,x$jscomp$0,y){var X=0,Y=0,XY=0,X2=0,n=0;visitPoints(data,x$jscomp$0,y,function(dx,dy){++n;dx=Math.log(dx);X+=(dx-X)/n;Y+=(dy-Y)/n;XY+=(dx*dy-XY)/n;X2+=(dx*dx-X2)/n});var coef=ols(X,Y,XY,X2),predict=function(x){return coef[0]+coef[1]*Math.log(x)};return{coef:coef,predict:predict,rSquared:rSquared(data,\nx$jscomp$0,y,Y,predict)}};exports.regressionPoly=function(data,x$jscomp$0,y$jscomp$0,order){if(1===order)return linear(data,x$jscomp$0,y$jscomp$0);if(2===order)return quad(data,x$jscomp$0,y$jscomp$0);var $jscomp$destructuring$var5=$jscomp.makeIterator(points(data,x$jscomp$0,y$jscomp$0)),xv=$jscomp$destructuring$var5.next().value,yv=$jscomp$destructuring$var5.next().value,ux=$jscomp$destructuring$var5.next().value,uy=$jscomp$destructuring$var5.next().value;$jscomp$destructuring$var5=xv.length;var lhs=\n[],rhs=[],k=order+1,i,l,v;for(i=0;i<k;++i){for(v=l=0;l<$jscomp$destructuring$var5;++l)v+=Math.pow(xv[l],i)*yv[l];lhs.push(v);var c=new Float64Array(k);for(order=0;order<k;++order){for(v=l=0;l<$jscomp$destructuring$var5;++l)v+=Math.pow(xv[l],i+order);c[order]=v}rhs.push(c)}rhs.push(lhs);var coef=gaussianElimination(rhs);xv=function(x){x-=ux;var y=uy+coef[0]+coef[1]*x+coef[2]*x*x;for(i=3;i<k;++i)y+=coef[i]*Math.pow(x,i);return y};return{coef:uncenter(k,coef,-ux,uy),predict:xv,rSquared:rSquared(data,\nx$jscomp$0,y$jscomp$0,uy,xv)}};exports.regressionPow=function(data,x$jscomp$0,y){var X=0,Y=0,XY=0,X2=0,YS=0,n=0;visitPoints(data,x$jscomp$0,y,function(dx,dy){dx=Math.log(dx);var ly=Math.log(dy);++n;X+=(dx-X)/n;Y+=(ly-Y)/n;XY+=(dx*ly-XY)/n;X2+=(dx*dx-X2)/n;YS+=(dy-YS)/n});var coef=ols(X,Y,XY,X2),predict=function(x){return coef[0]*Math.pow(x,coef[1])};coef[0]=Math.exp(coef[0]);return{coef:coef,predict:predict,rSquared:rSquared(data,x$jscomp$0,y,YS,predict)}};exports.regressionQuad=quad;exports.sampleCurve=\nfunction(f,extent,minSteps,maxSteps){minSteps=minSteps||25;maxSteps=Math.max(minSteps,maxSteps||200);var point=function(x){return[x,f(x)]},minX=extent[0],maxX=extent[1],span=maxX-minX,stop=span/maxSteps;extent=[point(minX)];var next=[];if(minSteps===maxSteps){for(stop=1;stop<maxSteps;++stop)extent.push(point(minX+stop/minSteps*span));extent.push(point(maxX));return extent}next.push(point(maxX));for(maxSteps=minSteps;0<--maxSteps;)next.push(point(minX+maxSteps/minSteps*span));minSteps=extent[0];for(minX=\nnext[next.length-1];minX;)maxSteps=point((minSteps[0]+minX[0])/2),maxSteps[0]-minSteps[0]>=stop&&Math.abs(Math.atan2(minX[1]-minSteps[1],minX[0]-minSteps[0])-Math.atan2(maxSteps[1]-minSteps[1],maxSteps[0]-minSteps[0]))>MIN_RADIANS?next.push(maxSteps):(minSteps=minX,extent.push(minX),next.pop()),minX=next[next.length-1];return extent};exports.sampleLogNormal=sampleLogNormal;exports.sampleNormal=sampleNormal;exports.sampleUniform=sampleUniform;exports.setRandom=function(r){exports.random=r};Object.defineProperty(exports,\n\"__esModule\",{value:!0})})}","~:source","shadow$provide[\"module$node_modules$vega_statistics$build$vega_statistics\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.d3));\n}(this, (function (exports, d3Array) { 'use strict';\n\n  function* numbers(values, valueof) {\n    if (valueof == null) {\n      for (let value of values) {\n        if (value != null && value !== '' && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        value = valueof(value, ++index, values);\n        if (value != null && value !== '' && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    }\n  }\n\n  function quantiles(array, p, f) {\n    const values = Float64Array.from(numbers(array, f));\n\n    // don't depend on return value from typed array sort call\n    // protects against undefined sort results in Safari (vega/vega-lite#4964)\n    values.sort(d3Array.ascending);\n\n    return p.map(_ => d3Array.quantileSorted(values, _));\n  }\n\n  function quartiles(array, f) {\n    return quantiles(array, [0.25, 0.50, 0.75], f);\n  }\n\n  // Scott, D. W. (1992) Multivariate Density Estimation:\n  // Theory, Practice, and Visualization. Wiley.\n  function estimateBandwidth(array, f) {\n    const n = array.length,\n          d = d3Array.deviation(array, f),\n          q = quartiles(array, f),\n          h = (q[2] - q[0]) / 1.34,\n          v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\n    return 1.06 * v * Math.pow(n, -0.2);\n  }\n\n  function bin(_) {\n    // determine range\n    const maxb = _.maxbins || 20,\n          base = _.base || 10,\n          logb = Math.log(base),\n          div  = _.divide || [5, 2];\n\n    let min  = _.extent[0],\n        max  = _.extent[1],\n        step, level, minstep, v, i, n;\n\n    const span = _.span || (max - min) || Math.abs(min) || 1;\n\n    if (_.step) {\n      // if step size is explicitly given, use that\n      step = _.step;\n    } else if (_.steps) {\n      // if provided, limit choice to acceptable step sizes\n      v = span / maxb;\n      for (i=0, n=_.steps.length; i < n && _.steps[i] < v; ++i);\n      step = _.steps[Math.max(0, i-1)];\n    } else {\n      // else use span to determine step size\n      level = Math.ceil(Math.log(maxb) / logb);\n      minstep = _.minstep || 0;\n      step = Math.max(\n        minstep,\n        Math.pow(base, Math.round(Math.log(span) / logb) - level)\n      );\n\n      // increase step size if too many bins\n      while (Math.ceil(span/step) > maxb) { step *= base; }\n\n      // decrease step size if allowed\n      for (i=0, n=div.length; i<n; ++i) {\n        v = step / div[i];\n        if (v >= minstep && span / v <= maxb) step = v;\n      }\n    }\n\n    // update precision, min and max\n    v = Math.log(step);\n    const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\n          eps = Math.pow(base, -precision - 1);\n    if (_.nice || _.nice === undefined) {\n      v = Math.floor(min / step + eps) * step;\n      min = min < v ? v - step : v;\n      max = Math.ceil(max / step) * step;\n    }\n\n    return {\n      start: min,\n      stop:  max === min ? min + step : max,\n      step:  step\n    };\n  }\n\n  exports.random = Math.random;\n\n  function setRandom(r) {\n    exports.random = r;\n  }\n\n  function bootstrapCI(array, samples, alpha, f) {\n    if (!array.length) return [undefined, undefined];\n\n    const values = Float64Array.from(numbers(array, f)),\n          n = values.length,\n          m = samples;\n    let a, i, j, mu;\n\n    for (j=0, mu=Array(m); j<m; ++j) {\n      for (a=0, i=0; i<n; ++i) {\n        a += values[~~(exports.random() * n)];\n      }\n      mu[j] = a / n;\n    }\n\n    mu.sort(d3Array.ascending);\n\n    return [\n      d3Array.quantile(mu, alpha/2),\n      d3Array.quantile(mu, 1-(alpha/2))\n    ];\n  }\n\n  // Dot density binning for dot plot construction.\n  // Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n  // https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n  function dotbin(array, step, smooth, f) {\n    f = f || (_ => _);\n\n    const n = array.length,\n          v = new Float64Array(n);\n\n    let i = 0, j = 1,\n        a = f(array[0]),\n        b = a,\n        w = a + step,\n        x;\n\n    for (; j<n; ++j) {\n      x = f(array[j]);\n      if (x >= w) {\n        b = (a + b) / 2;\n        for (; i<j; ++i) v[i] = b;\n        w = x + step;\n        a = x;\n      }\n      b = x;\n    }\n\n    b = (a + b) / 2;\n    for (; i<j; ++i) v[i] = b;\n\n    return smooth ? smoothing(v, step + step / 4) : v;\n  }\n\n  // perform smoothing to reduce variance\n  // swap points between \"adjacent\" stacks\n  // Wilkinson defines adjacent as within step/4 units\n  function smoothing(v, thresh) {\n    const n = v.length;\n    let a = 0,\n        b = 1,\n        c, d;\n\n    // get left stack\n    while (v[a] === v[b]) ++b;\n\n    while (b < n) {\n      // get right stack\n      c = b + 1;\n      while (v[b] === v[c]) ++c;\n\n      // are stacks adjacent?\n      // if so, compare sizes and swap as needed\n      if (v[b] - v[b-1] < thresh) {\n        d = b + ((a + c - b - b) >> 1);\n        while (d < b) v[d++] = v[b];\n        while (d > b) v[d--] = v[a];\n      }\n\n      // update left stack indices\n      a = b;\n      b = c;\n    }\n\n    return v;\n  }\n\n  function lcg(seed) {\n    // Random numbers using a Linear Congruential Generator with seed value\n    // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n    return function() {\n      seed = (1103515245 * seed + 12345) % 2147483647;\n      return seed / 2147483647;\n    };\n  }\n\n  function integer(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n\n    let a, b, d;\n\n    const dist = {\n      min(_) {\n        if (arguments.length) {\n          a = _ || 0;\n          d = b - a;\n          return dist;\n        } else {\n          return a;\n        }\n      },\n      max(_) {\n        if (arguments.length) {\n          b = _ || 0;\n          d = b - a;\n          return dist;\n        } else {\n          return b;\n        }\n      },\n      sample() {\n        return a + Math.floor(d * exports.random());\n      },\n      pdf(x) {\n        return (x === Math.floor(x) && x >= a && x < b) ? 1 / d : 0;\n      },\n      cdf(x) {\n        const v = Math.floor(x);\n        return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n      },\n      icdf(p) {\n        return (p >= 0 && p <= 1) ? a - 1 + Math.floor(p * d) : NaN;\n      }\n    };\n\n    return dist.min(min).max(max);\n  }\n\n  const SQRT2PI = Math.sqrt(2 * Math.PI);\n  const SQRT2 = Math.SQRT2;\n\n  let nextSample = NaN;\n\n  function sampleNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n\n    let x = 0, y = 0, rds, c;\n    if (nextSample === nextSample) {\n      x = nextSample;\n      nextSample = NaN;\n    } else {\n      do {\n        x = exports.random() * 2 - 1;\n        y = exports.random() * 2 - 1;\n        rds = x * x + y * y;\n      } while (rds === 0 || rds > 1);\n      c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n      x *= c;\n      nextSample = y * c;\n    }\n    return mean + x * stdev;\n  }\n\n  function densityNormal(value, mean, stdev) {\n    stdev = stdev == null ? 1 : stdev;\n    const z = (value - (mean || 0)) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n  }\n\n  // Approximation from West (2009)\n  // Better Approximations to Cumulative Normal Functions\n  function cumulativeNormal(value, mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n\n    const z = (value - mean) / stdev,\n          Z = Math.abs(z);\n    let cd;\n\n    if (Z > 37) {\n      cd = 0;\n    } else {\n      const exp = Math.exp(-Z * Z / 2);\n      let sum;\n      if (Z < 7.07106781186547) {\n        sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n        sum = sum * Z + 6.37396220353165;\n        sum = sum * Z + 33.912866078383;\n        sum = sum * Z + 112.079291497871;\n        sum = sum * Z + 221.213596169931;\n        sum = sum * Z + 220.206867912376;\n        cd = exp * sum;\n        sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n        sum = sum * Z + 16.064177579207;\n        sum = sum * Z + 86.7807322029461;\n        sum = sum * Z + 296.564248779674;\n        sum = sum * Z + 637.333633378831;\n        sum = sum * Z + 793.826512519948;\n        sum = sum * Z + 440.413735824752;\n        cd = cd / sum;\n      } else {\n        sum = Z + 0.65;\n        sum = Z + 4 / sum;\n        sum = Z + 3 / sum;\n        sum = Z + 2 / sum;\n        sum = Z + 1 / sum;\n        cd = exp / sum / 2.506628274631;\n      }\n    }\n    return z > 0 ? 1 - cd : cd;\n  }\n\n  // Approximation of Probit function using inverse error function.\n  function quantileNormal(p, mean, stdev) {\n    if (p < 0 || p > 1) return NaN;\n    return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n  }\n\n  // Approximate inverse error function. Implementation from \"Approximating\n  // the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n  // Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\n  function erfinv(x) {\n    // beware that the logarithm argument must be\n    // commputed as (1.0 - x) * (1.0 + x),\n    // it must NOT be simplified as 1.0 - x * x as this\n    // would induce rounding errors near the boundaries +/-1\n    let w = - Math.log((1 - x) * (1 + x)), p;\n\n    if (w < 6.25) {\n        w -= 3.125;\n        p =  -3.6444120640178196996e-21;\n        p =   -1.685059138182016589e-19 + p * w;\n        p =   1.2858480715256400167e-18 + p * w;\n        p =    1.115787767802518096e-17 + p * w;\n        p =   -1.333171662854620906e-16 + p * w;\n        p =   2.0972767875968561637e-17 + p * w;\n        p =   6.6376381343583238325e-15 + p * w;\n        p =  -4.0545662729752068639e-14 + p * w;\n        p =  -8.1519341976054721522e-14 + p * w;\n        p =   2.6335093153082322977e-12 + p * w;\n        p =  -1.2975133253453532498e-11 + p * w;\n        p =  -5.4154120542946279317e-11 + p * w;\n        p =    1.051212273321532285e-09 + p * w;\n        p =  -4.1126339803469836976e-09 + p * w;\n        p =  -2.9070369957882005086e-08 + p * w;\n        p =   4.2347877827932403518e-07 + p * w;\n        p =  -1.3654692000834678645e-06 + p * w;\n        p =  -1.3882523362786468719e-05 + p * w;\n        p =    0.0001867342080340571352 + p * w;\n        p =  -0.00074070253416626697512 + p * w;\n        p =   -0.0060336708714301490533 + p * w;\n        p =      0.24015818242558961693 + p * w;\n        p =       1.6536545626831027356 + p * w;\n    } else if (w < 16.0) {\n        w = Math.sqrt(w) - 3.25;\n        p =   2.2137376921775787049e-09;\n        p =   9.0756561938885390979e-08 + p * w;\n        p =  -2.7517406297064545428e-07 + p * w;\n        p =   1.8239629214389227755e-08 + p * w;\n        p =   1.5027403968909827627e-06 + p * w;\n        p =   -4.013867526981545969e-06 + p * w;\n        p =   2.9234449089955446044e-06 + p * w;\n        p =   1.2475304481671778723e-05 + p * w;\n        p =  -4.7318229009055733981e-05 + p * w;\n        p =   6.8284851459573175448e-05 + p * w;\n        p =   2.4031110387097893999e-05 + p * w;\n        p =   -0.0003550375203628474796 + p * w;\n        p =   0.00095328937973738049703 + p * w;\n        p =   -0.0016882755560235047313 + p * w;\n        p =    0.0024914420961078508066 + p * w;\n        p =   -0.0037512085075692412107 + p * w;\n        p =     0.005370914553590063617 + p * w;\n        p =       1.0052589676941592334 + p * w;\n        p =       3.0838856104922207635 + p * w;\n    } else if (Number.isFinite(w)) {\n        w = Math.sqrt(w) - 5.0;\n        p =  -2.7109920616438573243e-11;\n        p =  -2.5556418169965252055e-10 + p * w;\n        p =   1.5076572693500548083e-09 + p * w;\n        p =  -3.7894654401267369937e-09 + p * w;\n        p =   7.6157012080783393804e-09 + p * w;\n        p =  -1.4960026627149240478e-08 + p * w;\n        p =   2.9147953450901080826e-08 + p * w;\n        p =  -6.7711997758452339498e-08 + p * w;\n        p =   2.2900482228026654717e-07 + p * w;\n        p =  -9.9298272942317002539e-07 + p * w;\n        p =   4.5260625972231537039e-06 + p * w;\n        p =  -1.9681778105531670567e-05 + p * w;\n        p =   7.5995277030017761139e-05 + p * w;\n        p =  -0.00021503011930044477347 + p * w;\n        p =  -0.00013871931833623122026 + p * w;\n        p =       1.0103004648645343977 + p * w;\n        p =       4.8499064014085844221 + p * w;\n    } else {\n        p = Infinity;\n    }\n\n    return p * x;\n  }\n\n  function gaussian(mean, stdev) {\n    let mu, sigma;\n\n    const dist = {\n      mean(_) {\n        if (arguments.length) {\n          mu = _ || 0;\n          return dist;\n        } else {\n          return mu;\n        }\n      },\n      stdev(_) {\n        if (arguments.length) {\n          sigma = _ == null ? 1 : _;\n          return dist;\n        } else {\n          return sigma;\n        }\n      },\n      sample: () => sampleNormal(mu, sigma),\n      pdf: value => densityNormal(value, mu, sigma),\n      cdf: value => cumulativeNormal(value, mu, sigma),\n      icdf: p => quantileNormal(p, mu, sigma)\n    };\n\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  function kde(support, bandwidth) {\n    const kernel = gaussian();\n    let n = 0;\n\n    const dist = {\n      data(_) {\n        if (arguments.length) {\n          support = _;\n          n = _ ? _.length : 0;\n          return dist.bandwidth(bandwidth);\n        } else {\n          return support;\n        }\n      },\n\n      bandwidth(_) {\n        if (!arguments.length) return bandwidth;\n        bandwidth = _;\n        if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n        return dist;\n      },\n\n      sample() {\n        return support[~~(exports.random() * n)] + bandwidth * kernel.sample();\n      },\n\n      pdf(x) {\n        let y = 0, i = 0;\n        for (; i<n; ++i) {\n          y += kernel.pdf((x - support[i]) / bandwidth);\n        }\n        return y / bandwidth / n;\n      },\n\n      cdf(x) {\n        let y = 0, i = 0;\n        for (; i<n; ++i) {\n          y += kernel.cdf((x - support[i]) / bandwidth);\n        }\n        return y / n;\n      },\n\n      icdf() {\n        throw Error('KDE icdf not supported.');\n      }\n    };\n\n    return dist.data(support);\n  }\n\n  function sampleLogNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    return Math.exp(mean + sampleNormal() * stdev);\n  }\n\n  function densityLogNormal(value, mean, stdev) {\n    if (value <= 0) return 0;\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    const z = (Math.log(value) - mean) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n  }\n\n  function cumulativeLogNormal(value, mean, stdev) {\n    return cumulativeNormal(Math.log(value), mean, stdev);\n  }\n\n  function quantileLogNormal(p, mean, stdev) {\n    return Math.exp(quantileNormal(p, mean, stdev));\n  }\n\n  function lognormal(mean, stdev) {\n    let mu, sigma;\n\n    const dist = {\n      mean(_) {\n        if (arguments.length) {\n          mu = _ || 0;\n          return dist;\n        } else {\n          return mu;\n        }\n      },\n      stdev(_) {\n        if (arguments.length) {\n          sigma = _ == null ? 1 : _;\n          return dist;\n        } else {\n          return sigma;\n        }\n      },\n      sample: () => sampleLogNormal(mu, sigma),\n      pdf: value => densityLogNormal(value, mu, sigma),\n      cdf: value => cumulativeLogNormal(value, mu, sigma),\n      icdf: p => quantileLogNormal(p, mu, sigma)\n    };\n\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  function mixture(dists, weights) {\n    let m = 0, w;\n\n    function normalize(x) {\n      const w = [];\n      let sum = 0, i;\n      for (i = 0; i < m; ++i) { sum += (w[i] = (x[i]==null ? 1 : +x[i])); }\n      for (i = 0; i < m; ++i) { w[i] /= sum; }\n      return w;\n    }\n\n    const dist = {\n      weights(_) {\n        if (arguments.length) {\n          w = normalize(weights = (_ || []));\n          return dist;\n        }\n        return weights;\n      },\n\n      distributions(_) {\n        if (arguments.length) {\n          if (_) {\n            m = _.length;\n            dists = _;\n          } else {\n            m = 0;\n            dists = [];\n          }\n          return dist.weights(weights);\n        }\n        return dists;\n      },\n\n      sample() {\n        const r = exports.random();\n        let d = dists[m-1],\n            v = w[0],\n            i = 0;\n\n        // first select distribution\n        for (; i<m-1; v += w[++i]) {\n          if (r < v) { d = dists[i]; break; }\n        }\n        // then sample from it\n        return d.sample();\n      },\n\n      pdf(x) {\n        let p = 0, i = 0;\n        for (; i<m; ++i) {\n          p += w[i] * dists[i].pdf(x);\n        }\n        return p;\n      },\n\n      cdf(x) {\n        let p = 0, i = 0;\n        for (; i<m; ++i) {\n          p += w[i] * dists[i].cdf(x);\n        }\n        return p;\n      },\n\n      icdf() {\n        throw Error('Mixture icdf not supported.');\n      }\n    };\n\n    return dist.distributions(dists).weights(weights);\n  }\n\n  function sampleUniform(min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return min + (max - min) * exports.random();\n  }\n\n  function densityUniform(value, min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return (value >= min && value <= max) ? 1 / (max - min) : 0;\n  }\n\n  function cumulativeUniform(value, min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n  }\n\n  function quantileUniform(p, min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return (p >= 0 && p <= 1) ? min + p * (max - min) : NaN;\n  }\n\n  function uniform(min, max) {\n    let a, b;\n\n    const dist = {\n      min(_) {\n        if (arguments.length) {\n          a = _ || 0;\n          return dist;\n        } else {\n          return a;\n        }\n      },\n      max(_) {\n        if (arguments.length) {\n          b = _ == null ? 1 : _;\n          return dist;\n        } else {\n          return b;\n        }\n      },\n      sample: () => sampleUniform(a, b),\n      pdf: value => densityUniform(value, a, b),\n      cdf: value => cumulativeUniform(value, a, b),\n      icdf: p => quantileUniform(p, a, b)\n    };\n\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return dist.min(min).max(max);\n  }\n\n  // Ordinary Least Squares\n  function ols(uX, uY, uXY, uX2) {\n    const delta = uX2 - uX * uX,\n          slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n          intercept = uY - slope * uX;\n\n    return [intercept, slope];\n  }\n\n  function points(data, x, y, sort) {\n    data = data.filter(d => {\n      let u = x(d), v = y(d);\n      return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n    });\n\n    if (sort) {\n      data.sort((a, b) => x(a) - x(b));\n    }\n\n    const n = data.length,\n          X = new Float64Array(n),\n          Y = new Float64Array(n);\n\n    // extract values, calculate means\n    let i = 0, ux = 0, uy = 0, xv, yv, d;\n    for (d of data) {\n      X[i] = xv = +x(d);\n      Y[i] = yv = +y(d);\n      ++i;\n      ux += (xv - ux) / i;\n      uy += (yv - uy) / i;\n    }\n\n    // mean center the data\n    for (i=0; i<n; ++i) {\n      X[i] -= ux;\n      Y[i] -= uy;\n    }\n\n    return [X, Y, ux, uy];\n  }\n\n  function visitPoints(data, x, y, callback) {\n    let i = -1, u, v;\n\n    for (const d of data) {\n      u = x(d);\n      v = y(d);\n      if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n        callback(u, v, ++i);\n      }\n    }\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function rSquared(data, x, y, uY, predict) {\n    let SSE = 0, SST = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      const sse = dy - predict(dx),\n            sst = dy - uY;\n\n      SSE += sse * sse;\n      SST += sst * sst;\n    });\n\n    return 1 - SSE / SST;\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function linear(data, x, y) {\n    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      ++n;\n      X += (dx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (dx * dy - XY) / n;\n      X2 += (dx * dx - X2) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] + coef[1] * x;\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function log(data, x, y) {\n    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      ++n;\n      dx = Math.log(dx);\n      X += (dx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (dx * dy - XY) / n;\n      X2 += (dx * dx - X2) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] + coef[1] * Math.log(x);\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y, predict)\n    };\n  }\n\n  function exp(data, x, y) {\n    // eslint-disable-next-line no-unused-vars\n    const [xv, yv, ux, uy] = points(data, x, y);\n    let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly, xy;\n\n    visitPoints(data, x, y, (_, dy) => {\n      dx = xv[n++];\n      ly = Math.log(dy);\n      xy = dx * dy;\n\n      YL += (dy * ly - YL) / n;\n      XY += (xy - XY) / n;\n      XYL += (xy * ly - XYL) / n;\n      X2Y += (dx * xy - X2Y) / n;\n    });\n\n    const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n          predict = x => Math.exp(c0 + c1 * (x - ux));\n\n    return {\n      coef: [Math.exp(c0 - c1 * ux), c1],\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function pow(data, x, y) {\n    let X = 0, Y = 0, XY = 0, X2 = 0, YS = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      const lx = Math.log(dx),\n            ly = Math.log(dy);\n      ++n;\n      X += (lx - X) / n;\n      Y += (ly - Y) / n;\n      XY += (lx * ly - XY) / n;\n      X2 += (lx * lx - X2) / n;\n      YS += (dy - YS) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] * Math.pow(x, coef[1]);\n\n    coef[0] = Math.exp(coef[0]);\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, YS, predict)\n    };\n  }\n\n  function quad(data, x, y) {\n    const [xv, yv, ux, uy] = points(data, x, y),\n          n = xv.length;\n\n    let X2 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0,\n        i, dx, dy, x2;\n\n    for (i=0; i<n;) {\n      dx = xv[i];\n      dy = yv[i++];\n      x2 = dx * dx;\n      X2 += (x2 - X2) / i;\n      X3 += (x2 * dx - X3) / i;\n      X4 += (x2 * x2 - X4) / i;\n      XY += (dx * dy - XY) / i;\n      X2Y += (x2 * dy - X2Y) / i;\n    }\n\n    const X2X2 = X4 - (X2 * X2),\n          d = (X2 * X2X2 - X3 * X3),\n          a = (X2Y * X2 - XY * X3) / d,\n          b = (XY * X2X2 - X2Y * X3) / d,\n          c = -a * X2,\n          predict = x => {\n            x = x - ux;\n            return a * x * x + b * x + c + uy;\n          };\n\n    // transform coefficients back from mean-centered space\n    return {\n      coef: [\n        c - b * ux + a * ux * ux + uy,\n        b - 2 * a * ux,\n        a\n      ],\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  // ... which was adapted from regression-js by Tom Alexander\n  // Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n  // License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\n  function poly(data, x, y, order) {\n    // use more efficient methods for lower orders\n    if (order === 1) return linear(data, x, y);\n    if (order === 2) return quad(data, x, y);\n\n    const [xv, yv, ux, uy] = points(data, x, y),\n          n = xv.length,\n          lhs = [],\n          rhs = [],\n          k = order + 1;\n\n    let i, j, l, v, c;\n\n    for (i=0; i<k; ++i) {\n      for (l=0, v=0; l<n; ++l) {\n        v += Math.pow(xv[l], i) * yv[l];\n      }\n      lhs.push(v);\n\n      c = new Float64Array(k);\n      for (j=0; j<k; ++j) {\n        for (l=0, v=0; l<n; ++l) {\n          v += Math.pow(xv[l], i + j);\n        }\n        c[j] = v;\n      }\n      rhs.push(c);\n    }\n    rhs.push(lhs);\n\n    const coef = gaussianElimination(rhs),\n          predict = x => {\n            x -= ux;\n            let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n            for (i=3; i<k; ++i) y += coef[i] * Math.pow(x, i);\n            return y;\n          };\n\n    return {\n      coef: uncenter(k, coef, -ux, uy),\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  function uncenter(k, a, x, y) {\n    const z = Array(k);\n    let i, j, v, c;\n\n    // initialize to zero\n    for (i=0; i<k; ++i) z[i] = 0;\n\n    // polynomial expansion\n    for (i=k-1; i>=0; --i) {\n      v = a[i];\n      c = 1;\n      z[i] += v;\n      for (j=1; j<=i; ++j) {\n        c *= (i + 1 - j) / j; // binomial coefficent\n        z[i-j] += v * Math.pow(x, j) * c;\n      }\n    }\n\n    // bias term\n    z[0] += y;\n\n    return z;\n  }\n\n  // Given an array for a two-dimensional matrix and the polynomial order,\n  // solve A * x = b using Gaussian elimination.\n  function gaussianElimination(matrix) {\n    const n = matrix.length - 1,\n          coef = [];\n\n    let i, j, k, r, t;\n\n    for (i = 0; i < n; ++i) {\n      r = i; // max row\n      for (j = i + 1; j < n; ++j) {\n        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n          r = j;\n        }\n      }\n\n      for (k = i; k < n + 1; ++k) {\n        t = matrix[k][i];\n        matrix[k][i] = matrix[k][r];\n        matrix[k][r] = t;\n      }\n\n      for (j = i + 1; j < n; ++j) {\n        for (k = n; k >= i; k--) {\n          matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\n        }\n      }\n    }\n\n    for (j = n - 1; j >= 0; --j) {\n      t = 0;\n      for (k = j + 1; k < n; ++k) {\n        t += matrix[k][j] * coef[k];\n      }\n      coef[j] = (matrix[n][j] - t) / matrix[j][j];\n    }\n\n    return coef;\n  }\n\n  const maxiters = 2,\n        epsilon = 1e-12;\n\n  // Adapted from science.js by Jason Davies\n  // Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n  // License: https://github.com/jasondavies/science.js/blob/master/LICENSE\n  function loess(data, x, y, bandwidth) {\n    const [xv, yv, ux, uy] = points(data, x, y, true),\n          n = xv.length,\n          bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors\n          yhat = new Float64Array(n),\n          residuals = new Float64Array(n),\n          robustWeights = new Float64Array(n).fill(1);\n\n    for (let iter = -1; ++iter <= maxiters; ) {\n      const interval = [0, bw - 1];\n\n      for (let i = 0; i < n; ++i) {\n        const dx = xv[i],\n              i0 = interval[0],\n              i1 = interval[1],\n              edge = (dx - xv[i0]) > (xv[i1] - dx) ? i0 : i1;\n\n        let W = 0, X = 0, Y = 0, XY = 0, X2 = 0;\n        const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n        for (let k = i0; k <= i1; ++k) {\n          const xk = xv[k],\n                yk = yv[k],\n                w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n                xkw = xk * w;\n\n          W += w;\n          X += xkw;\n          Y += yk * w;\n          XY += yk * xkw;\n          X2 += xk * xkw;\n        }\n\n        // linear regression fit\n        const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n        yhat[i] = a + b * dx;\n        residuals[i] = Math.abs(yv[i] - yhat[i]);\n\n        updateInterval(xv, i + 1, interval);\n      }\n\n      if (iter === maxiters) {\n        break;\n      }\n\n      const medianResidual = d3Array.median(residuals);\n      if (Math.abs(medianResidual) < epsilon) break;\n\n      for (let i = 0, arg, w; i < n; ++i){\n        arg = residuals[i] / (6 * medianResidual);\n        // default to epsilon (rather than zero) for large deviations\n        // keeping weights tiny but non-zero prevents singularites\n        robustWeights[i] = (arg >= 1) ? epsilon : ((w = 1 - arg * arg) * w);\n      }\n    }\n\n    return output(xv, yhat, ux, uy);\n  }\n\n  // weighting kernel for local regression\n  function tricube(x) {\n    return (x = 1 - x * x * x) * x * x;\n  }\n\n  // advance sliding window interval of nearest neighbors\n  function updateInterval(xv, i, interval) {\n    const val = xv[i];\n    let left = interval[0],\n        right = interval[1] + 1;\n\n    if (right >= xv.length) return;\n\n    // step right if distance to new right edge is <= distance to old left edge\n    // step when distance is equal to ensure movement over duplicate x values\n    while (i > left && (xv[right] - val) <= (val - xv[left])) {\n      interval[0] = ++left;\n      interval[1] = right;\n      ++right;\n    }\n  }\n\n  // generate smoothed output points\n  // average points with repeated x values\n  function output(xv, yhat, ux, uy) {\n    const n = xv.length, out = [];\n    let i = 0, cnt = 0, prev = [], v;\n\n    for (; i<n; ++i) {\n      v = xv[i] + ux;\n      if (prev[0] === v) {\n        // average output values via online update\n        prev[1] += (yhat[i] - prev[1]) / (++cnt);\n      } else {\n        // add new output point\n        cnt = 0;\n        prev[1] += uy;\n        prev = [v, yhat[i]];\n        out.push(prev);\n      }\n    }\n    prev[1] += uy;\n\n    return out;\n  }\n\n  // subdivide up to accuracy of 0.1 degrees\n  const MIN_RADIANS = 0.1 * Math.PI / 180;\n\n  // Adaptively sample an interpolated function over a domain extent\n  function sampleCurve(f, extent, minSteps, maxSteps) {\n    minSteps = minSteps || 25;\n    maxSteps = Math.max(minSteps, maxSteps || 200);\n\n    const point = x => [x, f(x)],\n          minX = extent[0],\n          maxX = extent[1],\n          span = maxX - minX,\n          stop = span / maxSteps,\n          prev = [point(minX)],\n          next = [];\n\n    if (minSteps === maxSteps) {\n      // no adaptation, sample uniform grid directly and return\n      for (let i = 1; i < maxSteps; ++i) {\n        prev.push(point(minX + (i / minSteps) * span));\n      }\n      prev.push(point(maxX));\n      return prev;\n    } else {\n      // sample minimum points on uniform grid\n      // then move on to perform adaptive refinement\n      next.push(point(maxX));\n      for (let i = minSteps; --i > 0;) {\n        next.push(point(minX + (i / minSteps) * span));\n      }\n    }\n\n    let p0 = prev[0],\n        p1 = next[next.length - 1];\n\n    while (p1) {\n      // midpoint for potential curve subdivision\n      const pm = point((p0[0] + p1[0]) / 2);\n\n      if (pm[0] - p0[0] >= stop && angleDelta(p0, pm, p1) > MIN_RADIANS) {\n        // maximum resolution has not yet been met, and\n        // subdivision midpoint sufficiently different from endpoint\n        // save subdivision, push midpoint onto the visitation stack\n        next.push(pm);\n      } else {\n        // subdivision midpoint sufficiently similar to endpoint\n        // skip subdivision, store endpoint, move to next point on the stack\n        p0 = p1;\n        prev.push(p1);\n        next.pop();\n      }\n      p1 = next[next.length - 1];\n    }\n\n    return prev;\n  }\n\n  function angleDelta(p, q, r) {\n    const a0 = Math.atan2(r[1] - p[1], r[0] - p[0]),\n          a1 = Math.atan2(q[1] - p[1], q[0] - p[0]);\n    return Math.abs(a0 - a1);\n  }\n\n  exports.bandwidthNRD = estimateBandwidth;\n  exports.bin = bin;\n  exports.bootstrapCI = bootstrapCI;\n  exports.cumulativeLogNormal = cumulativeLogNormal;\n  exports.cumulativeNormal = cumulativeNormal;\n  exports.cumulativeUniform = cumulativeUniform;\n  exports.densityLogNormal = densityLogNormal;\n  exports.densityNormal = densityNormal;\n  exports.densityUniform = densityUniform;\n  exports.dotbin = dotbin;\n  exports.quantileLogNormal = quantileLogNormal;\n  exports.quantileNormal = quantileNormal;\n  exports.quantileUniform = quantileUniform;\n  exports.quantiles = quantiles;\n  exports.quartiles = quartiles;\n  exports.randomInteger = integer;\n  exports.randomKDE = kde;\n  exports.randomLCG = lcg;\n  exports.randomLogNormal = lognormal;\n  exports.randomMixture = mixture;\n  exports.randomNormal = gaussian;\n  exports.randomUniform = uniform;\n  exports.regressionExp = exp;\n  exports.regressionLinear = linear;\n  exports.regressionLoess = loess;\n  exports.regressionLog = log;\n  exports.regressionPoly = poly;\n  exports.regressionPow = pow;\n  exports.regressionQuad = quad;\n  exports.sampleCurve = sampleCurve;\n  exports.sampleLogNormal = sampleLogNormal;\n  exports.sampleNormal = sampleNormal;\n  exports.sampleUniform = sampleUniform;\n  exports.setRandom = setRandom;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$d3_array$dist$d3_array"]],"~:properties",["^5",["stop","randomNormal","quantileLogNormal","distributions","bootstrapCI","weights","cumulativeNormal","regressionLog","random","min","dotbin","predict","randomKDE","sampleCurve","densityUniform","pdf","densityLogNormal","sampleNormal","regressionPoly","cdf","mean","bandwidth","cumulativeLogNormal","__esModule","max","randomInteger","vega","regressionPow","sampleLogNormal","quantileNormal","coef","regressionLoess","rSquared","value","randomLCG","sampleUniform","start","setRandom","randomMixture","regressionExp","densityNormal","bin","quartiles","bandwidthNRD","randomUniform","cumulativeUniform","regressionLinear","quantiles","icdf","data","stdev","regressionQuad","sample","quantileUniform","step","randomLogNormal"]],"~:compiled-at",1600144479822,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$vega_statistics$build$vega_statistics.js\",\n\"lineCount\":40,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/vega-statistics/build/vega-statistics.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$vega_statistics$build$vega_statistics\\\"] = function(global,require,module,exports) {\\n(function (global, factory) {\\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :\\n  typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :\\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.d3));\\n}(this, (function (exports, d3Array) { 'use strict';\\n\\n  function* numbers(values, valueof) {\\n    if (valueof == null) {\\n      for (let value of values) {\\n        if (value != null && value !== '' && (value = +value) >= value) {\\n          yield value;\\n        }\\n      }\\n    } else {\\n      let index = -1;\\n      for (let value of values) {\\n        value = valueof(value, ++index, values);\\n        if (value != null && value !== '' && (value = +value) >= value) {\\n          yield value;\\n        }\\n      }\\n    }\\n  }\\n\\n  function quantiles(array, p, f) {\\n    const values = Float64Array.from(numbers(array, f));\\n\\n    // don't depend on return value from typed array sort call\\n    // protects against undefined sort results in Safari (vega/vega-lite#4964)\\n    values.sort(d3Array.ascending);\\n\\n    return p.map(_ => d3Array.quantileSorted(values, _));\\n  }\\n\\n  function quartiles(array, f) {\\n    return quantiles(array, [0.25, 0.50, 0.75], f);\\n  }\\n\\n  // Scott, D. W. (1992) Multivariate Density Estimation:\\n  // Theory, Practice, and Visualization. Wiley.\\n  function estimateBandwidth(array, f) {\\n    const n = array.length,\\n          d = d3Array.deviation(array, f),\\n          q = quartiles(array, f),\\n          h = (q[2] - q[0]) / 1.34,\\n          v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\\n    return 1.06 * v * Math.pow(n, -0.2);\\n  }\\n\\n  function bin(_) {\\n    // determine range\\n    const maxb = _.maxbins || 20,\\n          base = _.base || 10,\\n          logb = Math.log(base),\\n          div  = _.divide || [5, 2];\\n\\n    let min  = _.extent[0],\\n        max  = _.extent[1],\\n        step, level, minstep, v, i, n;\\n\\n    const span = _.span || (max - min) || Math.abs(min) || 1;\\n\\n    if (_.step) {\\n      // if step size is explicitly given, use that\\n      step = _.step;\\n    } else if (_.steps) {\\n      // if provided, limit choice to acceptable step sizes\\n      v = span / maxb;\\n      for (i=0, n=_.steps.length; i < n && _.steps[i] < v; ++i);\\n      step = _.steps[Math.max(0, i-1)];\\n    } else {\\n      // else use span to determine step size\\n      level = Math.ceil(Math.log(maxb) / logb);\\n      minstep = _.minstep || 0;\\n      step = Math.max(\\n        minstep,\\n        Math.pow(base, Math.round(Math.log(span) / logb) - level)\\n      );\\n\\n      // increase step size if too many bins\\n      while (Math.ceil(span/step) > maxb) { step *= base; }\\n\\n      // decrease step size if allowed\\n      for (i=0, n=div.length; i<n; ++i) {\\n        v = step / div[i];\\n        if (v >= minstep && span / v <= maxb) step = v;\\n      }\\n    }\\n\\n    // update precision, min and max\\n    v = Math.log(step);\\n    const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\\n          eps = Math.pow(base, -precision - 1);\\n    if (_.nice || _.nice === undefined) {\\n      v = Math.floor(min / step + eps) * step;\\n      min = min < v ? v - step : v;\\n      max = Math.ceil(max / step) * step;\\n    }\\n\\n    return {\\n      start: min,\\n      stop:  max === min ? min + step : max,\\n      step:  step\\n    };\\n  }\\n\\n  exports.random = Math.random;\\n\\n  function setRandom(r) {\\n    exports.random = r;\\n  }\\n\\n  function bootstrapCI(array, samples, alpha, f) {\\n    if (!array.length) return [undefined, undefined];\\n\\n    const values = Float64Array.from(numbers(array, f)),\\n          n = values.length,\\n          m = samples;\\n    let a, i, j, mu;\\n\\n    for (j=0, mu=Array(m); j<m; ++j) {\\n      for (a=0, i=0; i<n; ++i) {\\n        a += values[~~(exports.random() * n)];\\n      }\\n      mu[j] = a / n;\\n    }\\n\\n    mu.sort(d3Array.ascending);\\n\\n    return [\\n      d3Array.quantile(mu, alpha/2),\\n      d3Array.quantile(mu, 1-(alpha/2))\\n    ];\\n  }\\n\\n  // Dot density binning for dot plot construction.\\n  // Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\\n  // https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\\n  function dotbin(array, step, smooth, f) {\\n    f = f || (_ => _);\\n\\n    const n = array.length,\\n          v = new Float64Array(n);\\n\\n    let i = 0, j = 1,\\n        a = f(array[0]),\\n        b = a,\\n        w = a + step,\\n        x;\\n\\n    for (; j<n; ++j) {\\n      x = f(array[j]);\\n      if (x >= w) {\\n        b = (a + b) / 2;\\n        for (; i<j; ++i) v[i] = b;\\n        w = x + step;\\n        a = x;\\n      }\\n      b = x;\\n    }\\n\\n    b = (a + b) / 2;\\n    for (; i<j; ++i) v[i] = b;\\n\\n    return smooth ? smoothing(v, step + step / 4) : v;\\n  }\\n\\n  // perform smoothing to reduce variance\\n  // swap points between \\\"adjacent\\\" stacks\\n  // Wilkinson defines adjacent as within step/4 units\\n  function smoothing(v, thresh) {\\n    const n = v.length;\\n    let a = 0,\\n        b = 1,\\n        c, d;\\n\\n    // get left stack\\n    while (v[a] === v[b]) ++b;\\n\\n    while (b < n) {\\n      // get right stack\\n      c = b + 1;\\n      while (v[b] === v[c]) ++c;\\n\\n      // are stacks adjacent?\\n      // if so, compare sizes and swap as needed\\n      if (v[b] - v[b-1] < thresh) {\\n        d = b + ((a + c - b - b) >> 1);\\n        while (d < b) v[d++] = v[b];\\n        while (d > b) v[d--] = v[a];\\n      }\\n\\n      // update left stack indices\\n      a = b;\\n      b = c;\\n    }\\n\\n    return v;\\n  }\\n\\n  function lcg(seed) {\\n    // Random numbers using a Linear Congruential Generator with seed value\\n    // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\\n    return function() {\\n      seed = (1103515245 * seed + 12345) % 2147483647;\\n      return seed / 2147483647;\\n    };\\n  }\\n\\n  function integer(min, max) {\\n    if (max == null) {\\n      max = min;\\n      min = 0;\\n    }\\n\\n    let a, b, d;\\n\\n    const dist = {\\n      min(_) {\\n        if (arguments.length) {\\n          a = _ || 0;\\n          d = b - a;\\n          return dist;\\n        } else {\\n          return a;\\n        }\\n      },\\n      max(_) {\\n        if (arguments.length) {\\n          b = _ || 0;\\n          d = b - a;\\n          return dist;\\n        } else {\\n          return b;\\n        }\\n      },\\n      sample() {\\n        return a + Math.floor(d * exports.random());\\n      },\\n      pdf(x) {\\n        return (x === Math.floor(x) && x >= a && x < b) ? 1 / d : 0;\\n      },\\n      cdf(x) {\\n        const v = Math.floor(x);\\n        return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\\n      },\\n      icdf(p) {\\n        return (p >= 0 && p <= 1) ? a - 1 + Math.floor(p * d) : NaN;\\n      }\\n    };\\n\\n    return dist.min(min).max(max);\\n  }\\n\\n  const SQRT2PI = Math.sqrt(2 * Math.PI);\\n  const SQRT2 = Math.SQRT2;\\n\\n  let nextSample = NaN;\\n\\n  function sampleNormal(mean, stdev) {\\n    mean = mean || 0;\\n    stdev = stdev == null ? 1 : stdev;\\n\\n    let x = 0, y = 0, rds, c;\\n    if (nextSample === nextSample) {\\n      x = nextSample;\\n      nextSample = NaN;\\n    } else {\\n      do {\\n        x = exports.random() * 2 - 1;\\n        y = exports.random() * 2 - 1;\\n        rds = x * x + y * y;\\n      } while (rds === 0 || rds > 1);\\n      c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\\n      x *= c;\\n      nextSample = y * c;\\n    }\\n    return mean + x * stdev;\\n  }\\n\\n  function densityNormal(value, mean, stdev) {\\n    stdev = stdev == null ? 1 : stdev;\\n    const z = (value - (mean || 0)) / stdev;\\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\\n  }\\n\\n  // Approximation from West (2009)\\n  // Better Approximations to Cumulative Normal Functions\\n  function cumulativeNormal(value, mean, stdev) {\\n    mean = mean || 0;\\n    stdev = stdev == null ? 1 : stdev;\\n\\n    const z = (value - mean) / stdev,\\n          Z = Math.abs(z);\\n    let cd;\\n\\n    if (Z > 37) {\\n      cd = 0;\\n    } else {\\n      const exp = Math.exp(-Z * Z / 2);\\n      let sum;\\n      if (Z < 7.07106781186547) {\\n        sum = 3.52624965998911e-02 * Z + 0.700383064443688;\\n        sum = sum * Z + 6.37396220353165;\\n        sum = sum * Z + 33.912866078383;\\n        sum = sum * Z + 112.079291497871;\\n        sum = sum * Z + 221.213596169931;\\n        sum = sum * Z + 220.206867912376;\\n        cd = exp * sum;\\n        sum = 8.83883476483184e-02 * Z + 1.75566716318264;\\n        sum = sum * Z + 16.064177579207;\\n        sum = sum * Z + 86.7807322029461;\\n        sum = sum * Z + 296.564248779674;\\n        sum = sum * Z + 637.333633378831;\\n        sum = sum * Z + 793.826512519948;\\n        sum = sum * Z + 440.413735824752;\\n        cd = cd / sum;\\n      } else {\\n        sum = Z + 0.65;\\n        sum = Z + 4 / sum;\\n        sum = Z + 3 / sum;\\n        sum = Z + 2 / sum;\\n        sum = Z + 1 / sum;\\n        cd = exp / sum / 2.506628274631;\\n      }\\n    }\\n    return z > 0 ? 1 - cd : cd;\\n  }\\n\\n  // Approximation of Probit function using inverse error function.\\n  function quantileNormal(p, mean, stdev) {\\n    if (p < 0 || p > 1) return NaN;\\n    return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\\n  }\\n\\n  // Approximate inverse error function. Implementation from \\\"Approximating\\n  // the erfinv function\\\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\\n  // Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\\n  function erfinv(x) {\\n    // beware that the logarithm argument must be\\n    // commputed as (1.0 - x) * (1.0 + x),\\n    // it must NOT be simplified as 1.0 - x * x as this\\n    // would induce rounding errors near the boundaries +/-1\\n    let w = - Math.log((1 - x) * (1 + x)), p;\\n\\n    if (w < 6.25) {\\n        w -= 3.125;\\n        p =  -3.6444120640178196996e-21;\\n        p =   -1.685059138182016589e-19 + p * w;\\n        p =   1.2858480715256400167e-18 + p * w;\\n        p =    1.115787767802518096e-17 + p * w;\\n        p =   -1.333171662854620906e-16 + p * w;\\n        p =   2.0972767875968561637e-17 + p * w;\\n        p =   6.6376381343583238325e-15 + p * w;\\n        p =  -4.0545662729752068639e-14 + p * w;\\n        p =  -8.1519341976054721522e-14 + p * w;\\n        p =   2.6335093153082322977e-12 + p * w;\\n        p =  -1.2975133253453532498e-11 + p * w;\\n        p =  -5.4154120542946279317e-11 + p * w;\\n        p =    1.051212273321532285e-09 + p * w;\\n        p =  -4.1126339803469836976e-09 + p * w;\\n        p =  -2.9070369957882005086e-08 + p * w;\\n        p =   4.2347877827932403518e-07 + p * w;\\n        p =  -1.3654692000834678645e-06 + p * w;\\n        p =  -1.3882523362786468719e-05 + p * w;\\n        p =    0.0001867342080340571352 + p * w;\\n        p =  -0.00074070253416626697512 + p * w;\\n        p =   -0.0060336708714301490533 + p * w;\\n        p =      0.24015818242558961693 + p * w;\\n        p =       1.6536545626831027356 + p * w;\\n    } else if (w < 16.0) {\\n        w = Math.sqrt(w) - 3.25;\\n        p =   2.2137376921775787049e-09;\\n        p =   9.0756561938885390979e-08 + p * w;\\n        p =  -2.7517406297064545428e-07 + p * w;\\n        p =   1.8239629214389227755e-08 + p * w;\\n        p =   1.5027403968909827627e-06 + p * w;\\n        p =   -4.013867526981545969e-06 + p * w;\\n        p =   2.9234449089955446044e-06 + p * w;\\n        p =   1.2475304481671778723e-05 + p * w;\\n        p =  -4.7318229009055733981e-05 + p * w;\\n        p =   6.8284851459573175448e-05 + p * w;\\n        p =   2.4031110387097893999e-05 + p * w;\\n        p =   -0.0003550375203628474796 + p * w;\\n        p =   0.00095328937973738049703 + p * w;\\n        p =   -0.0016882755560235047313 + p * w;\\n        p =    0.0024914420961078508066 + p * w;\\n        p =   -0.0037512085075692412107 + p * w;\\n        p =     0.005370914553590063617 + p * w;\\n        p =       1.0052589676941592334 + p * w;\\n        p =       3.0838856104922207635 + p * w;\\n    } else if (Number.isFinite(w)) {\\n        w = Math.sqrt(w) - 5.0;\\n        p =  -2.7109920616438573243e-11;\\n        p =  -2.5556418169965252055e-10 + p * w;\\n        p =   1.5076572693500548083e-09 + p * w;\\n        p =  -3.7894654401267369937e-09 + p * w;\\n        p =   7.6157012080783393804e-09 + p * w;\\n        p =  -1.4960026627149240478e-08 + p * w;\\n        p =   2.9147953450901080826e-08 + p * w;\\n        p =  -6.7711997758452339498e-08 + p * w;\\n        p =   2.2900482228026654717e-07 + p * w;\\n        p =  -9.9298272942317002539e-07 + p * w;\\n        p =   4.5260625972231537039e-06 + p * w;\\n        p =  -1.9681778105531670567e-05 + p * w;\\n        p =   7.5995277030017761139e-05 + p * w;\\n        p =  -0.00021503011930044477347 + p * w;\\n        p =  -0.00013871931833623122026 + p * w;\\n        p =       1.0103004648645343977 + p * w;\\n        p =       4.8499064014085844221 + p * w;\\n    } else {\\n        p = Infinity;\\n    }\\n\\n    return p * x;\\n  }\\n\\n  function gaussian(mean, stdev) {\\n    let mu, sigma;\\n\\n    const dist = {\\n      mean(_) {\\n        if (arguments.length) {\\n          mu = _ || 0;\\n          return dist;\\n        } else {\\n          return mu;\\n        }\\n      },\\n      stdev(_) {\\n        if (arguments.length) {\\n          sigma = _ == null ? 1 : _;\\n          return dist;\\n        } else {\\n          return sigma;\\n        }\\n      },\\n      sample: () => sampleNormal(mu, sigma),\\n      pdf: value => densityNormal(value, mu, sigma),\\n      cdf: value => cumulativeNormal(value, mu, sigma),\\n      icdf: p => quantileNormal(p, mu, sigma)\\n    };\\n\\n    return dist.mean(mean).stdev(stdev);\\n  }\\n\\n  function kde(support, bandwidth) {\\n    const kernel = gaussian();\\n    let n = 0;\\n\\n    const dist = {\\n      data(_) {\\n        if (arguments.length) {\\n          support = _;\\n          n = _ ? _.length : 0;\\n          return dist.bandwidth(bandwidth);\\n        } else {\\n          return support;\\n        }\\n      },\\n\\n      bandwidth(_) {\\n        if (!arguments.length) return bandwidth;\\n        bandwidth = _;\\n        if (!bandwidth && support) bandwidth = estimateBandwidth(support);\\n        return dist;\\n      },\\n\\n      sample() {\\n        return support[~~(exports.random() * n)] + bandwidth * kernel.sample();\\n      },\\n\\n      pdf(x) {\\n        let y = 0, i = 0;\\n        for (; i<n; ++i) {\\n          y += kernel.pdf((x - support[i]) / bandwidth);\\n        }\\n        return y / bandwidth / n;\\n      },\\n\\n      cdf(x) {\\n        let y = 0, i = 0;\\n        for (; i<n; ++i) {\\n          y += kernel.cdf((x - support[i]) / bandwidth);\\n        }\\n        return y / n;\\n      },\\n\\n      icdf() {\\n        throw Error('KDE icdf not supported.');\\n      }\\n    };\\n\\n    return dist.data(support);\\n  }\\n\\n  function sampleLogNormal(mean, stdev) {\\n    mean = mean || 0;\\n    stdev = stdev == null ? 1 : stdev;\\n    return Math.exp(mean + sampleNormal() * stdev);\\n  }\\n\\n  function densityLogNormal(value, mean, stdev) {\\n    if (value <= 0) return 0;\\n    mean = mean || 0;\\n    stdev = stdev == null ? 1 : stdev;\\n    const z = (Math.log(value) - mean) / stdev;\\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\\n  }\\n\\n  function cumulativeLogNormal(value, mean, stdev) {\\n    return cumulativeNormal(Math.log(value), mean, stdev);\\n  }\\n\\n  function quantileLogNormal(p, mean, stdev) {\\n    return Math.exp(quantileNormal(p, mean, stdev));\\n  }\\n\\n  function lognormal(mean, stdev) {\\n    let mu, sigma;\\n\\n    const dist = {\\n      mean(_) {\\n        if (arguments.length) {\\n          mu = _ || 0;\\n          return dist;\\n        } else {\\n          return mu;\\n        }\\n      },\\n      stdev(_) {\\n        if (arguments.length) {\\n          sigma = _ == null ? 1 : _;\\n          return dist;\\n        } else {\\n          return sigma;\\n        }\\n      },\\n      sample: () => sampleLogNormal(mu, sigma),\\n      pdf: value => densityLogNormal(value, mu, sigma),\\n      cdf: value => cumulativeLogNormal(value, mu, sigma),\\n      icdf: p => quantileLogNormal(p, mu, sigma)\\n    };\\n\\n    return dist.mean(mean).stdev(stdev);\\n  }\\n\\n  function mixture(dists, weights) {\\n    let m = 0, w;\\n\\n    function normalize(x) {\\n      const w = [];\\n      let sum = 0, i;\\n      for (i = 0; i < m; ++i) { sum += (w[i] = (x[i]==null ? 1 : +x[i])); }\\n      for (i = 0; i < m; ++i) { w[i] /= sum; }\\n      return w;\\n    }\\n\\n    const dist = {\\n      weights(_) {\\n        if (arguments.length) {\\n          w = normalize(weights = (_ || []));\\n          return dist;\\n        }\\n        return weights;\\n      },\\n\\n      distributions(_) {\\n        if (arguments.length) {\\n          if (_) {\\n            m = _.length;\\n            dists = _;\\n          } else {\\n            m = 0;\\n            dists = [];\\n          }\\n          return dist.weights(weights);\\n        }\\n        return dists;\\n      },\\n\\n      sample() {\\n        const r = exports.random();\\n        let d = dists[m-1],\\n            v = w[0],\\n            i = 0;\\n\\n        // first select distribution\\n        for (; i<m-1; v += w[++i]) {\\n          if (r < v) { d = dists[i]; break; }\\n        }\\n        // then sample from it\\n        return d.sample();\\n      },\\n\\n      pdf(x) {\\n        let p = 0, i = 0;\\n        for (; i<m; ++i) {\\n          p += w[i] * dists[i].pdf(x);\\n        }\\n        return p;\\n      },\\n\\n      cdf(x) {\\n        let p = 0, i = 0;\\n        for (; i<m; ++i) {\\n          p += w[i] * dists[i].cdf(x);\\n        }\\n        return p;\\n      },\\n\\n      icdf() {\\n        throw Error('Mixture icdf not supported.');\\n      }\\n    };\\n\\n    return dist.distributions(dists).weights(weights);\\n  }\\n\\n  function sampleUniform(min, max) {\\n    if (max == null) {\\n      max = (min == null ? 1 : min);\\n      min = 0;\\n    }\\n    return min + (max - min) * exports.random();\\n  }\\n\\n  function densityUniform(value, min, max) {\\n    if (max == null) {\\n      max = (min == null ? 1 : min);\\n      min = 0;\\n    }\\n    return (value >= min && value <= max) ? 1 / (max - min) : 0;\\n  }\\n\\n  function cumulativeUniform(value, min, max) {\\n    if (max == null) {\\n      max = (min == null ? 1 : min);\\n      min = 0;\\n    }\\n    return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\\n  }\\n\\n  function quantileUniform(p, min, max) {\\n    if (max == null) {\\n      max = (min == null ? 1 : min);\\n      min = 0;\\n    }\\n    return (p >= 0 && p <= 1) ? min + p * (max - min) : NaN;\\n  }\\n\\n  function uniform(min, max) {\\n    let a, b;\\n\\n    const dist = {\\n      min(_) {\\n        if (arguments.length) {\\n          a = _ || 0;\\n          return dist;\\n        } else {\\n          return a;\\n        }\\n      },\\n      max(_) {\\n        if (arguments.length) {\\n          b = _ == null ? 1 : _;\\n          return dist;\\n        } else {\\n          return b;\\n        }\\n      },\\n      sample: () => sampleUniform(a, b),\\n      pdf: value => densityUniform(value, a, b),\\n      cdf: value => cumulativeUniform(value, a, b),\\n      icdf: p => quantileUniform(p, a, b)\\n    };\\n\\n    if (max == null) {\\n      max = (min == null ? 1 : min);\\n      min = 0;\\n    }\\n    return dist.min(min).max(max);\\n  }\\n\\n  // Ordinary Least Squares\\n  function ols(uX, uY, uXY, uX2) {\\n    const delta = uX2 - uX * uX,\\n          slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\\n          intercept = uY - slope * uX;\\n\\n    return [intercept, slope];\\n  }\\n\\n  function points(data, x, y, sort) {\\n    data = data.filter(d => {\\n      let u = x(d), v = y(d);\\n      return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\\n    });\\n\\n    if (sort) {\\n      data.sort((a, b) => x(a) - x(b));\\n    }\\n\\n    const n = data.length,\\n          X = new Float64Array(n),\\n          Y = new Float64Array(n);\\n\\n    // extract values, calculate means\\n    let i = 0, ux = 0, uy = 0, xv, yv, d;\\n    for (d of data) {\\n      X[i] = xv = +x(d);\\n      Y[i] = yv = +y(d);\\n      ++i;\\n      ux += (xv - ux) / i;\\n      uy += (yv - uy) / i;\\n    }\\n\\n    // mean center the data\\n    for (i=0; i<n; ++i) {\\n      X[i] -= ux;\\n      Y[i] -= uy;\\n    }\\n\\n    return [X, Y, ux, uy];\\n  }\\n\\n  function visitPoints(data, x, y, callback) {\\n    let i = -1, u, v;\\n\\n    for (const d of data) {\\n      u = x(d);\\n      v = y(d);\\n      if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\\n        callback(u, v, ++i);\\n      }\\n    }\\n  }\\n\\n  // Adapted from d3-regression by Harry Stevens\\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\\n  function rSquared(data, x, y, uY, predict) {\\n    let SSE = 0, SST = 0;\\n\\n    visitPoints(data, x, y, (dx, dy) => {\\n      const sse = dy - predict(dx),\\n            sst = dy - uY;\\n\\n      SSE += sse * sse;\\n      SST += sst * sst;\\n    });\\n\\n    return 1 - SSE / SST;\\n  }\\n\\n  // Adapted from d3-regression by Harry Stevens\\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\\n  function linear(data, x, y) {\\n    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\\n\\n    visitPoints(data, x, y, (dx, dy) => {\\n      ++n;\\n      X += (dx - X) / n;\\n      Y += (dy - Y) / n;\\n      XY += (dx * dy - XY) / n;\\n      X2 += (dx * dx - X2) / n;\\n    });\\n\\n    const coef = ols(X, Y, XY, X2),\\n          predict = x => coef[0] + coef[1] * x;\\n\\n    return {\\n      coef: coef,\\n      predict: predict,\\n      rSquared: rSquared(data, x, y, Y, predict)\\n    };\\n  }\\n\\n  // Adapted from d3-regression by Harry Stevens\\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\\n  function log(data, x, y) {\\n    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\\n\\n    visitPoints(data, x, y, (dx, dy) => {\\n      ++n;\\n      dx = Math.log(dx);\\n      X += (dx - X) / n;\\n      Y += (dy - Y) / n;\\n      XY += (dx * dy - XY) / n;\\n      X2 += (dx * dx - X2) / n;\\n    });\\n\\n    const coef = ols(X, Y, XY, X2),\\n          predict = x => coef[0] + coef[1] * Math.log(x);\\n\\n    return {\\n      coef: coef,\\n      predict: predict,\\n      rSquared: rSquared(data, x, y, Y, predict)\\n    };\\n  }\\n\\n  function exp(data, x, y) {\\n    // eslint-disable-next-line no-unused-vars\\n    const [xv, yv, ux, uy] = points(data, x, y);\\n    let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly, xy;\\n\\n    visitPoints(data, x, y, (_, dy) => {\\n      dx = xv[n++];\\n      ly = Math.log(dy);\\n      xy = dx * dy;\\n\\n      YL += (dy * ly - YL) / n;\\n      XY += (xy - XY) / n;\\n      XYL += (xy * ly - XYL) / n;\\n      X2Y += (dx * xy - X2Y) / n;\\n    });\\n\\n    const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\\n          predict = x => Math.exp(c0 + c1 * (x - ux));\\n\\n    return {\\n      coef: [Math.exp(c0 - c1 * ux), c1],\\n      predict: predict,\\n      rSquared: rSquared(data, x, y, uy, predict)\\n    };\\n  }\\n\\n  // Adapted from d3-regression by Harry Stevens\\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\\n  function pow(data, x, y) {\\n    let X = 0, Y = 0, XY = 0, X2 = 0, YS = 0, n = 0;\\n\\n    visitPoints(data, x, y, (dx, dy) => {\\n      const lx = Math.log(dx),\\n            ly = Math.log(dy);\\n      ++n;\\n      X += (lx - X) / n;\\n      Y += (ly - Y) / n;\\n      XY += (lx * ly - XY) / n;\\n      X2 += (lx * lx - X2) / n;\\n      YS += (dy - YS) / n;\\n    });\\n\\n    const coef = ols(X, Y, XY, X2),\\n          predict = x => coef[0] * Math.pow(x, coef[1]);\\n\\n    coef[0] = Math.exp(coef[0]);\\n\\n    return {\\n      coef: coef,\\n      predict: predict,\\n      rSquared: rSquared(data, x, y, YS, predict)\\n    };\\n  }\\n\\n  function quad(data, x, y) {\\n    const [xv, yv, ux, uy] = points(data, x, y),\\n          n = xv.length;\\n\\n    let X2 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0,\\n        i, dx, dy, x2;\\n\\n    for (i=0; i<n;) {\\n      dx = xv[i];\\n      dy = yv[i++];\\n      x2 = dx * dx;\\n      X2 += (x2 - X2) / i;\\n      X3 += (x2 * dx - X3) / i;\\n      X4 += (x2 * x2 - X4) / i;\\n      XY += (dx * dy - XY) / i;\\n      X2Y += (x2 * dy - X2Y) / i;\\n    }\\n\\n    const X2X2 = X4 - (X2 * X2),\\n          d = (X2 * X2X2 - X3 * X3),\\n          a = (X2Y * X2 - XY * X3) / d,\\n          b = (XY * X2X2 - X2Y * X3) / d,\\n          c = -a * X2,\\n          predict = x => {\\n            x = x - ux;\\n            return a * x * x + b * x + c + uy;\\n          };\\n\\n    // transform coefficients back from mean-centered space\\n    return {\\n      coef: [\\n        c - b * ux + a * ux * ux + uy,\\n        b - 2 * a * ux,\\n        a\\n      ],\\n      predict: predict,\\n      rSquared: rSquared(data, x, y, uy, predict)\\n    };\\n  }\\n\\n  // Adapted from d3-regression by Harry Stevens\\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\\n  // ... which was adapted from regression-js by Tom Alexander\\n  // Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\\n  // License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\\n  function poly(data, x, y, order) {\\n    // use more efficient methods for lower orders\\n    if (order === 1) return linear(data, x, y);\\n    if (order === 2) return quad(data, x, y);\\n\\n    const [xv, yv, ux, uy] = points(data, x, y),\\n          n = xv.length,\\n          lhs = [],\\n          rhs = [],\\n          k = order + 1;\\n\\n    let i, j, l, v, c;\\n\\n    for (i=0; i<k; ++i) {\\n      for (l=0, v=0; l<n; ++l) {\\n        v += Math.pow(xv[l], i) * yv[l];\\n      }\\n      lhs.push(v);\\n\\n      c = new Float64Array(k);\\n      for (j=0; j<k; ++j) {\\n        for (l=0, v=0; l<n; ++l) {\\n          v += Math.pow(xv[l], i + j);\\n        }\\n        c[j] = v;\\n      }\\n      rhs.push(c);\\n    }\\n    rhs.push(lhs);\\n\\n    const coef = gaussianElimination(rhs),\\n          predict = x => {\\n            x -= ux;\\n            let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\\n            for (i=3; i<k; ++i) y += coef[i] * Math.pow(x, i);\\n            return y;\\n          };\\n\\n    return {\\n      coef: uncenter(k, coef, -ux, uy),\\n      predict: predict,\\n      rSquared: rSquared(data, x, y, uy, predict)\\n    };\\n  }\\n\\n  function uncenter(k, a, x, y) {\\n    const z = Array(k);\\n    let i, j, v, c;\\n\\n    // initialize to zero\\n    for (i=0; i<k; ++i) z[i] = 0;\\n\\n    // polynomial expansion\\n    for (i=k-1; i>=0; --i) {\\n      v = a[i];\\n      c = 1;\\n      z[i] += v;\\n      for (j=1; j<=i; ++j) {\\n        c *= (i + 1 - j) / j; // binomial coefficent\\n        z[i-j] += v * Math.pow(x, j) * c;\\n      }\\n    }\\n\\n    // bias term\\n    z[0] += y;\\n\\n    return z;\\n  }\\n\\n  // Given an array for a two-dimensional matrix and the polynomial order,\\n  // solve A * x = b using Gaussian elimination.\\n  function gaussianElimination(matrix) {\\n    const n = matrix.length - 1,\\n          coef = [];\\n\\n    let i, j, k, r, t;\\n\\n    for (i = 0; i < n; ++i) {\\n      r = i; // max row\\n      for (j = i + 1; j < n; ++j) {\\n        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\\n          r = j;\\n        }\\n      }\\n\\n      for (k = i; k < n + 1; ++k) {\\n        t = matrix[k][i];\\n        matrix[k][i] = matrix[k][r];\\n        matrix[k][r] = t;\\n      }\\n\\n      for (j = i + 1; j < n; ++j) {\\n        for (k = n; k >= i; k--) {\\n          matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\\n        }\\n      }\\n    }\\n\\n    for (j = n - 1; j >= 0; --j) {\\n      t = 0;\\n      for (k = j + 1; k < n; ++k) {\\n        t += matrix[k][j] * coef[k];\\n      }\\n      coef[j] = (matrix[n][j] - t) / matrix[j][j];\\n    }\\n\\n    return coef;\\n  }\\n\\n  const maxiters = 2,\\n        epsilon = 1e-12;\\n\\n  // Adapted from science.js by Jason Davies\\n  // Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\\n  // License: https://github.com/jasondavies/science.js/blob/master/LICENSE\\n  function loess(data, x, y, bandwidth) {\\n    const [xv, yv, ux, uy] = points(data, x, y, true),\\n          n = xv.length,\\n          bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors\\n          yhat = new Float64Array(n),\\n          residuals = new Float64Array(n),\\n          robustWeights = new Float64Array(n).fill(1);\\n\\n    for (let iter = -1; ++iter <= maxiters; ) {\\n      const interval = [0, bw - 1];\\n\\n      for (let i = 0; i < n; ++i) {\\n        const dx = xv[i],\\n              i0 = interval[0],\\n              i1 = interval[1],\\n              edge = (dx - xv[i0]) > (xv[i1] - dx) ? i0 : i1;\\n\\n        let W = 0, X = 0, Y = 0, XY = 0, X2 = 0;\\n        const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\\n\\n        for (let k = i0; k <= i1; ++k) {\\n          const xk = xv[k],\\n                yk = yv[k],\\n                w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\\n                xkw = xk * w;\\n\\n          W += w;\\n          X += xkw;\\n          Y += yk * w;\\n          XY += yk * xkw;\\n          X2 += xk * xkw;\\n        }\\n\\n        // linear regression fit\\n        const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\\n        yhat[i] = a + b * dx;\\n        residuals[i] = Math.abs(yv[i] - yhat[i]);\\n\\n        updateInterval(xv, i + 1, interval);\\n      }\\n\\n      if (iter === maxiters) {\\n        break;\\n      }\\n\\n      const medianResidual = d3Array.median(residuals);\\n      if (Math.abs(medianResidual) < epsilon) break;\\n\\n      for (let i = 0, arg, w; i < n; ++i){\\n        arg = residuals[i] / (6 * medianResidual);\\n        // default to epsilon (rather than zero) for large deviations\\n        // keeping weights tiny but non-zero prevents singularites\\n        robustWeights[i] = (arg >= 1) ? epsilon : ((w = 1 - arg * arg) * w);\\n      }\\n    }\\n\\n    return output(xv, yhat, ux, uy);\\n  }\\n\\n  // weighting kernel for local regression\\n  function tricube(x) {\\n    return (x = 1 - x * x * x) * x * x;\\n  }\\n\\n  // advance sliding window interval of nearest neighbors\\n  function updateInterval(xv, i, interval) {\\n    const val = xv[i];\\n    let left = interval[0],\\n        right = interval[1] + 1;\\n\\n    if (right >= xv.length) return;\\n\\n    // step right if distance to new right edge is <= distance to old left edge\\n    // step when distance is equal to ensure movement over duplicate x values\\n    while (i > left && (xv[right] - val) <= (val - xv[left])) {\\n      interval[0] = ++left;\\n      interval[1] = right;\\n      ++right;\\n    }\\n  }\\n\\n  // generate smoothed output points\\n  // average points with repeated x values\\n  function output(xv, yhat, ux, uy) {\\n    const n = xv.length, out = [];\\n    let i = 0, cnt = 0, prev = [], v;\\n\\n    for (; i<n; ++i) {\\n      v = xv[i] + ux;\\n      if (prev[0] === v) {\\n        // average output values via online update\\n        prev[1] += (yhat[i] - prev[1]) / (++cnt);\\n      } else {\\n        // add new output point\\n        cnt = 0;\\n        prev[1] += uy;\\n        prev = [v, yhat[i]];\\n        out.push(prev);\\n      }\\n    }\\n    prev[1] += uy;\\n\\n    return out;\\n  }\\n\\n  // subdivide up to accuracy of 0.1 degrees\\n  const MIN_RADIANS = 0.1 * Math.PI / 180;\\n\\n  // Adaptively sample an interpolated function over a domain extent\\n  function sampleCurve(f, extent, minSteps, maxSteps) {\\n    minSteps = minSteps || 25;\\n    maxSteps = Math.max(minSteps, maxSteps || 200);\\n\\n    const point = x => [x, f(x)],\\n          minX = extent[0],\\n          maxX = extent[1],\\n          span = maxX - minX,\\n          stop = span / maxSteps,\\n          prev = [point(minX)],\\n          next = [];\\n\\n    if (minSteps === maxSteps) {\\n      // no adaptation, sample uniform grid directly and return\\n      for (let i = 1; i < maxSteps; ++i) {\\n        prev.push(point(minX + (i / minSteps) * span));\\n      }\\n      prev.push(point(maxX));\\n      return prev;\\n    } else {\\n      // sample minimum points on uniform grid\\n      // then move on to perform adaptive refinement\\n      next.push(point(maxX));\\n      for (let i = minSteps; --i > 0;) {\\n        next.push(point(minX + (i / minSteps) * span));\\n      }\\n    }\\n\\n    let p0 = prev[0],\\n        p1 = next[next.length - 1];\\n\\n    while (p1) {\\n      // midpoint for potential curve subdivision\\n      const pm = point((p0[0] + p1[0]) / 2);\\n\\n      if (pm[0] - p0[0] >= stop && angleDelta(p0, pm, p1) > MIN_RADIANS) {\\n        // maximum resolution has not yet been met, and\\n        // subdivision midpoint sufficiently different from endpoint\\n        // save subdivision, push midpoint onto the visitation stack\\n        next.push(pm);\\n      } else {\\n        // subdivision midpoint sufficiently similar to endpoint\\n        // skip subdivision, store endpoint, move to next point on the stack\\n        p0 = p1;\\n        prev.push(p1);\\n        next.pop();\\n      }\\n      p1 = next[next.length - 1];\\n    }\\n\\n    return prev;\\n  }\\n\\n  function angleDelta(p, q, r) {\\n    const a0 = Math.atan2(r[1] - p[1], r[0] - p[0]),\\n          a1 = Math.atan2(q[1] - p[1], q[0] - p[0]);\\n    return Math.abs(a0 - a1);\\n  }\\n\\n  exports.bandwidthNRD = estimateBandwidth;\\n  exports.bin = bin;\\n  exports.bootstrapCI = bootstrapCI;\\n  exports.cumulativeLogNormal = cumulativeLogNormal;\\n  exports.cumulativeNormal = cumulativeNormal;\\n  exports.cumulativeUniform = cumulativeUniform;\\n  exports.densityLogNormal = densityLogNormal;\\n  exports.densityNormal = densityNormal;\\n  exports.densityUniform = densityUniform;\\n  exports.dotbin = dotbin;\\n  exports.quantileLogNormal = quantileLogNormal;\\n  exports.quantileNormal = quantileNormal;\\n  exports.quantileUniform = quantileUniform;\\n  exports.quantiles = quantiles;\\n  exports.quartiles = quartiles;\\n  exports.randomInteger = integer;\\n  exports.randomKDE = kde;\\n  exports.randomLCG = lcg;\\n  exports.randomLogNormal = lognormal;\\n  exports.randomMixture = mixture;\\n  exports.randomNormal = gaussian;\\n  exports.randomUniform = uniform;\\n  exports.regressionExp = exp;\\n  exports.regressionLinear = linear;\\n  exports.regressionLoess = loess;\\n  exports.regressionLog = log;\\n  exports.regressionPoly = poly;\\n  exports.regressionPow = pow;\\n  exports.regressionQuad = quad;\\n  exports.sampleCurve = sampleCurve;\\n  exports.sampleLogNormal = sampleLogNormal;\\n  exports.sampleNormal = sampleNormal;\\n  exports.sampleUniform = sampleUniform;\\n  exports.setRandom = setRandom;\\n\\n  Object.defineProperty(exports, '__esModule', { value: true });\\n\\n})));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"globalThis\",\"self\",\"vega\",\"d3\",\"d3Array\",\"numbers\",\"values\",\"valueof\",\"index\",\"value\",\"quantiles\",\"array\",\"p\",\"f\",\"Float64Array\",\"from\",\"sort\",\"ascending\",\"map\",\"_\",\"quantileSorted\",\"quartiles\",\"estimateBandwidth\",\"n\",\"length\",\"d\",\"deviation\",\"q\",\"Math\",\"min\",\"abs\",\"pow\",\"smoothing\",\"v\",\"thresh\",\"a\",\"b\",\"c\",\"sampleNormal\",\"mean\",\"stdev\",\"nextSample\",\"x\",\"NaN\",\"random\",\"y\",\"rds\",\"sqrt\",\"log\",\"densityNormal\",\"z\",\"exp\",\"SQRT2PI\",\"cumulativeNormal\",\"Z\",\"cd\",\"quantileNormal\",\"w\",\"Number\",\"isFinite\",\"Infinity\",\"SQRT2\",\"gaussian\",\"mu\",\"sigma\",\"dist\",\"arguments\",\"sample\",\"pdf\",\"cdf\",\"icdf\",\"sampleLogNormal\",\"densityLogNormal\",\"cumulativeLogNormal\",\"quantileLogNormal\",\"sampleUniform\",\"max\",\"densityUniform\",\"cumulativeUniform\",\"quantileUniform\",\"ols\",\"uX\",\"uY\",\"uXY\",\"uX2\",\"delta\",\"slope\",\"points\",\"data\",\"filter\",\"u\",\"X\",\"Y\",\"i\",\"ux\",\"uy\",\"xv\",\"yv\",\"visitPoints\",\"callback\",\"rSquared\",\"predict\",\"SSE\",\"SST\",\"dx\",\"dy\",\"sse\",\"sst\",\"linear\",\"XY\",\"X2\",\"coef\",\"quad\",\"X3\",\"X4\",\"X2Y\",\"x2\",\"X2X2\",\"uncenter\",\"k\",\"Array\",\"j\",\"gaussianElimination\",\"matrix\",\"r\",\"t\",\"PI\",\"MIN_RADIANS\",\"bandwidthNRD\",\"bin\",\"maxb\",\"maxbins\",\"base\",\"logb\",\"div\",\"divide\",\"extent\",\"span\",\"step\",\"steps\",\"level\",\"ceil\",\"minstep\",\"round\",\"eps\",\"precision\",\"nice\",\"undefined\",\"floor\",\"start\",\"stop\",\"bootstrapCI\",\"samples\",\"alpha\",\"quantile\",\"dotbin\",\"smooth\",\"randomInteger\",\"integer\",\"randomKDE\",\"kde\",\"support\",\"bandwidth\",\"kernel\",\"Error\",\"randomLCG\",\"lcg\",\"seed\",\"randomLogNormal\",\"lognormal\",\"randomMixture\",\"mixture\",\"dists\",\"weights\",\"m\",\"sum\",\"distributions\",\"randomNormal\",\"randomUniform\",\"uniform\",\"regressionExp\",\"YL\",\"XYL\",\"ly\",\"xy\",\"c0\",\"c1\",\"regressionLinear\",\"regressionLoess\",\"loess\",\"bw\",\"yhat\",\"residuals\",\"robustWeights\",\"fill\",\"iter\",\"maxiters\",\"interval\",\"i0\",\"i1\",\"W\",\"denom\",\"edge\",\"xk\",\"yk\",\"xkw\",\"val\",\"left\",\"right\",\"medianResidual\",\"median\",\"epsilon\",\"arg\",\"out\",\"cnt\",\"prev\",\"push\",\"regressionLog\",\"regressionPoly\",\"poly\",\"order\",\"lhs\",\"rhs\",\"l\",\"regressionPow\",\"YS\",\"lx\",\"regressionQuad\",\"sampleCurve\",\"minSteps\",\"maxSteps\",\"point\",\"minX\",\"maxX\",\"next\",\"p0\",\"p1\",\"pm\",\"a0\",\"atan2\",\"a1\",\"pop\",\"setRandom\",\"Object\",\"defineProperty\"]\n}\n"]