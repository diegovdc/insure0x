["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/d3-array/dist/d3-array.js"],"~:js","shadow$provide.module$node_modules$d3_array$dist$d3_array=function(global$jscomp$0,require,module,exports$jscomp$0){(function(global,factory){\"object\"===typeof exports$jscomp$0&&\"undefined\"!==typeof module?factory(exports$jscomp$0):\"function\"===typeof define&&define.amd?define([\"exports\"],factory):(global=\"undefined\"!==typeof globalThis?globalThis:global||self,factory(global.d3=global.d3||{}))})(this,function(exports){function ascending(a,b){return a<b?-1:a>b?1:a>=b?0:NaN}function bisector(f){function left(a,\nx,lo,hi){null==lo&&(lo=0);null==hi&&(hi=a.length);for(;lo<hi;){var mid=lo+hi>>>1;0>compare(a[mid],x)?lo=mid+1:hi=mid}return lo}var delta=f,compare=f;1===f.length&&(delta=function(d,x){return f(d)-x},compare=ascendingComparator(f));return{left:left,center:function(a,x,lo,hi){null==lo&&(lo=0);null==hi&&(hi=a.length);hi=left(a,x,lo,hi-1);return hi>lo&&delta(a[hi-1],x)>-delta(a[hi],x)?hi-1:hi},right:function(a,x,lo,hi){null==lo&&(lo=0);null==hi&&(hi=a.length);for(;lo<hi;){var mid=lo+hi>>>1;0<compare(a[mid],\nx)?hi=mid:lo=mid+1}return lo}}}function ascendingComparator(f){return function(d,x){return ascending(f(d),x)}}function number(x){return null===x?NaN:+x}function numbers(values,valueof){var index$276,$jscomp$iter$53,$jscomp$key$value,value$277,$jscomp$iter$52,value;return $jscomp.generator.createGenerator(numbers,function($jscomp$generator$context){switch($jscomp$generator$context.nextAddress){case 1:if(void 0===valueof){$jscomp$generator$context.jumpTo(2);break}index$276=-1;$jscomp$iter$53=$jscomp.makeIterator(values);\n$jscomp$key$value=$jscomp$iter$53.next();case 4:if($jscomp$key$value.done){$jscomp$generator$context.jumpTo(0);break}value$277=$jscomp$key$value.value;if(!(null!=(value$277=valueof(value$277,++index$276,values))&&(value$277=+value$277)>=value$277)){$jscomp$generator$context.jumpTo(5);break}return $jscomp$generator$context.yield(value$277,5);case 5:$jscomp$key$value=$jscomp$iter$53.next();$jscomp$generator$context.jumpTo(4);break;case 2:$jscomp$iter$52=$jscomp.makeIterator(values),$jscomp$key$value=\n$jscomp$iter$52.next();case 9:if($jscomp$key$value.done){$jscomp$generator$context.jumpTo(0);break}value=$jscomp$key$value.value;if(!(null!=value&&(value=+value)>=value)){$jscomp$generator$context.jumpTo(10);break}return $jscomp$generator$context.yield(value,10);case 10:$jscomp$key$value=$jscomp$iter$52.next(),$jscomp$generator$context.jumpTo(9)}})}function count$jscomp$0(values,valueof){var count=0;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=\nvalues.next())valueof=$jscomp$key$value.value,null!=valueof&&(valueof=+valueof)>=valueof&&++count}else{var index$278=-1,$jscomp$iter$55=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$55.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$55.next())$jscomp$key$value=$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,++index$278,values))&&($jscomp$key$value=+$jscomp$key$value)>=$jscomp$key$value&&++count}return count}function length$jscomp$0(array){return array.length|\n0}function empty(length){return!(0<length)}function arrayify(values){return\"object\"!==typeof values||\"length\"in values?values:Array.from(values)}function reducer(reduce){return function(values){return reduce.apply(null,$jscomp.arrayFromIterable(values))}}function variance(values,valueof){var count=0,delta,mean=0,sum=0;if(void 0===valueof)for(values=$jscomp.makeIterator(values),delta=values.next();!delta.done;delta=values.next())valueof=delta.value,null!=valueof&&(valueof=+valueof)>=valueof&&(delta=\nvalueof-mean,mean+=delta/++count,sum+=delta*(valueof-mean));else{var index$282=-1,$jscomp$iter$57=$jscomp.makeIterator(values);for(delta=$jscomp$iter$57.next();!delta.done;delta=$jscomp$iter$57.next()){var value$283=delta.value;null!=(value$283=valueof(value$283,++index$282,values))&&(value$283=+value$283)>=value$283&&(delta=value$283-mean,mean+=delta/++count,sum+=delta*(value$283-mean))}}if(1<count)return sum/(count-1)}function deviation(values,valueof){return(values=variance(values,valueof))?Math.sqrt(values):\nvalues}function extent(values,valueof){var min,max;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())valueof=$jscomp$key$value.value,null!=valueof&&(void 0===min?valueof>=valueof&&(min=max=valueof):(min>valueof&&(min=valueof),max<valueof&&(max=valueof)))}else{var index$284=-1,$jscomp$iter$59=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$59.next();!$jscomp$key$value.done;$jscomp$key$value=\n$jscomp$iter$59.next())$jscomp$key$value=$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,++index$284,values))&&(void 0===min?$jscomp$key$value>=$jscomp$key$value&&(min=max=$jscomp$key$value):(min>$jscomp$key$value&&(min=$jscomp$key$value),max<$jscomp$key$value&&(max=$jscomp$key$value)))}return[min,max]}function identity(x){return x}function unique(values){if(1!==values.length)throw Error(\"duplicate key\");return values[0]}function nest(values$jscomp$0,map,reduce,keys){return function regroup(values,\ni){if(i>=keys.length)return reduce(values);for(var groups=new Map,keyof=keys[i++],index=-1,$jscomp$iter$62=$jscomp.makeIterator(values),$jscomp$key$value=$jscomp$iter$62.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$62.next()){$jscomp$key$value=$jscomp$key$value.value;var key=keyof($jscomp$key$value,++index,values),group$294=groups.get(key);group$294?group$294.push($jscomp$key$value):groups.set(key,[$jscomp$key$value])}values=$jscomp.makeIterator(groups);for(keyof=values.next();!keyof.done;keyof=\nvalues.next())index=$jscomp.makeIterator(keyof.value),keyof=index.next().value,index=index.next().value,groups.set(keyof,regroup(index,i));return map(groups)}(values$jscomp$0,0)}function constant(x){return function(){return x}}function ticks(start,stop,count){var reverse,i=-1,step;stop=+stop;start=+start;count=+count;if(start===stop&&0<count)return[start];if(reverse=stop<start){var n=start;start=stop;stop=n}if(0===(step=tickIncrement(start,stop,count))||!isFinite(step))return[];if(0<step)for(start=\nMath.ceil(start/step),stop=Math.floor(stop/step),stop=Array(n=Math.ceil(stop-start+1));++i<n;)stop[i]=(start+i)*step;else for(step=-step,start=Math.ceil(start*step),stop=Math.floor(stop*step),stop=Array(n=Math.ceil(stop-start+1));++i<n;)stop[i]=(start+i)/step;reverse&&stop.reverse();return stop}function tickIncrement(start,stop,count){stop=(stop-start)/Math.max(0,count);start=Math.floor(Math.log(stop)/Math.LN10);stop/=Math.pow(10,start);return 0<=start?(stop>=e10?10:stop>=e5?5:stop>=e2?2:1)*Math.pow(10,\nstart):-Math.pow(10,-start)/(stop>=e10?10:stop>=e5?5:stop>=e2?2:1)}function sturges(values){return Math.ceil(Math.log(count$jscomp$0(values))/Math.LN2)+1}function bin(){function histogram(data){Array.isArray(data)||(data=Array.from(data));var i,n=data.length,values=Array(n);for(i=0;i<n;++i)values[i]=value(data[i],i,data);i=domain(values);var x0=i[0],x1=i[1],tz=threshold(values,x0,x1);Array.isArray(tz)||(tz=ticks(x0,x1,tz),tz[tz.length-1]===x1&&tz.pop());for(var m=tz.length;tz[0]<=x0;)tz.shift(),--m;\nfor(;tz[m-1]>x1;)tz.pop(),--m;var bins=Array(m+1);for(i=0;i<=m;++i){var x=bins[i]=[];x.x0=0<i?tz[i-1]:x0;x.x1=i<m?tz[i]:x1}for(i=0;i<n;++i)x=values[i],x0<=x&&x<=x1&&bins[bisectRight(tz,x,0,m)].push(data[i]);return bins}var value=identity,domain=extent,threshold=sturges;histogram.value=function(_){return arguments.length?(value=\"function\"===typeof _?_:constant(_),histogram):value};histogram.domain=function(_){return arguments.length?(domain=\"function\"===typeof _?_:constant([_[0],_[1]]),histogram):\ndomain};histogram.thresholds=function(_){return arguments.length?(threshold=\"function\"===typeof _?_:Array.isArray(_)?constant(slice.call(_)):constant(_),histogram):threshold};return histogram}function max$jscomp$0(values,valueof){var max;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())valueof=$jscomp$key$value.value,null!=valueof&&(max<valueof||void 0===max&&valueof>=valueof)&&(max=valueof)}else{var index$297=\n-1,$jscomp$iter$65=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$65.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$65.next())$jscomp$key$value=$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,++index$297,values))&&(max<$jscomp$key$value||void 0===max&&$jscomp$key$value>=$jscomp$key$value)&&(max=$jscomp$key$value)}return max}function min$jscomp$0(values,valueof){var min;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=\nvalues.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())valueof=$jscomp$key$value.value,null!=valueof&&(min>valueof||void 0===min&&valueof>=valueof)&&(min=valueof)}else{var index$299=-1,$jscomp$iter$67=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$67.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$67.next())$jscomp$key$value=$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,++index$299,values))&&(min>$jscomp$key$value||void 0===\nmin&&$jscomp$key$value>=$jscomp$key$value)&&(min=$jscomp$key$value)}return min}function quickselect(array,k,left,right,compare){left=void 0===left?0:left;right=void 0===right?array.length-1:right;for(compare=void 0===compare?ascending:compare;right>left;){if(600<right-left){var n=right-left+1,m=k-left+1,z=Math.log(n),s=.5*Math.exp(2*z/3);z=.5*Math.sqrt(z*s*(n-s)/n)*(0>m-n/2?-1:1);quickselect(array,k,Math.max(left,Math.floor(k-m*s/n+z)),Math.min(right,Math.floor(k+(n-m)*s/n+z)),compare)}n=array[k];\nm=left;s=right;swap(array,left,k);for(0<compare(array[right],n)&&swap(array,left,right);m<s;){swap(array,m,s);++m;for(--s;0>compare(array[m],n);)++m;for(;0<compare(array[s],n);)--s}0===compare(array[left],n)?swap(array,left,s):(++s,swap(array,s,right));s<=k&&(left=s+1);k<=s&&(right=s-1)}return array}function swap(array,i,j){var t=array[i];array[i]=array[j];array[j]=t}function quantile(values,p,valueof){values=Float64Array.from(numbers(values,valueof));if(valueof=values.length){if(0>=(p=+p)||2>valueof)return min$jscomp$0(values);\nif(1<=p)return max$jscomp$0(values);p*=valueof-1;valueof=Math.floor(p);var value0=max$jscomp$0(quickselect(values,valueof).subarray(0,valueof+1));values=min$jscomp$0(values.subarray(valueof+1));return value0+(values-value0)*(p-valueof)}}function maxIndex(values,valueof){var maxIndex=-1,index=-1;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())if(valueof=$jscomp$key$value.value,++index,null!=valueof&&\n(max<valueof||void 0===max&&valueof>=valueof)){var max=valueof;maxIndex=index}}else{var $jscomp$iter$69=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$69.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$69.next())$jscomp$key$value=$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,++index,values))&&(max<$jscomp$key$value||void 0===max&&$jscomp$key$value>=$jscomp$key$value)&&(max=$jscomp$key$value,maxIndex=index)}return maxIndex}function flatten(arrays){var $jscomp$iter$72,\n$jscomp$key$array,array$304;return $jscomp.generator.createGenerator(flatten,function($jscomp$generator$context){1==$jscomp$generator$context.nextAddress&&($jscomp$iter$72=$jscomp.makeIterator(arrays),$jscomp$key$array=$jscomp$iter$72.next());if(3!=$jscomp$generator$context.nextAddress){if($jscomp$key$array.done)return $jscomp$generator$context.jumpTo(0);array$304=$jscomp$key$array.value;return $jscomp$generator$context.yieldAll(array$304,3)}$jscomp$key$array=$jscomp$iter$72.next();return $jscomp$generator$context.jumpTo(2)})}\nfunction minIndex(values,valueof){var minIndex=-1,index=-1;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())if(valueof=$jscomp$key$value.value,++index,null!=valueof&&(min>valueof||void 0===min&&valueof>=valueof)){var min=valueof;minIndex=index}}else{var $jscomp$iter$74=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$74.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$74.next())$jscomp$key$value=\n$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,++index,values))&&(min>$jscomp$key$value||void 0===min&&$jscomp$key$value>=$jscomp$key$value)&&(min=$jscomp$key$value,minIndex=index)}return minIndex}function pair(a,b){return[a,b]}function leastIndex(values,compare){compare=void 0===compare?ascending:compare;if(1===compare.length)return minIndex(values,compare);var min=-1,index=-1;values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=\nvalues.next())if($jscomp$key$value=$jscomp$key$value.value,++index,0>min?0===compare($jscomp$key$value,$jscomp$key$value):0>compare($jscomp$key$value,minValue)){var minValue=$jscomp$key$value;min=index}return min}function shuffler(random){return function(array,i0,i1){i0=void 0===i0?0:i0;i1=void 0===i1?array.length:i1;for(i1-=i0=+i0;i1;){var i=random()*i1--|0,t=array[i1+i0];array[i1+i0]=array[i+i0];array[i+i0]=t}return array}}function transpose$jscomp$0(matrix){if(!(n=matrix.length))return[];for(var i=\n-1,m=min$jscomp$0(matrix,length$1),transpose=Array(m);++i<m;)for(var j=-1,n,row=transpose[i]=Array(n);++j<n;)row[j]=matrix[j][i];return transpose}function length$1(d){return d.length}var ascendingBisect=bisector(ascending),bisectRight=ascendingBisect.right;ascendingBisect=ascendingBisect.left;var bisectCenter=bisector(number).center,Adder=function(){this._partials=new Float64Array(32);this._n=0};Adder.prototype.add=function(x){for(var p=this._partials,i=0,j=0;j<this._n&&32>j;j++){var y=p[j],hi=x+\ny;(x=Math.abs(x)<Math.abs(y)?x-(hi-y):y-(hi-x))&&(p[i++]=x);x=hi}p[i]=x;this._n=i+1;return this};Adder.prototype.valueOf=function(){var p=this._partials,n=this._n,hi=0;if(0<n){for(hi=p[--n];0<n;){var x=hi;var y=p[--n];hi=x+y;if(x=y-(hi-x))break}0<n&&(0>x&&0>p[n-1]||0<x&&0<p[n-1])&&(y=2*x,x=hi+y,y==x-hi&&(hi=x))}return hi};var slice=Array.prototype.slice,e10=Math.sqrt(50),e5=Math.sqrt(10),e2=Math.sqrt(2),shuffle=shuffler(Math.random);exports.Adder=Adder;exports.ascending=ascending;exports.bin=bin;\nexports.bisect=bisectRight;exports.bisectCenter=bisectCenter;exports.bisectLeft=ascendingBisect;exports.bisectRight=bisectRight;exports.bisector=bisector;exports.count=count$jscomp$0;exports.cross=function(values){for(var $jscomp$restParams=[],$jscomp$restIndex=0;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-0]=arguments[$jscomp$restIndex];var values$280=$jscomp$restParams;$jscomp$restParams=\"function\"===typeof values$280[values$280.length-1]&&reducer(values$280.pop());\nvalues$280=values$280.map(arrayify);$jscomp$restIndex=values$280.map(length$jscomp$0);var j$jscomp$0=values$280.length-1,index$281=Array(j$jscomp$0+1).fill(0),product=[];if(0>j$jscomp$0||$jscomp$restIndex.some(empty))return product;for(;;){product.push(index$281.map(function(j,i){return values$280[i][j]}));for(var i$jscomp$0=j$jscomp$0;++index$281[i$jscomp$0]===$jscomp$restIndex[i$jscomp$0];){if(0===i$jscomp$0)return $jscomp$restParams?product.map($jscomp$restParams):product;index$281[i$jscomp$0--]=\n0}}};exports.cumsum=function(values,valueof){var sum=0,index=0;return Float64Array.from(values,void 0===valueof?function(v){return sum+=+v||0}:function(v){return sum+=+valueof(v,index++,values)||0})};exports.descending=function(a,b){return b<a?-1:b>a?1:b>=a?0:NaN};exports.deviation=deviation;exports.extent=extent;exports.fsum=function(values,valueof){var adder=new Adder;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=\nvalues.next())valueof=$jscomp$key$value.value,(valueof=+valueof)&&adder.add(valueof)}else{var index$286=-1,$jscomp$iter$61=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$61.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$61.next())$jscomp$key$value=$jscomp$key$value.value,($jscomp$key$value=+valueof($jscomp$key$value,++index$286,values))&&adder.add($jscomp$key$value)}return+adder};exports.greatest=function(values,compare){compare=void 0===compare?ascending:compare;var defined=\n!1;if(1===compare.length){values=$jscomp.makeIterator(values);for(var $jscomp$key$element=values.next();!$jscomp$key$element.done;$jscomp$key$element=values.next()){$jscomp$key$element=$jscomp$key$element.value;var value=compare($jscomp$key$element);if(defined?0<ascending(value,maxValue):0===ascending(value,value)){var max=$jscomp$key$element;var maxValue=value;defined=!0}}}else for(maxValue=$jscomp.makeIterator(values),values=maxValue.next();!values.done;values=maxValue.next())if(values=values.value,\ndefined?0<compare(values,max):0===compare(values,values))max=values,defined=!0;return max};exports.greatestIndex=function(values,compare){compare=void 0===compare?ascending:compare;if(1===compare.length)return maxIndex(values,compare);var max=-1,index=-1;values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())if($jscomp$key$value=$jscomp$key$value.value,++index,0>max?0===compare($jscomp$key$value,$jscomp$key$value):0<compare($jscomp$key$value,\nmaxValue)){var maxValue=$jscomp$key$value;max=index}return max};exports.group=function(values,keys){for(var $jscomp$restParams=[],$jscomp$restIndex=1;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-1]=arguments[$jscomp$restIndex];return nest(values,identity,identity,$jscomp$restParams)};exports.groups=function(values,keys){for(var $jscomp$restParams=[],$jscomp$restIndex=1;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-\n1]=arguments[$jscomp$restIndex];return nest(values,Array.from,identity,$jscomp$restParams)};exports.histogram=bin;exports.index=function(values,keys){for(var $jscomp$restParams=[],$jscomp$restIndex=1;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-1]=arguments[$jscomp$restIndex];return nest(values,identity,unique,$jscomp$restParams)};exports.indexes=function(values,keys){for(var $jscomp$restParams=[],$jscomp$restIndex=1;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-\n1]=arguments[$jscomp$restIndex];return nest(values,Array.from,unique,$jscomp$restParams)};exports.least=function(values,compare){compare=void 0===compare?ascending:compare;var defined=!1;if(1===compare.length){values=$jscomp.makeIterator(values);for(var $jscomp$key$element=values.next();!$jscomp$key$element.done;$jscomp$key$element=values.next()){$jscomp$key$element=$jscomp$key$element.value;var value=compare($jscomp$key$element);if(defined?0>ascending(value,minValue):0===ascending(value,value)){var min=\n$jscomp$key$element;var minValue=value;defined=!0}}}else for(minValue=$jscomp.makeIterator(values),values=minValue.next();!values.done;values=minValue.next())if(values=values.value,defined?0>compare(values,min):0===compare(values,values))min=values,defined=!0;return min};exports.leastIndex=leastIndex;exports.max=max$jscomp$0;exports.maxIndex=maxIndex;exports.mean=function(values,valueof){var count=0,sum=0;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=\nvalues.next())valueof=$jscomp$key$value.value,null!=valueof&&(valueof=+valueof)>=valueof&&(++count,sum+=valueof)}else{var index$302=-1,$jscomp$iter$71=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$71.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$71.next())$jscomp$key$value=$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,++index$302,values))&&($jscomp$key$value=+$jscomp$key$value)>=$jscomp$key$value&&(++count,sum+=$jscomp$key$value)}if(count)return sum/\ncount};exports.median=function(values,valueof){return quantile(values,.5,valueof)};exports.merge=function(arrays){return Array.from(flatten(arrays))};exports.min=min$jscomp$0;exports.minIndex=minIndex;exports.pairs=function(values,pairof){pairof=void 0===pairof?pair:pairof;var pairs=[],first=!1;values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next()){$jscomp$key$value=$jscomp$key$value.value;first&&pairs.push(pairof(previous,\n$jscomp$key$value));var previous=$jscomp$key$value;first=!0}return pairs};exports.permute=function(source,keys){return Array.from(keys,function(key){return source[key]})};exports.quantile=quantile;exports.quantileSorted=function(values,p,valueof){valueof=void 0===valueof?number:valueof;if(n=values.length){if(0>=(p=+p)||2>n)return+valueof(values[0],0,values);if(1<=p)return+valueof(values[n-1],n-1,values);var n;p*=n-1;n=Math.floor(p);var value0=+valueof(values[n],n,values);values=+valueof(values[n+\n1],n+1,values);return value0+(values-value0)*(p-n)}};exports.quickselect=quickselect;exports.range=function(start,stop,step){start=+start;stop=+stop;step=2>(n=arguments.length)?(stop=start,start=0,1):3>n?1:+step;for(var i=-1,n=Math.max(0,Math.ceil((stop-start)/step))|0,range=Array(n);++i<n;)range[i]=start+i*step;return range};exports.rollup=function(values,reduce,keys){for(var $jscomp$restParams=[],$jscomp$restIndex=2;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-\n2]=arguments[$jscomp$restIndex];return nest(values,identity,reduce,$jscomp$restParams)};exports.rollups=function(values,reduce,keys){for(var $jscomp$restParams=[],$jscomp$restIndex=2;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-2]=arguments[$jscomp$restIndex];return nest(values,Array.from,reduce,$jscomp$restParams)};exports.scan=function(values,compare){values=leastIndex(values,compare);return 0>values?void 0:values};exports.shuffle=shuffle;exports.shuffler=\nshuffler;exports.sum=function(values,valueof){var sum=0;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())if(valueof=$jscomp$key$value.value,valueof=+valueof)sum+=valueof}else{var index$308=-1,$jscomp$iter$83=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$83.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$83.next())if($jscomp$key$value=$jscomp$key$value.value,$jscomp$key$value=\n+valueof($jscomp$key$value,++index$308,values))sum+=$jscomp$key$value}return sum};exports.thresholdFreedmanDiaconis=function(values,min,max){return Math.ceil((max-min)/(2*(quantile(values,.75)-quantile(values,.25))*Math.pow(count$jscomp$0(values),-1/3)))};exports.thresholdScott=function(values,min,max){return Math.ceil((max-min)/(3.5*deviation(values)*Math.pow(count$jscomp$0(values),-1/3)))};exports.thresholdSturges=sturges;exports.tickIncrement=tickIncrement;exports.tickStep=function(start,stop,\ncount){var step0=Math.abs(stop-start)/Math.max(0,count);count=Math.pow(10,Math.floor(Math.log(step0)/Math.LN10));step0/=count;step0>=e10?count*=10:step0>=e5?count*=5:step0>=e2&&(count*=2);return stop<start?-count:count};exports.ticks=ticks;exports.transpose=transpose$jscomp$0;exports.variance=variance;exports.zip=function(){return transpose$jscomp$0(arguments)};Object.defineProperty(exports,\"__esModule\",{value:!0})})}","~:source","shadow$provide[\"module$node_modules$d3_array$dist$d3_array\"] = function(global,require,module,exports) {\n// https://d3js.org/d3-array/ v2.7.1 Copyright 2020 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || {}));\n}(this, (function (exports) { 'use strict';\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\nfunction bisector(f) {\n  let delta = f;\n  let compare = f;\n\n  if (f.length === 1) {\n    delta = (d, x) => f(d) - x;\n    compare = ascendingComparator(f);\n  }\n\n  function left(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) < 0) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  function right(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) > 0) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  function center(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction ascendingComparator(f) {\n  return (d, x) => ascending(f(d), x);\n}\n\nfunction number(x) {\n  return x === null ? NaN : +x;\n}\n\nfunction* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n\nconst ascendingBisect = bisector(ascending);\nconst bisectRight = ascendingBisect.right;\nconst bisectLeft = ascendingBisect.left;\nconst bisectCenter = bisector(number).center;\n\nfunction count(values, valueof) {\n  let count = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  }\n  return count;\n}\n\nfunction length(array) {\n  return array.length | 0;\n}\n\nfunction empty(length) {\n  return !(length > 0);\n}\n\nfunction arrayify(values) {\n  return typeof values !== \"object\" || \"length\" in values ? values : Array.from(values);\n}\n\nfunction reducer(reduce) {\n  return values => reduce(...values);\n}\n\nfunction cross(...values) {\n  const reduce = typeof values[values.length - 1] === \"function\" && reducer(values.pop());\n  values = values.map(arrayify);\n  const lengths = values.map(length);\n  const j = values.length - 1;\n  const index = new Array(j + 1).fill(0);\n  const product = [];\n  if (j < 0 || lengths.some(empty)) return product;\n  while (true) {\n    product.push(index.map((j, i) => values[i][j]));\n    let i = j;\n    while (++index[i] === lengths[i]) {\n      if (i === 0) return reduce ? product.map(reduce) : product;\n      index[i--] = 0;\n    }\n  }\n}\n\nfunction cumsum(values, valueof) {\n  var sum = 0, index = 0;\n  return Float64Array.from(values, valueof === undefined\n    ? v => (sum += +v || 0)\n    : v => (sum += +valueof(v, index++, values) || 0));\n}\n\nfunction descending(a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n\nfunction variance(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}\n\nfunction deviation(values, valueof) {\n  const v = variance(values, valueof);\n  return v ? Math.sqrt(v) : v;\n}\n\nfunction extent(values, valueof) {\n  let min;\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n  return [min, max];\n}\n\n// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\nclass Adder {\n  constructor() {\n    this._partials = new Float64Array(32);\n    this._n = 0;\n  }\n  add(x) {\n    const p = this._partials;\n    let i = 0;\n    for (let j = 0; j < this._n && j < 32; j++) {\n      const y = p[j],\n        hi = x + y,\n        lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\n      if (lo) p[i++] = lo;\n      x = hi;\n    }\n    p[i] = x;\n    this._n = i + 1;\n    return this;\n  }\n  valueOf() {\n    const p = this._partials;\n    let n = this._n, x, y, lo, hi = 0;\n    if (n > 0) {\n      hi = p[--n];\n      while (n > 0) {\n        x = hi;\n        y = p[--n];\n        hi = x + y;\n        lo = y - (hi - x);\n        if (lo) break;\n      }\n      if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {\n        y = lo * 2;\n        x = hi + y;\n        if (y == x - hi) hi = x;\n      }\n    }\n    return hi;\n  }\n}\n\nfunction fsum(values, valueof) {\n  const adder = new Adder();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        adder.add(value);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        adder.add(value);\n      }\n    }\n  }\n  return +adder;\n}\n\nfunction identity(x) {\n  return x;\n}\n\nfunction group(values, ...keys) {\n  return nest(values, identity, identity, keys);\n}\n\nfunction groups(values, ...keys) {\n  return nest(values, Array.from, identity, keys);\n}\n\nfunction rollup(values, reduce, ...keys) {\n  return nest(values, identity, reduce, keys);\n}\n\nfunction rollups(values, reduce, ...keys) {\n  return nest(values, Array.from, reduce, keys);\n}\n\nfunction index(values, ...keys) {\n  return nest(values, identity, unique, keys);\n}\n\nfunction indexes(values, ...keys) {\n  return nest(values, Array.from, unique, keys);\n}\n\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\n\nfunction nest(values, map, reduce, keys) {\n  return (function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new Map();\n    const keyof = keys[i++];\n    let index = -1;\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);\n      else groups.set(key, [value]);\n    }\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n    return map(groups);\n  })(values, 0);\n}\n\nvar array = Array.prototype;\n\nvar slice = array.slice;\n\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\n\nvar e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction ticks(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    step = -step;\n    start = Math.ceil(start * step);\n    stop = Math.floor(stop * step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nfunction tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nfunction tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n\nfunction sturges(values) {\n  return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;\n}\n\nfunction bin() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n        n = data.length,\n        x,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = ticks(x0, x1, tz);\n      if (tz[tz.length - 1] === x1) tz.pop(); // exclusive\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisectRight(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n\nfunction max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n\nfunction min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nfunction quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n\nfunction quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nfunction quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nfunction freedmanDiaconis(values, min, max) {\n  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));\n}\n\nfunction scott(values, min, max) {\n  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(count(values), -1 / 3)));\n}\n\nfunction maxIndex(values, valueof) {\n  let max;\n  let maxIndex = -1;\n  let index = -1;\n  if (valueof === undefined) {\n    for (const value of values) {\n      ++index;\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value, maxIndex = index;\n      }\n    }\n  } else {\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value, maxIndex = index;\n      }\n    }\n  }\n  return maxIndex;\n}\n\nfunction mean(values, valueof) {\n  let count = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  }\n  if (count) return sum / count;\n}\n\nfunction median(values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n\nfunction* flatten(arrays) {\n  for (const array of arrays) {\n    yield* array;\n  }\n}\n\nfunction merge(arrays) {\n  return Array.from(flatten(arrays));\n}\n\nfunction minIndex(values, valueof) {\n  let min;\n  let minIndex = -1;\n  let index = -1;\n  if (valueof === undefined) {\n    for (const value of values) {\n      ++index;\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  } else {\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  }\n  return minIndex;\n}\n\nfunction pairs(values, pairof = pair) {\n  const pairs = [];\n  let previous;\n  let first = false;\n  for (const value of values) {\n    if (first) pairs.push(pairof(previous, value));\n    previous = value;\n    first = true;\n  }\n  return pairs;\n}\n\nfunction pair(a, b) {\n  return [a, b];\n}\n\nfunction permute(source, keys) {\n  return Array.from(keys, key => source[key]);\n}\n\nfunction range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n\nfunction least(values, compare = ascending) {\n  let min;\n  let defined = false;\n  if (compare.length === 1) {\n    let minValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, minValue) < 0\n          : ascending(value, value) === 0) {\n        min = element;\n        minValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, min) < 0\n          : compare(value, value) === 0) {\n        min = value;\n        defined = true;\n      }\n    }\n  }\n  return min;\n}\n\nfunction leastIndex(values, compare = ascending) {\n  if (compare.length === 1) return minIndex(values, compare);\n  let minValue;\n  let min = -1;\n  let index = -1;\n  for (const value of values) {\n    ++index;\n    if (min < 0\n        ? compare(value, value) === 0\n        : compare(value, minValue) < 0) {\n      minValue = value;\n      min = index;\n    }\n  }\n  return min;\n}\n\nfunction greatest(values, compare = ascending) {\n  let max;\n  let defined = false;\n  if (compare.length === 1) {\n    let maxValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, maxValue) > 0\n          : ascending(value, value) === 0) {\n        max = element;\n        maxValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, max) > 0\n          : compare(value, value) === 0) {\n        max = value;\n        defined = true;\n      }\n    }\n  }\n  return max;\n}\n\nfunction greatestIndex(values, compare = ascending) {\n  if (compare.length === 1) return maxIndex(values, compare);\n  let maxValue;\n  let max = -1;\n  let index = -1;\n  for (const value of values) {\n    ++index;\n    if (max < 0\n        ? compare(value, value) === 0\n        : compare(value, maxValue) > 0) {\n      maxValue = value;\n      max = index;\n    }\n  }\n  return max;\n}\n\nfunction scan(values, compare) {\n  const index = leastIndex(values, compare);\n  return index < 0 ? undefined : index;\n}\n\nvar shuffle = shuffler(Math.random);\n\nfunction shuffler(random) {\n  return function shuffle(array, i0 = 0, i1 = array.length) {\n    let m = i1 - (i0 = +i0);\n    while (m) {\n      const i = random() * m-- | 0, t = array[m + i0];\n      array[m + i0] = array[i + i0];\n      array[i + i0] = t;\n    }\n    return array;\n  };\n}\n\nfunction sum(values, valueof) {\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        sum += value;\n      }\n    }\n  }\n  return sum;\n}\n\nfunction transpose(matrix) {\n  if (!(n = matrix.length)) return [];\n  for (var i = -1, m = min(matrix, length$1), transpose = new Array(m); ++i < m;) {\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n      row[j] = matrix[j][i];\n    }\n  }\n  return transpose;\n}\n\nfunction length$1(d) {\n  return d.length;\n}\n\nfunction zip() {\n  return transpose(arguments);\n}\n\nexports.Adder = Adder;\nexports.ascending = ascending;\nexports.bin = bin;\nexports.bisect = bisectRight;\nexports.bisectCenter = bisectCenter;\nexports.bisectLeft = bisectLeft;\nexports.bisectRight = bisectRight;\nexports.bisector = bisector;\nexports.count = count;\nexports.cross = cross;\nexports.cumsum = cumsum;\nexports.descending = descending;\nexports.deviation = deviation;\nexports.extent = extent;\nexports.fsum = fsum;\nexports.greatest = greatest;\nexports.greatestIndex = greatestIndex;\nexports.group = group;\nexports.groups = groups;\nexports.histogram = bin;\nexports.index = index;\nexports.indexes = indexes;\nexports.least = least;\nexports.leastIndex = leastIndex;\nexports.max = max;\nexports.maxIndex = maxIndex;\nexports.mean = mean;\nexports.median = median;\nexports.merge = merge;\nexports.min = min;\nexports.minIndex = minIndex;\nexports.pairs = pairs;\nexports.permute = permute;\nexports.quantile = quantile;\nexports.quantileSorted = quantileSorted;\nexports.quickselect = quickselect;\nexports.range = range;\nexports.rollup = rollup;\nexports.rollups = rollups;\nexports.scan = scan;\nexports.shuffle = shuffle;\nexports.shuffler = shuffler;\nexports.sum = sum;\nexports.thresholdFreedmanDiaconis = freedmanDiaconis;\nexports.thresholdScott = scott;\nexports.thresholdSturges = sturges;\nexports.tickIncrement = tickIncrement;\nexports.tickStep = tickStep;\nexports.ticks = ticks;\nexports.transpose = transpose;\nexports.variance = variance;\nexports.zip = zip;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["thresholds","bisect","range","min","maxIndex","right","valueOf","index","x1","bisector","thresholdSturges","group","mean","sum","rollup","cross","bisectLeft","bisectRight","__esModule","max","x0","tickIncrement","permute","shuffle","d3","count","quantile","leastIndex","least","greatest","scan","descending","value","histogram","center","quantileSorted","ascending","_partials","bin","bisectCenter","domain","thresholdFreedmanDiaconis","ticks","rollups","shuffler","greatestIndex","add","pairs","variance","deviation","_n","minIndex","Adder","indexes","tickStep","quickselect","thresholdScott","cumsum","merge","extent","transpose","groups","zip","left","fsum","median"]],"~:compiled-at",1600144479758,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$d3_array$dist$d3_array.js\",\n\"lineCount\":46,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/d3-array/dist/d3-array.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$d3_array$dist$d3_array\\\"] = function(global,require,module,exports) {\\n// https://d3js.org/d3-array/ v2.7.1 Copyright 2020 Mike Bostock\\n(function (global, factory) {\\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\\n(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || {}));\\n}(this, (function (exports) { 'use strict';\\n\\nfunction ascending(a, b) {\\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\\n}\\n\\nfunction bisector(f) {\\n  let delta = f;\\n  let compare = f;\\n\\n  if (f.length === 1) {\\n    delta = (d, x) => f(d) - x;\\n    compare = ascendingComparator(f);\\n  }\\n\\n  function left(a, x, lo, hi) {\\n    if (lo == null) lo = 0;\\n    if (hi == null) hi = a.length;\\n    while (lo < hi) {\\n      const mid = (lo + hi) >>> 1;\\n      if (compare(a[mid], x) < 0) lo = mid + 1;\\n      else hi = mid;\\n    }\\n    return lo;\\n  }\\n\\n  function right(a, x, lo, hi) {\\n    if (lo == null) lo = 0;\\n    if (hi == null) hi = a.length;\\n    while (lo < hi) {\\n      const mid = (lo + hi) >>> 1;\\n      if (compare(a[mid], x) > 0) hi = mid;\\n      else lo = mid + 1;\\n    }\\n    return lo;\\n  }\\n\\n  function center(a, x, lo, hi) {\\n    if (lo == null) lo = 0;\\n    if (hi == null) hi = a.length;\\n    const i = left(a, x, lo, hi - 1);\\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\\n  }\\n\\n  return {left, center, right};\\n}\\n\\nfunction ascendingComparator(f) {\\n  return (d, x) => ascending(f(d), x);\\n}\\n\\nfunction number(x) {\\n  return x === null ? NaN : +x;\\n}\\n\\nfunction* numbers(values, valueof) {\\n  if (valueof === undefined) {\\n    for (let value of values) {\\n      if (value != null && (value = +value) >= value) {\\n        yield value;\\n      }\\n    }\\n  } else {\\n    let index = -1;\\n    for (let value of values) {\\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\\n        yield value;\\n      }\\n    }\\n  }\\n}\\n\\nconst ascendingBisect = bisector(ascending);\\nconst bisectRight = ascendingBisect.right;\\nconst bisectLeft = ascendingBisect.left;\\nconst bisectCenter = bisector(number).center;\\n\\nfunction count(values, valueof) {\\n  let count = 0;\\n  if (valueof === undefined) {\\n    for (let value of values) {\\n      if (value != null && (value = +value) >= value) {\\n        ++count;\\n      }\\n    }\\n  } else {\\n    let index = -1;\\n    for (let value of values) {\\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\\n        ++count;\\n      }\\n    }\\n  }\\n  return count;\\n}\\n\\nfunction length(array) {\\n  return array.length | 0;\\n}\\n\\nfunction empty(length) {\\n  return !(length > 0);\\n}\\n\\nfunction arrayify(values) {\\n  return typeof values !== \\\"object\\\" || \\\"length\\\" in values ? values : Array.from(values);\\n}\\n\\nfunction reducer(reduce) {\\n  return values => reduce(...values);\\n}\\n\\nfunction cross(...values) {\\n  const reduce = typeof values[values.length - 1] === \\\"function\\\" && reducer(values.pop());\\n  values = values.map(arrayify);\\n  const lengths = values.map(length);\\n  const j = values.length - 1;\\n  const index = new Array(j + 1).fill(0);\\n  const product = [];\\n  if (j < 0 || lengths.some(empty)) return product;\\n  while (true) {\\n    product.push(index.map((j, i) => values[i][j]));\\n    let i = j;\\n    while (++index[i] === lengths[i]) {\\n      if (i === 0) return reduce ? product.map(reduce) : product;\\n      index[i--] = 0;\\n    }\\n  }\\n}\\n\\nfunction cumsum(values, valueof) {\\n  var sum = 0, index = 0;\\n  return Float64Array.from(values, valueof === undefined\\n    ? v => (sum += +v || 0)\\n    : v => (sum += +valueof(v, index++, values) || 0));\\n}\\n\\nfunction descending(a, b) {\\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\\n}\\n\\nfunction variance(values, valueof) {\\n  let count = 0;\\n  let delta;\\n  let mean = 0;\\n  let sum = 0;\\n  if (valueof === undefined) {\\n    for (let value of values) {\\n      if (value != null && (value = +value) >= value) {\\n        delta = value - mean;\\n        mean += delta / ++count;\\n        sum += delta * (value - mean);\\n      }\\n    }\\n  } else {\\n    let index = -1;\\n    for (let value of values) {\\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\\n        delta = value - mean;\\n        mean += delta / ++count;\\n        sum += delta * (value - mean);\\n      }\\n    }\\n  }\\n  if (count > 1) return sum / (count - 1);\\n}\\n\\nfunction deviation(values, valueof) {\\n  const v = variance(values, valueof);\\n  return v ? Math.sqrt(v) : v;\\n}\\n\\nfunction extent(values, valueof) {\\n  let min;\\n  let max;\\n  if (valueof === undefined) {\\n    for (const value of values) {\\n      if (value != null) {\\n        if (min === undefined) {\\n          if (value >= value) min = max = value;\\n        } else {\\n          if (min > value) min = value;\\n          if (max < value) max = value;\\n        }\\n      }\\n    }\\n  } else {\\n    let index = -1;\\n    for (let value of values) {\\n      if ((value = valueof(value, ++index, values)) != null) {\\n        if (min === undefined) {\\n          if (value >= value) min = max = value;\\n        } else {\\n          if (min > value) min = value;\\n          if (max < value) max = value;\\n        }\\n      }\\n    }\\n  }\\n  return [min, max];\\n}\\n\\n// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\\nclass Adder {\\n  constructor() {\\n    this._partials = new Float64Array(32);\\n    this._n = 0;\\n  }\\n  add(x) {\\n    const p = this._partials;\\n    let i = 0;\\n    for (let j = 0; j < this._n && j < 32; j++) {\\n      const y = p[j],\\n        hi = x + y,\\n        lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\\n      if (lo) p[i++] = lo;\\n      x = hi;\\n    }\\n    p[i] = x;\\n    this._n = i + 1;\\n    return this;\\n  }\\n  valueOf() {\\n    const p = this._partials;\\n    let n = this._n, x, y, lo, hi = 0;\\n    if (n > 0) {\\n      hi = p[--n];\\n      while (n > 0) {\\n        x = hi;\\n        y = p[--n];\\n        hi = x + y;\\n        lo = y - (hi - x);\\n        if (lo) break;\\n      }\\n      if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {\\n        y = lo * 2;\\n        x = hi + y;\\n        if (y == x - hi) hi = x;\\n      }\\n    }\\n    return hi;\\n  }\\n}\\n\\nfunction fsum(values, valueof) {\\n  const adder = new Adder();\\n  if (valueof === undefined) {\\n    for (let value of values) {\\n      if (value = +value) {\\n        adder.add(value);\\n      }\\n    }\\n  } else {\\n    let index = -1;\\n    for (let value of values) {\\n      if (value = +valueof(value, ++index, values)) {\\n        adder.add(value);\\n      }\\n    }\\n  }\\n  return +adder;\\n}\\n\\nfunction identity(x) {\\n  return x;\\n}\\n\\nfunction group(values, ...keys) {\\n  return nest(values, identity, identity, keys);\\n}\\n\\nfunction groups(values, ...keys) {\\n  return nest(values, Array.from, identity, keys);\\n}\\n\\nfunction rollup(values, reduce, ...keys) {\\n  return nest(values, identity, reduce, keys);\\n}\\n\\nfunction rollups(values, reduce, ...keys) {\\n  return nest(values, Array.from, reduce, keys);\\n}\\n\\nfunction index(values, ...keys) {\\n  return nest(values, identity, unique, keys);\\n}\\n\\nfunction indexes(values, ...keys) {\\n  return nest(values, Array.from, unique, keys);\\n}\\n\\nfunction unique(values) {\\n  if (values.length !== 1) throw new Error(\\\"duplicate key\\\");\\n  return values[0];\\n}\\n\\nfunction nest(values, map, reduce, keys) {\\n  return (function regroup(values, i) {\\n    if (i >= keys.length) return reduce(values);\\n    const groups = new Map();\\n    const keyof = keys[i++];\\n    let index = -1;\\n    for (const value of values) {\\n      const key = keyof(value, ++index, values);\\n      const group = groups.get(key);\\n      if (group) group.push(value);\\n      else groups.set(key, [value]);\\n    }\\n    for (const [key, values] of groups) {\\n      groups.set(key, regroup(values, i));\\n    }\\n    return map(groups);\\n  })(values, 0);\\n}\\n\\nvar array = Array.prototype;\\n\\nvar slice = array.slice;\\n\\nfunction constant(x) {\\n  return function() {\\n    return x;\\n  };\\n}\\n\\nvar e10 = Math.sqrt(50),\\n    e5 = Math.sqrt(10),\\n    e2 = Math.sqrt(2);\\n\\nfunction ticks(start, stop, count) {\\n  var reverse,\\n      i = -1,\\n      n,\\n      ticks,\\n      step;\\n\\n  stop = +stop, start = +start, count = +count;\\n  if (start === stop && count > 0) return [start];\\n  if (reverse = stop < start) n = start, start = stop, stop = n;\\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\\n\\n  if (step > 0) {\\n    start = Math.ceil(start / step);\\n    stop = Math.floor(stop / step);\\n    ticks = new Array(n = Math.ceil(stop - start + 1));\\n    while (++i < n) ticks[i] = (start + i) * step;\\n  } else {\\n    step = -step;\\n    start = Math.ceil(start * step);\\n    stop = Math.floor(stop * step);\\n    ticks = new Array(n = Math.ceil(stop - start + 1));\\n    while (++i < n) ticks[i] = (start + i) / step;\\n  }\\n\\n  if (reverse) ticks.reverse();\\n\\n  return ticks;\\n}\\n\\nfunction tickIncrement(start, stop, count) {\\n  var step = (stop - start) / Math.max(0, count),\\n      power = Math.floor(Math.log(step) / Math.LN10),\\n      error = step / Math.pow(10, power);\\n  return power >= 0\\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\\n}\\n\\nfunction tickStep(start, stop, count) {\\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\\n      error = step0 / step1;\\n  if (error >= e10) step1 *= 10;\\n  else if (error >= e5) step1 *= 5;\\n  else if (error >= e2) step1 *= 2;\\n  return stop < start ? -step1 : step1;\\n}\\n\\nfunction sturges(values) {\\n  return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;\\n}\\n\\nfunction bin() {\\n  var value = identity,\\n      domain = extent,\\n      threshold = sturges;\\n\\n  function histogram(data) {\\n    if (!Array.isArray(data)) data = Array.from(data);\\n\\n    var i,\\n        n = data.length,\\n        x,\\n        values = new Array(n);\\n\\n    for (i = 0; i < n; ++i) {\\n      values[i] = value(data[i], i, data);\\n    }\\n\\n    var xz = domain(values),\\n        x0 = xz[0],\\n        x1 = xz[1],\\n        tz = threshold(values, x0, x1);\\n\\n    // Convert number of thresholds into uniform thresholds.\\n    if (!Array.isArray(tz)) {\\n      tz = ticks(x0, x1, tz);\\n      if (tz[tz.length - 1] === x1) tz.pop(); // exclusive\\n    }\\n\\n    // Remove any thresholds outside the domain.\\n    var m = tz.length;\\n    while (tz[0] <= x0) tz.shift(), --m;\\n    while (tz[m - 1] > x1) tz.pop(), --m;\\n\\n    var bins = new Array(m + 1),\\n        bin;\\n\\n    // Initialize bins.\\n    for (i = 0; i <= m; ++i) {\\n      bin = bins[i] = [];\\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\\n      bin.x1 = i < m ? tz[i] : x1;\\n    }\\n\\n    // Assign data to bins by value, ignoring any outside the domain.\\n    for (i = 0; i < n; ++i) {\\n      x = values[i];\\n      if (x0 <= x && x <= x1) {\\n        bins[bisectRight(tz, x, 0, m)].push(data[i]);\\n      }\\n    }\\n\\n    return bins;\\n  }\\n\\n  histogram.value = function(_) {\\n    return arguments.length ? (value = typeof _ === \\\"function\\\" ? _ : constant(_), histogram) : value;\\n  };\\n\\n  histogram.domain = function(_) {\\n    return arguments.length ? (domain = typeof _ === \\\"function\\\" ? _ : constant([_[0], _[1]]), histogram) : domain;\\n  };\\n\\n  histogram.thresholds = function(_) {\\n    return arguments.length ? (threshold = typeof _ === \\\"function\\\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\\n  };\\n\\n  return histogram;\\n}\\n\\nfunction max(values, valueof) {\\n  let max;\\n  if (valueof === undefined) {\\n    for (const value of values) {\\n      if (value != null\\n          && (max < value || (max === undefined && value >= value))) {\\n        max = value;\\n      }\\n    }\\n  } else {\\n    let index = -1;\\n    for (let value of values) {\\n      if ((value = valueof(value, ++index, values)) != null\\n          && (max < value || (max === undefined && value >= value))) {\\n        max = value;\\n      }\\n    }\\n  }\\n  return max;\\n}\\n\\nfunction min(values, valueof) {\\n  let min;\\n  if (valueof === undefined) {\\n    for (const value of values) {\\n      if (value != null\\n          && (min > value || (min === undefined && value >= value))) {\\n        min = value;\\n      }\\n    }\\n  } else {\\n    let index = -1;\\n    for (let value of values) {\\n      if ((value = valueof(value, ++index, values)) != null\\n          && (min > value || (min === undefined && value >= value))) {\\n        min = value;\\n      }\\n    }\\n  }\\n  return min;\\n}\\n\\n// Based on https://github.com/mourner/quickselect\\n// ISC license, Copyright 2018 Vladimir Agafonkin.\\nfunction quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {\\n  while (right > left) {\\n    if (right - left > 600) {\\n      const n = right - left + 1;\\n      const m = k - left + 1;\\n      const z = Math.log(n);\\n      const s = 0.5 * Math.exp(2 * z / 3);\\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\\n      quickselect(array, k, newLeft, newRight, compare);\\n    }\\n\\n    const t = array[k];\\n    let i = left;\\n    let j = right;\\n\\n    swap(array, left, k);\\n    if (compare(array[right], t) > 0) swap(array, left, right);\\n\\n    while (i < j) {\\n      swap(array, i, j), ++i, --j;\\n      while (compare(array[i], t) < 0) ++i;\\n      while (compare(array[j], t) > 0) --j;\\n    }\\n\\n    if (compare(array[left], t) === 0) swap(array, left, j);\\n    else ++j, swap(array, j, right);\\n\\n    if (j <= k) left = j + 1;\\n    if (k <= j) right = j - 1;\\n  }\\n  return array;\\n}\\n\\nfunction swap(array, i, j) {\\n  const t = array[i];\\n  array[i] = array[j];\\n  array[j] = t;\\n}\\n\\nfunction quantile(values, p, valueof) {\\n  values = Float64Array.from(numbers(values, valueof));\\n  if (!(n = values.length)) return;\\n  if ((p = +p) <= 0 || n < 2) return min(values);\\n  if (p >= 1) return max(values);\\n  var n,\\n      i = (n - 1) * p,\\n      i0 = Math.floor(i),\\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\\n      value1 = min(values.subarray(i0 + 1));\\n  return value0 + (value1 - value0) * (i - i0);\\n}\\n\\nfunction quantileSorted(values, p, valueof = number) {\\n  if (!(n = values.length)) return;\\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\\n  var n,\\n      i = (n - 1) * p,\\n      i0 = Math.floor(i),\\n      value0 = +valueof(values[i0], i0, values),\\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\\n  return value0 + (value1 - value0) * (i - i0);\\n}\\n\\nfunction freedmanDiaconis(values, min, max) {\\n  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));\\n}\\n\\nfunction scott(values, min, max) {\\n  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(count(values), -1 / 3)));\\n}\\n\\nfunction maxIndex(values, valueof) {\\n  let max;\\n  let maxIndex = -1;\\n  let index = -1;\\n  if (valueof === undefined) {\\n    for (const value of values) {\\n      ++index;\\n      if (value != null\\n          && (max < value || (max === undefined && value >= value))) {\\n        max = value, maxIndex = index;\\n      }\\n    }\\n  } else {\\n    for (let value of values) {\\n      if ((value = valueof(value, ++index, values)) != null\\n          && (max < value || (max === undefined && value >= value))) {\\n        max = value, maxIndex = index;\\n      }\\n    }\\n  }\\n  return maxIndex;\\n}\\n\\nfunction mean(values, valueof) {\\n  let count = 0;\\n  let sum = 0;\\n  if (valueof === undefined) {\\n    for (let value of values) {\\n      if (value != null && (value = +value) >= value) {\\n        ++count, sum += value;\\n      }\\n    }\\n  } else {\\n    let index = -1;\\n    for (let value of values) {\\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\\n        ++count, sum += value;\\n      }\\n    }\\n  }\\n  if (count) return sum / count;\\n}\\n\\nfunction median(values, valueof) {\\n  return quantile(values, 0.5, valueof);\\n}\\n\\nfunction* flatten(arrays) {\\n  for (const array of arrays) {\\n    yield* array;\\n  }\\n}\\n\\nfunction merge(arrays) {\\n  return Array.from(flatten(arrays));\\n}\\n\\nfunction minIndex(values, valueof) {\\n  let min;\\n  let minIndex = -1;\\n  let index = -1;\\n  if (valueof === undefined) {\\n    for (const value of values) {\\n      ++index;\\n      if (value != null\\n          && (min > value || (min === undefined && value >= value))) {\\n        min = value, minIndex = index;\\n      }\\n    }\\n  } else {\\n    for (let value of values) {\\n      if ((value = valueof(value, ++index, values)) != null\\n          && (min > value || (min === undefined && value >= value))) {\\n        min = value, minIndex = index;\\n      }\\n    }\\n  }\\n  return minIndex;\\n}\\n\\nfunction pairs(values, pairof = pair) {\\n  const pairs = [];\\n  let previous;\\n  let first = false;\\n  for (const value of values) {\\n    if (first) pairs.push(pairof(previous, value));\\n    previous = value;\\n    first = true;\\n  }\\n  return pairs;\\n}\\n\\nfunction pair(a, b) {\\n  return [a, b];\\n}\\n\\nfunction permute(source, keys) {\\n  return Array.from(keys, key => source[key]);\\n}\\n\\nfunction range(start, stop, step) {\\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\\n\\n  var i = -1,\\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\\n      range = new Array(n);\\n\\n  while (++i < n) {\\n    range[i] = start + i * step;\\n  }\\n\\n  return range;\\n}\\n\\nfunction least(values, compare = ascending) {\\n  let min;\\n  let defined = false;\\n  if (compare.length === 1) {\\n    let minValue;\\n    for (const element of values) {\\n      const value = compare(element);\\n      if (defined\\n          ? ascending(value, minValue) < 0\\n          : ascending(value, value) === 0) {\\n        min = element;\\n        minValue = value;\\n        defined = true;\\n      }\\n    }\\n  } else {\\n    for (const value of values) {\\n      if (defined\\n          ? compare(value, min) < 0\\n          : compare(value, value) === 0) {\\n        min = value;\\n        defined = true;\\n      }\\n    }\\n  }\\n  return min;\\n}\\n\\nfunction leastIndex(values, compare = ascending) {\\n  if (compare.length === 1) return minIndex(values, compare);\\n  let minValue;\\n  let min = -1;\\n  let index = -1;\\n  for (const value of values) {\\n    ++index;\\n    if (min < 0\\n        ? compare(value, value) === 0\\n        : compare(value, minValue) < 0) {\\n      minValue = value;\\n      min = index;\\n    }\\n  }\\n  return min;\\n}\\n\\nfunction greatest(values, compare = ascending) {\\n  let max;\\n  let defined = false;\\n  if (compare.length === 1) {\\n    let maxValue;\\n    for (const element of values) {\\n      const value = compare(element);\\n      if (defined\\n          ? ascending(value, maxValue) > 0\\n          : ascending(value, value) === 0) {\\n        max = element;\\n        maxValue = value;\\n        defined = true;\\n      }\\n    }\\n  } else {\\n    for (const value of values) {\\n      if (defined\\n          ? compare(value, max) > 0\\n          : compare(value, value) === 0) {\\n        max = value;\\n        defined = true;\\n      }\\n    }\\n  }\\n  return max;\\n}\\n\\nfunction greatestIndex(values, compare = ascending) {\\n  if (compare.length === 1) return maxIndex(values, compare);\\n  let maxValue;\\n  let max = -1;\\n  let index = -1;\\n  for (const value of values) {\\n    ++index;\\n    if (max < 0\\n        ? compare(value, value) === 0\\n        : compare(value, maxValue) > 0) {\\n      maxValue = value;\\n      max = index;\\n    }\\n  }\\n  return max;\\n}\\n\\nfunction scan(values, compare) {\\n  const index = leastIndex(values, compare);\\n  return index < 0 ? undefined : index;\\n}\\n\\nvar shuffle = shuffler(Math.random);\\n\\nfunction shuffler(random) {\\n  return function shuffle(array, i0 = 0, i1 = array.length) {\\n    let m = i1 - (i0 = +i0);\\n    while (m) {\\n      const i = random() * m-- | 0, t = array[m + i0];\\n      array[m + i0] = array[i + i0];\\n      array[i + i0] = t;\\n    }\\n    return array;\\n  };\\n}\\n\\nfunction sum(values, valueof) {\\n  let sum = 0;\\n  if (valueof === undefined) {\\n    for (let value of values) {\\n      if (value = +value) {\\n        sum += value;\\n      }\\n    }\\n  } else {\\n    let index = -1;\\n    for (let value of values) {\\n      if (value = +valueof(value, ++index, values)) {\\n        sum += value;\\n      }\\n    }\\n  }\\n  return sum;\\n}\\n\\nfunction transpose(matrix) {\\n  if (!(n = matrix.length)) return [];\\n  for (var i = -1, m = min(matrix, length$1), transpose = new Array(m); ++i < m;) {\\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\\n      row[j] = matrix[j][i];\\n    }\\n  }\\n  return transpose;\\n}\\n\\nfunction length$1(d) {\\n  return d.length;\\n}\\n\\nfunction zip() {\\n  return transpose(arguments);\\n}\\n\\nexports.Adder = Adder;\\nexports.ascending = ascending;\\nexports.bin = bin;\\nexports.bisect = bisectRight;\\nexports.bisectCenter = bisectCenter;\\nexports.bisectLeft = bisectLeft;\\nexports.bisectRight = bisectRight;\\nexports.bisector = bisector;\\nexports.count = count;\\nexports.cross = cross;\\nexports.cumsum = cumsum;\\nexports.descending = descending;\\nexports.deviation = deviation;\\nexports.extent = extent;\\nexports.fsum = fsum;\\nexports.greatest = greatest;\\nexports.greatestIndex = greatestIndex;\\nexports.group = group;\\nexports.groups = groups;\\nexports.histogram = bin;\\nexports.index = index;\\nexports.indexes = indexes;\\nexports.least = least;\\nexports.leastIndex = leastIndex;\\nexports.max = max;\\nexports.maxIndex = maxIndex;\\nexports.mean = mean;\\nexports.median = median;\\nexports.merge = merge;\\nexports.min = min;\\nexports.minIndex = minIndex;\\nexports.pairs = pairs;\\nexports.permute = permute;\\nexports.quantile = quantile;\\nexports.quantileSorted = quantileSorted;\\nexports.quickselect = quickselect;\\nexports.range = range;\\nexports.rollup = rollup;\\nexports.rollups = rollups;\\nexports.scan = scan;\\nexports.shuffle = shuffle;\\nexports.shuffler = shuffler;\\nexports.sum = sum;\\nexports.thresholdFreedmanDiaconis = freedmanDiaconis;\\nexports.thresholdScott = scott;\\nexports.thresholdSturges = sturges;\\nexports.tickIncrement = tickIncrement;\\nexports.tickStep = tickStep;\\nexports.ticks = ticks;\\nexports.transpose = transpose;\\nexports.variance = variance;\\nexports.zip = zip;\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\n})));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"globalThis\",\"self\",\"d3\",\"ascending\",\"a\",\"b\",\"NaN\",\"bisector\",\"f\",\"left\",\"x\",\"lo\",\"hi\",\"length\",\"mid\",\"compare\",\"delta\",\"d\",\"ascendingComparator\",\"center\",\"i\",\"right\",\"number\",\"numbers\",\"values\",\"valueof\",\"index\",\"value\",\"undefined\",\"count\",\"array\",\"empty\",\"arrayify\",\"Array\",\"from\",\"reducer\",\"reduce\",\"variance\",\"mean\",\"sum\",\"deviation\",\"v\",\"Math\",\"sqrt\",\"extent\",\"min\",\"max\",\"identity\",\"unique\",\"Error\",\"nest\",\"map\",\"keys\",\"regroup\",\"groups\",\"Map\",\"keyof\",\"key\",\"group\",\"get\",\"push\",\"set\",\"constant\",\"ticks\",\"start\",\"stop\",\"reverse\",\"step\",\"n\",\"tickIncrement\",\"isFinite\",\"ceil\",\"floor\",\"power\",\"log\",\"LN10\",\"error\",\"pow\",\"e10\",\"e5\",\"e2\",\"sturges\",\"LN2\",\"bin\",\"histogram\",\"data\",\"isArray\",\"xz\",\"domain\",\"x0\",\"x1\",\"tz\",\"threshold\",\"pop\",\"m\",\"shift\",\"bins\",\"bisectRight\",\"histogram.value\",\"_\",\"arguments\",\"histogram.domain\",\"thresholds\",\"histogram.thresholds\",\"slice\",\"call\",\"quickselect\",\"k\",\"z\",\"s\",\"exp\",\"sd\",\"newLeft\",\"newRight\",\"t\",\"j\",\"swap\",\"quantile\",\"p\",\"Float64Array\",\"i0\",\"value0\",\"subarray\",\"value1\",\"maxIndex\",\"flatten\",\"arrays\",\"minIndex\",\"pair\",\"leastIndex\",\"minValue\",\"shuffler\",\"random\",\"shuffle\",\"i1\",\"transpose\",\"matrix\",\"length$1\",\"row\",\"ascendingBisect\",\"bisectLeft\",\"bisectCenter\",\"Adder\",\"constructor\",\"_partials\",\"_n\",\"add\",\"y\",\"abs\",\"valueOf\",\"prototype\",\"bisect\",\"cross\",\"lengths\",\"fill\",\"product\",\"some\",\"cumsum\",\"descending\",\"fsum\",\"adder\",\"greatest\",\"defined\",\"element\",\"maxValue\",\"greatestIndex\",\"indexes\",\"least\",\"median\",\"merge\",\"pairs\",\"pairof\",\"first\",\"previous\",\"permute\",\"source\",\"quantileSorted\",\"range\",\"rollup\",\"rollups\",\"scan\",\"thresholdFreedmanDiaconis\",\"freedmanDiaconis\",\"thresholdScott\",\"scott\",\"thresholdSturges\",\"tickStep\",\"step0\",\"step1\",\"zip\",\"Object\",\"defineProperty\"]\n}\n"]