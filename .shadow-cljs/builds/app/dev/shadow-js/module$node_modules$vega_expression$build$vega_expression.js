["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/vega-expression/build/vega-expression.js"],"~:js","shadow$provide.module$node_modules$vega_expression$build$vega_expression=function(global$jscomp$0,require,module,exports$jscomp$0){(function(global,factory){\"object\"===typeof exports$jscomp$0&&\"undefined\"!==typeof module?factory(exports$jscomp$0,require(\"module$node_modules$vega_util$build$vega_util\")):\"function\"===typeof define&&define.amd?define([\"exports\",\"vega-util\"],factory):(global=\"undefined\"!==typeof globalThis?globalThis:global||self,factory(global.vega={},global.vega))})(this,function(exports,\nvegaUtil){function ASTNode(type){this.type=type}function children(node){switch(node.type){case \"ArrayExpression\":return node.elements;case \"BinaryExpression\":case \"LogicalExpression\":return[node.left,node.right];case \"CallExpression\":return[node.callee].concat(node.arguments);case \"ConditionalExpression\":return[node.test,node.consequent,node.alternate];case \"MemberExpression\":return[node.object,node.property];case \"ObjectExpression\":return node.properties;case \"Property\":return[node.key,node.value];\ncase \"UnaryExpression\":return[node.argument];default:return[]}}function assert(condition,message){if(!condition)throw Error(\"ASSERT: \"+message);}function isDecimalDigit(ch){return 48<=ch&&57>=ch}function isHexDigit(ch){return 0<=\"0123456789abcdefABCDEF\".indexOf(ch)}function isOctalDigit(ch){return 0<=\"01234567\".indexOf(ch)}function isLineTerminator(ch){return 10===ch||13===ch||8232===ch||8233===ch}function isIdentifierStart(ch){return 36===ch||95===ch||65<=ch&&90>=ch||97<=ch&&122>=ch||92===ch||128<=\nch&&RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch))}function isIdentifierPart(ch){return 36===ch||95===ch||65<=ch&&90>=ch||97<=ch&&122>=ch||48<=ch&&57>=ch||92===ch||128<=ch&&RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch))}function skipComment(){for(var ch;index$jscomp$0<length;)if(ch=source.charCodeAt(index$jscomp$0),32===ch||9===ch||11===ch||12===ch||160===ch||5760<=ch&&0<=[5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(ch)||isLineTerminator(ch))++index$jscomp$0;\nelse break}function scanHexEscape(prefix){var code=0;var len=\"u\"===prefix?4:2;for(prefix=0;prefix<len;++prefix)if(index$jscomp$0<length&&isHexDigit(source[index$jscomp$0])){var ch=source[index$jscomp$0++];code=16*code+\"0123456789abcdef\".indexOf(ch.toLowerCase())}else throwError({},\"Unexpected token %0\",\"ILLEGAL\");return String.fromCharCode(code)}function getEscapedIdentifier(){var ch=source.charCodeAt(index$jscomp$0++);var id=String.fromCharCode(ch);92===ch&&(117!==source.charCodeAt(index$jscomp$0)&&\nthrowError({},\"Unexpected token %0\",\"ILLEGAL\"),++index$jscomp$0,(ch=scanHexEscape(\"u\"))&&\"\\\\\"!==ch&&isIdentifierStart(ch.charCodeAt(0))||throwError({},\"Unexpected token %0\",\"ILLEGAL\"),id=ch);for(;index$jscomp$0<length;){ch=source.charCodeAt(index$jscomp$0);if(!isIdentifierPart(ch))break;++index$jscomp$0;id+=String.fromCharCode(ch);92===ch&&(id=id.substr(0,id.length-1),117!==source.charCodeAt(index$jscomp$0)&&throwError({},\"Unexpected token %0\",\"ILLEGAL\"),++index$jscomp$0,(ch=scanHexEscape(\"u\"))&&\n\"\\\\\"!==ch&&isIdentifierPart(ch.charCodeAt(0))||throwError({},\"Unexpected token %0\",\"ILLEGAL\"),id+=ch)}return id}function scanPunctuator(){var start=index$jscomp$0,code=source.charCodeAt(index$jscomp$0),ch1=source[index$jscomp$0];switch(code){case 46:case 40:case 41:case 59:case 44:case 123:case 125:case 91:case 93:case 58:case 63:case 126:return++index$jscomp$0,{type:7,value:String.fromCharCode(code),start:start,end:index$jscomp$0};default:var code2=source.charCodeAt(index$jscomp$0+1);if(61===code2)switch(code){case 43:case 45:case 47:case 60:case 62:case 94:case 124:case 37:case 38:case 42:return index$jscomp$0+=\n2,{type:7,value:String.fromCharCode(code)+String.fromCharCode(code2),start:start,end:index$jscomp$0};case 33:case 61:return index$jscomp$0+=2,61===source.charCodeAt(index$jscomp$0)&&++index$jscomp$0,{type:7,value:source.slice(start,index$jscomp$0),start:start,end:index$jscomp$0}}}code=source.substr(index$jscomp$0,4);if(\"\\x3e\\x3e\\x3e\\x3d\"===code)return index$jscomp$0+=4,{type:7,value:code,start:start,end:index$jscomp$0};code=code.substr(0,3);if(\"\\x3e\\x3e\\x3e\"===code||\"\\x3c\\x3c\\x3d\"===code||\"\\x3e\\x3e\\x3d\"===\ncode)return index$jscomp$0+=3,{type:7,value:code,start:start,end:index$jscomp$0};code=code.substr(0,2);if(ch1===code[1]&&0<=\"+-\\x3c\\x3e\\x26|\".indexOf(ch1)||\"\\x3d\\x3e\"===code)return index$jscomp$0+=2,{type:7,value:code,start:start,end:index$jscomp$0};if(0<=\"\\x3c\\x3e\\x3d!+-*%\\x26|^/\".indexOf(ch1))return++index$jscomp$0,{type:7,value:ch1,start:start,end:index$jscomp$0};throwError({},\"Unexpected token %0\",\"ILLEGAL\")}function scanNumericLiteral(){var ch=source[index$jscomp$0];assert(isDecimalDigit(ch.charCodeAt(0))||\n\".\"===ch,\"Numeric literal must start with a decimal digit or a decimal point\");var start=index$jscomp$0;var number=\"\";if(\".\"!==ch){number=source[index$jscomp$0++];ch=source[index$jscomp$0];if(\"0\"===number){if(\"x\"===ch||\"X\"===ch){++index$jscomp$0;for(number=\"\";index$jscomp$0<length&&isHexDigit(source[index$jscomp$0]);)number+=source[index$jscomp$0++];0===number.length&&throwError({},\"Unexpected token %0\",\"ILLEGAL\");isIdentifierStart(source.charCodeAt(index$jscomp$0))&&throwError({},\"Unexpected token %0\",\n\"ILLEGAL\");return{type:6,value:parseInt(\"0x\"+number,16),start:start,end:index$jscomp$0}}if(isOctalDigit(ch)){for(number=\"0\"+source[index$jscomp$0++];index$jscomp$0<length&&isOctalDigit(source[index$jscomp$0]);)number+=source[index$jscomp$0++];(isIdentifierStart(source.charCodeAt(index$jscomp$0))||isDecimalDigit(source.charCodeAt(index$jscomp$0)))&&throwError({},\"Unexpected token %0\",\"ILLEGAL\");return{type:6,value:parseInt(number,8),octal:!0,start:start,end:index$jscomp$0}}ch&&isDecimalDigit(ch.charCodeAt(0))&&\nthrowError({},\"Unexpected token %0\",\"ILLEGAL\")}for(;isDecimalDigit(source.charCodeAt(index$jscomp$0));)number+=source[index$jscomp$0++];ch=source[index$jscomp$0]}if(\".\"===ch){for(number+=source[index$jscomp$0++];isDecimalDigit(source.charCodeAt(index$jscomp$0));)number+=source[index$jscomp$0++];ch=source[index$jscomp$0]}if(\"e\"===ch||\"E\"===ch){number+=source[index$jscomp$0++];ch=source[index$jscomp$0];if(\"+\"===ch||\"-\"===ch)number+=source[index$jscomp$0++];if(isDecimalDigit(source.charCodeAt(index$jscomp$0)))for(;isDecimalDigit(source.charCodeAt(index$jscomp$0));)number+=\nsource[index$jscomp$0++];else throwError({},\"Unexpected token %0\",\"ILLEGAL\")}isIdentifierStart(source.charCodeAt(index$jscomp$0))&&throwError({},\"Unexpected token %0\",\"ILLEGAL\");return{type:6,value:parseFloat(number),start:start,end:index$jscomp$0}}function testRegExp(pattern,flags){var tmp=pattern;0<=flags.indexOf(\"u\")&&(tmp=tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g,function($0,$1){if(1114111>=parseInt($1,16))return\"x\";throwError({},\"Invalid regular expression\")}).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n\"x\"));try{new RegExp(tmp)}catch(e){throwError({},\"Invalid regular expression\")}try{return new RegExp(pattern,flags)}catch(exception){return null}}function advance(){skipComment();if(index$jscomp$0>=length)return{type:2,start:index$jscomp$0,end:index$jscomp$0};var ch=source.charCodeAt(index$jscomp$0);if(isIdentifierStart(ch)){ch=index$jscomp$0;if(92===source.charCodeAt(index$jscomp$0))var id=getEscapedIdentifier();else a:{for(id=index$jscomp$0++;index$jscomp$0<length;){var ch$jscomp$0=source.charCodeAt(index$jscomp$0);\nif(92===ch$jscomp$0){index$jscomp$0=id;id=getEscapedIdentifier();break a}if(isIdentifierPart(ch$jscomp$0))++index$jscomp$0;else break}id=source.slice(id,index$jscomp$0)}return{type:1===id.length?3:keywords.hasOwnProperty(id)?4:\"null\"===id?5:\"true\"===id||\"false\"===id?1:3,value:id,start:ch,end:index$jscomp$0}}if(40===ch||41===ch||59===ch)return scanPunctuator();if(39===ch||34===ch){var str=\"\";ch$jscomp$0=!1;ch=source[index$jscomp$0];assert(\"'\"===ch||'\"'===ch,\"String literal must starts with a quote\");\nid=index$jscomp$0;for(++index$jscomp$0;index$jscomp$0<length;){var ch$jscomp$1=source[index$jscomp$0++];if(ch$jscomp$1===ch){ch=\"\";break}else if(\"\\\\\"===ch$jscomp$1)if((ch$jscomp$1=source[index$jscomp$0++])&&isLineTerminator(ch$jscomp$1.charCodeAt(0)))\"\\r\"===ch$jscomp$1&&\"\\n\"===source[index$jscomp$0]&&++index$jscomp$0;else switch(ch$jscomp$1){case \"u\":case \"x\":if(\"{\"===source[index$jscomp$0]){++index$jscomp$0;var code=source[index$jscomp$0];ch$jscomp$1=0;for(\"}\"===code&&throwError({},\"Unexpected token %0\",\n\"ILLEGAL\");index$jscomp$0<length;){code=source[index$jscomp$0++];if(!isHexDigit(code))break;ch$jscomp$1=16*ch$jscomp$1+\"0123456789abcdef\".indexOf(code.toLowerCase())}(1114111<ch$jscomp$1||\"}\"!==code)&&throwError({},\"Unexpected token %0\",\"ILLEGAL\");ch$jscomp$1=65535>=ch$jscomp$1?String.fromCharCode(ch$jscomp$1):String.fromCharCode((ch$jscomp$1-65536>>10)+55296,(ch$jscomp$1-65536&1023)+56320);str+=ch$jscomp$1}else str+=scanHexEscape(ch$jscomp$1);break;case \"n\":str+=\"\\n\";break;case \"r\":str+=\"\\r\";break;\ncase \"t\":str+=\"\\t\";break;case \"b\":str+=\"\\b\";break;case \"f\":str+=\"\\f\";break;case \"v\":str+=\"\\x0B\";break;default:isOctalDigit(ch$jscomp$1)?(code=\"01234567\".indexOf(ch$jscomp$1),0!==code&&(ch$jscomp$0=!0),index$jscomp$0<length&&isOctalDigit(source[index$jscomp$0])&&(ch$jscomp$0=!0,code=8*code+\"01234567\".indexOf(source[index$jscomp$0++]),0<=\"0123\".indexOf(ch$jscomp$1)&&index$jscomp$0<length&&isOctalDigit(source[index$jscomp$0])&&(code=8*code+\"01234567\".indexOf(source[index$jscomp$0++]))),str+=String.fromCharCode(code)):\nstr+=ch$jscomp$1}else if(isLineTerminator(ch$jscomp$1.charCodeAt(0)))break;else str+=ch$jscomp$1}\"\"!==ch&&throwError({},\"Unexpected token %0\",\"ILLEGAL\");return{type:8,value:str,octal:ch$jscomp$0,start:id,end:index$jscomp$0}}return 46===ch?isDecimalDigit(source.charCodeAt(index$jscomp$0+1))?scanNumericLiteral():scanPunctuator():isDecimalDigit(ch)?scanNumericLiteral():scanPunctuator()}function lex(){var token=lookahead;index$jscomp$0=token.end;lookahead=advance();index$jscomp$0=token.end;return token}\nfunction peek(){var pos=index$jscomp$0;lookahead=advance();index$jscomp$0=pos}function finishBinaryExpression(operator,left,right){var node=new ASTNode(\"||\"===operator||\"\\x26\\x26\"===operator?\"LogicalExpression\":\"BinaryExpression\");node.operator=operator;node.left=left;node.right=right;return node}function finishIdentifier(name){var node=new ASTNode(\"Identifier\");node.name=name;return node}function finishLiteral(token){var node=new ASTNode(\"Literal\");node.value=token.value;node.raw=source.slice(token.start,\ntoken.end);token.regex&&(\"//\"===node.raw&&(node.raw=\"/(?:)/\"),node.regex=token.regex);return node}function finishMemberExpression(accessor,object,property){var node=new ASTNode(\"MemberExpression\");node.computed=\"[\"===accessor;node.object=object;node.property=property;node.computed||(property.member=!0);return node}function finishProperty(kind,key,value){var node=new ASTNode(\"Property\");node.key=key;node.value=value;node.kind=kind;return node}function throwError(token,messageFormat){var args=Array.prototype.slice.call(arguments,\n2),msg=messageFormat.replace(/%(\\d)/g,function(whole,index){assert(index<args.length,\"Message reference must be in range\");return args[index]});var error=Error(msg);error.index=index$jscomp$0;error.description=msg;throw error;}function throwUnexpected(token){2===token.type&&throwError(token,\"Unexpected end of input\");6===token.type&&throwError(token,\"Unexpected number\");8===token.type&&throwError(token,\"Unexpected string\");3===token.type&&throwError(token,\"Unexpected identifier\");4===token.type&&\nthrowError(token,\"Unexpected reserved word\");throwError(token,\"Unexpected token %0\",token.value)}function expect(value){var token=lex();7===token.type&&token.value===value||throwUnexpected(token)}function match(value){return 7===lookahead.type&&lookahead.value===value}function parseObjectPropertyKey(){index$jscomp$0=lookahead.start;var token=lex();return 8===token.type||6===token.type?(token.octal&&throwError(token,\"Octal literals are not allowed in strict mode.\"),finishLiteral(token)):finishIdentifier(token.value)}\nfunction parsePrimaryExpression(){if(match(\"(\")){expect(\"(\");var type=parseExpression();expect(\")\");return type}if(match(\"[\")){type=[];index$jscomp$0=lookahead.start;for(expect(\"[\");!match(\"]\");)match(\",\")?(lex(),type.push(null)):(type.push(parseConditionalExpression()),match(\"]\")||expect(\",\"));lex();var JSCompiler_object_inline_value_2888=new ASTNode(\"ArrayExpression\");JSCompiler_object_inline_value_2888.elements=type;return JSCompiler_object_inline_value_2888}if(match(\"{\")){type=[];JSCompiler_object_inline_value_2888=\n{};var JSCompiler_object_inline_literal_2889=String;index$jscomp$0=lookahead.start;for(expect(\"{\");!match(\"}\");){index$jscomp$0=lookahead.start;var JSCompiler_object_inline_value_2890=lookahead;if(3===JSCompiler_object_inline_value_2890.type){var JSCompiler_object_inline_literal_2891=parseObjectPropertyKey();expect(\":\");JSCompiler_object_inline_value_2890=parseConditionalExpression();JSCompiler_object_inline_value_2890=finishProperty(\"init\",JSCompiler_object_inline_literal_2891,JSCompiler_object_inline_value_2890)}else 2===\nJSCompiler_object_inline_value_2890.type||7===JSCompiler_object_inline_value_2890.type?(throwUnexpected(JSCompiler_object_inline_value_2890),JSCompiler_object_inline_value_2890=void 0):(JSCompiler_object_inline_literal_2891=parseObjectPropertyKey(),expect(\":\"),JSCompiler_object_inline_value_2890=parseConditionalExpression(),JSCompiler_object_inline_value_2890=finishProperty(\"init\",JSCompiler_object_inline_literal_2891,JSCompiler_object_inline_value_2890));JSCompiler_object_inline_literal_2891=\"Identifier\"===\nJSCompiler_object_inline_value_2890.key.type?JSCompiler_object_inline_value_2890.key.name:JSCompiler_object_inline_literal_2889(JSCompiler_object_inline_value_2890.key.value);JSCompiler_object_inline_literal_2891=\"$\"+JSCompiler_object_inline_literal_2891;Object.prototype.hasOwnProperty.call(JSCompiler_object_inline_value_2888,JSCompiler_object_inline_literal_2891)?throwError({},\"Duplicate data property in object literal not allowed in strict mode\"):JSCompiler_object_inline_value_2888[JSCompiler_object_inline_literal_2891]=\n!0;type.push(JSCompiler_object_inline_value_2890);match(\"}\")||expect(\",\")}expect(\"}\");JSCompiler_object_inline_value_2888=new ASTNode(\"ObjectExpression\");JSCompiler_object_inline_value_2888.properties=type;return JSCompiler_object_inline_value_2888}type=lookahead.type;index$jscomp$0=lookahead.start;if(3===type||legalKeywords[lookahead.value])JSCompiler_object_inline_value_2888=finishIdentifier(lex().value);else if(8===type||6===type)lookahead.octal&&throwError(lookahead,\"Octal literals are not allowed in strict mode.\"),\nJSCompiler_object_inline_value_2888=finishLiteral(lex());else{if(4===type)throw Error(\"Disabled.\");if(1===type)type=lex(),type.value=\"true\"===type.value,JSCompiler_object_inline_value_2888=finishLiteral(type);else if(5===type)type=lex(),type.value=null,JSCompiler_object_inline_value_2888=finishLiteral(type);else if(match(\"/\")||match(\"/\\x3d\")){var value;lookahead=null;skipComment();type=index$jscomp$0;JSCompiler_object_inline_value_2888=source[index$jscomp$0];assert(\"/\"===JSCompiler_object_inline_value_2888,\n\"Regular expression literal must start with a slash\");JSCompiler_object_inline_literal_2889=source[index$jscomp$0++];for(JSCompiler_object_inline_literal_2891=JSCompiler_object_inline_value_2890=!1;index$jscomp$0<length;)if(JSCompiler_object_inline_value_2888=source[index$jscomp$0++],JSCompiler_object_inline_literal_2889+=JSCompiler_object_inline_value_2888,\"\\\\\"===JSCompiler_object_inline_value_2888)JSCompiler_object_inline_value_2888=source[index$jscomp$0++],isLineTerminator(JSCompiler_object_inline_value_2888.charCodeAt(0))&&\nthrowError({},\"Invalid regular expression: missing /\"),JSCompiler_object_inline_literal_2889+=JSCompiler_object_inline_value_2888;else if(isLineTerminator(JSCompiler_object_inline_value_2888.charCodeAt(0)))throwError({},\"Invalid regular expression: missing /\");else if(JSCompiler_object_inline_value_2890)\"]\"===JSCompiler_object_inline_value_2888&&(JSCompiler_object_inline_value_2890=!1);else if(\"/\"===JSCompiler_object_inline_value_2888){JSCompiler_object_inline_literal_2891=!0;break}else\"[\"===JSCompiler_object_inline_value_2888&&\n(JSCompiler_object_inline_value_2890=!0);JSCompiler_object_inline_literal_2891||throwError({},\"Invalid regular expression: missing /\");JSCompiler_object_inline_value_2888=JSCompiler_object_inline_literal_2889.substr(1,JSCompiler_object_inline_literal_2889.length-2);for(value=JSCompiler_object_inline_literal_2891=\"\";index$jscomp$0<length;){JSCompiler_object_inline_value_2890=source[index$jscomp$0];if(!isIdentifierPart(JSCompiler_object_inline_value_2890.charCodeAt(0)))break;++index$jscomp$0;\"\\\\\"===\nJSCompiler_object_inline_value_2890&&index$jscomp$0<length?throwError({},\"Unexpected token %0\",\"ILLEGAL\"):(value+=JSCompiler_object_inline_value_2890,JSCompiler_object_inline_literal_2891+=JSCompiler_object_inline_value_2890)}0<=value.search(/[^gimuy]/g)&&throwError({},\"Invalid regular expression\",value);JSCompiler_object_inline_value_2890=value;value=testRegExp(JSCompiler_object_inline_value_2888,JSCompiler_object_inline_value_2890);JSCompiler_object_inline_value_2888=finishLiteral({literal:JSCompiler_object_inline_literal_2889+\nJSCompiler_object_inline_literal_2891,value:value,regex:{pattern:JSCompiler_object_inline_value_2888,flags:JSCompiler_object_inline_value_2890},start:type,end:index$jscomp$0});peek()}else throwUnexpected(lex())}return JSCompiler_object_inline_value_2888}function parsePostfixExpression(){var expr;for(expr=parsePrimaryExpression();;)if(match(\".\")){expect(\".\");index$jscomp$0=lookahead.start;var args=lex();3===args.type||4===args.type||1===args.type||5===args.type||throwUnexpected(args);args=finishIdentifier(args.value);\nexpr=finishMemberExpression(\".\",expr,args)}else if(match(\"(\")){args=[];expect(\"(\");if(!match(\")\"))for(;index$jscomp$0<length;){args.push(parseConditionalExpression());if(match(\")\"))break;expect(\",\")}expect(\")\");var node=new ASTNode(\"CallExpression\");node.callee=expr;node.arguments=args;expr=node}else if(match(\"[\"))expect(\"[\"),args=parseExpression(),expect(\"]\"),expr=finishMemberExpression(\"[\",expr,args);else break;if(7===lookahead.type&&(match(\"++\")||match(\"--\")))throw Error(\"Disabled.\");return expr}\nfunction parseUnaryExpression(){if(7!==lookahead.type&&4!==lookahead.type)var expr=parsePostfixExpression();else{if(match(\"++\")||match(\"--\"))throw Error(\"Disabled.\");if(match(\"+\")||match(\"-\")||match(\"~\")||match(\"!\")){var token=lex();expr=parseUnaryExpression();token=token.value;var node=new ASTNode(\"UnaryExpression\");node.operator=token;node.argument=expr;node.prefix=!0;expr=node}else{if(4===lookahead.type&&\"delete\"===lookahead.value||4===lookahead.type&&\"void\"===lookahead.value||4===lookahead.type&&\n\"typeof\"===lookahead.value)throw Error(\"Disabled.\");expr=parsePostfixExpression()}}return expr}function binaryPrecedence(token){var prec=0;if(7!==token.type&&4!==token.type)return 0;switch(token.value){case \"||\":prec=1;break;case \"\\x26\\x26\":prec=2;break;case \"|\":prec=3;break;case \"^\":prec=4;break;case \"\\x26\":prec=5;break;case \"\\x3d\\x3d\":case \"!\\x3d\":case \"\\x3d\\x3d\\x3d\":case \"!\\x3d\\x3d\":prec=6;break;case \"\\x3c\":case \"\\x3e\":case \"\\x3c\\x3d\":case \"\\x3e\\x3d\":case \"instanceof\":case \"in\":prec=7;break;case \"\\x3c\\x3c\":case \"\\x3e\\x3e\":case \"\\x3e\\x3e\\x3e\":prec=\n8;break;case \"+\":case \"-\":prec=9;break;case \"*\":case \"/\":case \"%\":prec=11}return prec}function parseConditionalExpression(){var consequent=lookahead;var expr=parseUnaryExpression();var token=lookahead;var alternate=binaryPrecedence(token);if(0===alternate)var expr$jscomp$0=expr;else{token.prec=alternate;lex();consequent=[consequent,lookahead];var right=parseUnaryExpression();for(expr$jscomp$0=[expr,token,right];0<(alternate=binaryPrecedence(lookahead));){for(;2<expr$jscomp$0.length&&alternate<=expr$jscomp$0[expr$jscomp$0.length-\n2].prec;)right=expr$jscomp$0.pop(),token=expr$jscomp$0.pop().value,expr=expr$jscomp$0.pop(),consequent.pop(),expr=finishBinaryExpression(token,expr,right),expr$jscomp$0.push(expr);token=lex();token.prec=alternate;expr$jscomp$0.push(token);consequent.push(lookahead);expr=parseUnaryExpression();expr$jscomp$0.push(expr)}alternate=expr$jscomp$0.length-1;expr=expr$jscomp$0[alternate];for(consequent.pop();1<alternate;)consequent.pop(),expr=finishBinaryExpression(expr$jscomp$0[alternate-1].value,expr$jscomp$0[alternate-\n2],expr),alternate-=2;expr$jscomp$0=expr}match(\"?\")&&(lex(),consequent=parseConditionalExpression(),expect(\":\"),alternate=parseConditionalExpression(),expr=new ASTNode(\"ConditionalExpression\"),expr.test=expr$jscomp$0,expr.consequent=consequent,expr.alternate=alternate,expr$jscomp$0=expr);return expr$jscomp$0}function parseExpression(){var expr=parseConditionalExpression();if(match(\",\"))throw Error(\"Disabled.\");return expr}function Functions(codegen){function fn(name,cast,type){return function(args){var obj=\ncodegen(args[0]);cast&&(obj=cast+\"(\"+obj+\")\",0===cast.lastIndexOf(\"new \",0)&&(obj=\"(\"+obj+\")\"));return obj+\".\"+name+(0>type?\"\":0===type?\"()\":\"(\"+args.slice(1).map(codegen).join(\",\")+\")\")}}return{isNaN:\"Number.isNaN\",isFinite:\"Number.isFinite\",abs:\"Math.abs\",acos:\"Math.acos\",asin:\"Math.asin\",atan:\"Math.atan\",atan2:\"Math.atan2\",ceil:\"Math.ceil\",cos:\"Math.cos\",exp:\"Math.exp\",floor:\"Math.floor\",log:\"Math.log\",max:\"Math.max\",min:\"Math.min\",pow:\"Math.pow\",random:\"Math.random\",round:\"Math.round\",sin:\"Math.sin\",\nsqrt:\"Math.sqrt\",tan:\"Math.tan\",clamp:function(args){3>args.length&&vegaUtil.error(\"Missing arguments to clamp function.\");3<args.length&&vegaUtil.error(\"Too many arguments to clamp function.\");args=args.map(codegen);return\"Math.max(\"+args[1]+\", Math.min(\"+args[2]+\",\"+args[0]+\"))\"},now:\"Date.now\",utc:\"Date.UTC\",datetime:\"new Date\",date:fn(\"getDate\",\"new Date\",0),day:fn(\"getDay\",\"new Date\",0),year:fn(\"getFullYear\",\"new Date\",0),month:fn(\"getMonth\",\"new Date\",0),hours:fn(\"getHours\",\"new Date\",0),minutes:fn(\"getMinutes\",\n\"new Date\",0),seconds:fn(\"getSeconds\",\"new Date\",0),milliseconds:fn(\"getMilliseconds\",\"new Date\",0),time:fn(\"getTime\",\"new Date\",0),timezoneoffset:fn(\"getTimezoneOffset\",\"new Date\",0),utcdate:fn(\"getUTCDate\",\"new Date\",0),utcday:fn(\"getUTCDay\",\"new Date\",0),utcyear:fn(\"getUTCFullYear\",\"new Date\",0),utcmonth:fn(\"getUTCMonth\",\"new Date\",0),utchours:fn(\"getUTCHours\",\"new Date\",0),utcminutes:fn(\"getUTCMinutes\",\"new Date\",0),utcseconds:fn(\"getUTCSeconds\",\"new Date\",0),utcmilliseconds:fn(\"getUTCMilliseconds\",\n\"new Date\",0),length:fn(\"length\",null,-1),join:fn(\"join\",null),indexof:fn(\"indexOf\",null),lastindexof:fn(\"lastIndexOf\",null),slice:fn(\"slice\",null),reverse:function(args){return\"(\"+codegen(args[0])+\").slice().reverse()\"},parseFloat:\"parseFloat\",parseInt:\"parseInt\",upper:fn(\"toUpperCase\",\"String\",0),lower:fn(\"toLowerCase\",\"String\",0),substring:fn(\"substring\",\"String\"),split:fn(\"split\",\"String\"),replace:fn(\"replace\",\"String\"),trim:fn(\"trim\",\"String\",0),regexp:\"RegExp\",test:fn(\"test\",\"RegExp\"),if:function(args){3>\nargs.length&&vegaUtil.error(\"Missing arguments to if function.\");3<args.length&&vegaUtil.error(\"Too many arguments to if function.\");args=args.map(codegen);return\"(\"+args[0]+\"?\"+args[1]+\":\"+args[2]+\")\"}}}ASTNode.prototype.visit=function(visitor){var n;if(visitor(this))return 1;var c=children(this);var i=0;for(n=c.length;i<n;++i)if(c[i].visit(visitor))return 1};var source,index$jscomp$0,length,lookahead,RegexNonAsciiIdentifierStart=/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\nRegexNonAsciiIdentifierPart=/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\nkeywords={\"if\":1,\"in\":1,\"do\":1,\"var\":1,\"for\":1,\"new\":1,\"try\":1,let:1,\"this\":1,\"else\":1,\"case\":1,\"void\":1,\"with\":1,\"enum\":1,\"while\":1,\"break\":1,\"catch\":1,\"throw\":1,\"const\":1,yield:1,\"class\":1,\"super\":1,\"return\":1,\"typeof\":1,\"delete\":1,\"switch\":1,\"export\":1,\"import\":1,\"public\":1,\"static\":1,\"default\":1,\"finally\":1,\"extends\":1,\"package\":1,\"private\":1,\"function\":1,\"continue\":1,\"debugger\":1,\"interface\":1,\"protected\":1,\"instanceof\":1,\"implements\":1},legalKeywords={\"if\":1},Constants={NaN:\"NaN\",E:\"Math.E\",\nLN2:\"Math.LN2\",LN10:\"Math.LN10\",LOG2E:\"Math.LOG2E\",LOG10E:\"Math.LOG10E\",PI:\"Math.PI\",SQRT1_2:\"Math.SQRT1_2\",SQRT2:\"Math.SQRT2\",MIN_VALUE:\"Number.MIN_VALUE\",MAX_VALUE:\"Number.MAX_VALUE\"};exports.ASTNode=ASTNode;exports.ArrayExpression=\"ArrayExpression\";exports.BinaryExpression=\"BinaryExpression\";exports.CallExpression=\"CallExpression\";exports.ConditionalExpression=\"ConditionalExpression\";exports.Identifier=\"Identifier\";exports.Literal=\"Literal\";exports.LogicalExpression=\"LogicalExpression\";exports.MemberExpression=\n\"MemberExpression\";exports.ObjectExpression=\"ObjectExpression\";exports.Property=\"Property\";exports.RawCode=\"RawCode\";exports.UnaryExpression=\"UnaryExpression\";exports.codegen=function(opt){function visit(ast){if(vegaUtil.isString(ast))return ast;var generator=Generators[ast.type];null==generator&&vegaUtil.error(\"Unsupported type: \"+ast.type);return generator(ast)}function codegen(ast){ast={code:visit(ast),globals:Object.keys(globals),fields:Object.keys(fields)};globals={};fields={};return ast}opt=\nopt||{};var whitelist=opt.whitelist?vegaUtil.toSet(opt.whitelist):{},blacklist=opt.blacklist?vegaUtil.toSet(opt.blacklist):{},constants=opt.constants||Constants,functions=(opt.functions||Functions)(visit),globalvar=opt.globalvar,fieldvar=opt.fieldvar,outputGlobal=vegaUtil.isFunction(globalvar)?globalvar:function(id){return globalvar+'[\"'+id+'\"]'},globals={},fields={},memberDepth=0,Generators={Literal:function(n){return n.raw},Identifier:function(n){n=n.name;if(0<memberDepth)return n;if(vegaUtil.hasOwnProperty(blacklist,\nn))return vegaUtil.error(\"Illegal identifier: \"+n);if(vegaUtil.hasOwnProperty(constants,n))return constants[n];if(vegaUtil.hasOwnProperty(whitelist,n))return n;globals[n]=1;return outputGlobal(n)},MemberExpression:function(n){var d=!n.computed,o=visit(n.object);d&&(memberDepth+=1);n=visit(n.property);if(o===fieldvar){var JSCompiler_temp_const=fields;var JSCompiler_inline_result=(JSCompiler_inline_result=n&&n.length-1)&&('\"'===n[0]&&'\"'===n[JSCompiler_inline_result]||\"'\"===n[0]&&\"'\"===n[JSCompiler_inline_result])?\nn.slice(1,-1):n;JSCompiler_temp_const[JSCompiler_inline_result]=1}d&&--memberDepth;return o+(d?\".\"+n:\"[\"+n+\"]\")},CallExpression:function(n){\"Identifier\"!==n.callee.type&&vegaUtil.error(\"Illegal callee type: \"+n.callee.type);var callee=n.callee.name;n=n.arguments;var fn=vegaUtil.hasOwnProperty(functions,callee)&&functions[callee];fn||vegaUtil.error(\"Unrecognized function: \"+callee);return vegaUtil.isFunction(fn)?fn(n):fn+\"(\"+n.map(visit).join(\",\")+\")\"},ArrayExpression:function(n){return\"[\"+n.elements.map(visit).join(\",\")+\n\"]\"},BinaryExpression:function(n){return\"(\"+visit(n.left)+n.operator+visit(n.right)+\")\"},UnaryExpression:function(n){return\"(\"+n.operator+visit(n.argument)+\")\"},ConditionalExpression:function(n){return\"(\"+visit(n.test)+\"?\"+visit(n.consequent)+\":\"+visit(n.alternate)+\")\"},LogicalExpression:function(n){return\"(\"+visit(n.left)+n.operator+visit(n.right)+\")\"},ObjectExpression:function(n){return\"{\"+n.properties.map(visit).join(\",\")+\"}\"},Property:function(n){memberDepth+=1;var k=visit(n.key);--memberDepth;\nreturn k+\":\"+visit(n.value)}};codegen.functions=functions;codegen.constants=constants;return codegen};exports.constants=Constants;exports.functions=Functions;exports.parse=function(code){source=code;index$jscomp$0=0;length=source.length;lookahead=null;peek();code=parseExpression();if(2!==lookahead.type)throw Error(\"Unexpect token after expression.\");return code};Object.defineProperty(exports,\"__esModule\",{value:!0})})}","~:source","shadow$provide[\"module$node_modules$vega_expression$build$vega_expression\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-util'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega));\n}(this, (function (exports, vegaUtil) { 'use strict';\n\n  const RawCode = 'RawCode';\n  const Literal = 'Literal';\n  const Property = 'Property';\n  const Identifier = 'Identifier';\n\n  const ArrayExpression = 'ArrayExpression';\n  const BinaryExpression = 'BinaryExpression';\n  const CallExpression = 'CallExpression';\n  const ConditionalExpression = 'ConditionalExpression';\n  const LogicalExpression = 'LogicalExpression';\n  const MemberExpression = 'MemberExpression';\n  const ObjectExpression = 'ObjectExpression';\n  const UnaryExpression = 'UnaryExpression';\n\n  function ASTNode(type) {\n    this.type = type;\n  }\n\n  ASTNode.prototype.visit = function(visitor) {\n    let c, i, n;\n\n    if (visitor(this)) return 1;\n\n    for (c=children(this), i=0, n=c.length; i<n; ++i) {\n      if (c[i].visit(visitor)) return 1;\n    }\n  };\n\n  function children(node) {\n    switch (node.type) {\n      case ArrayExpression:\n        return node.elements;\n      case BinaryExpression:\n      case LogicalExpression:\n        return [node.left, node.right];\n      case CallExpression:\n        return [node.callee].concat(node.arguments);\n      case ConditionalExpression:\n        return [node.test, node.consequent, node.alternate];\n      case MemberExpression:\n        return [node.object, node.property];\n      case ObjectExpression:\n        return node.properties;\n      case Property:\n        return [node.key, node.value];\n      case UnaryExpression:\n        return [node.argument];\n      case Identifier:\n      case Literal:\n      case RawCode:\n      default:\n        return [];\n    }\n  }\n\n  /*\n    The following expression parser is based on Esprima (http://esprima.org/).\n    Original header comment and license for Esprima is included here:\n\n    Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n    Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n    Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n    Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n    Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n    Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n    Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n    Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n    Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n    Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n      * Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n      * Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n\n  var TokenName,\n      source,\n      index,\n      length,\n      lookahead;\n\n  var TokenBooleanLiteral = 1,\n      TokenEOF = 2,\n      TokenIdentifier = 3,\n      TokenKeyword = 4,\n      TokenNullLiteral = 5,\n      TokenNumericLiteral = 6,\n      TokenPunctuator = 7,\n      TokenStringLiteral = 8,\n      TokenRegularExpression = 9;\n\n  TokenName = {};\n  TokenName[TokenBooleanLiteral] = 'Boolean';\n  TokenName[TokenEOF] = '<end>';\n  TokenName[TokenIdentifier] = 'Identifier';\n  TokenName[TokenKeyword] = 'Keyword';\n  TokenName[TokenNullLiteral] = 'Null';\n  TokenName[TokenNumericLiteral] = 'Numeric';\n  TokenName[TokenPunctuator] = 'Punctuator';\n  TokenName[TokenStringLiteral] = 'String';\n  TokenName[TokenRegularExpression] = 'RegularExpression';\n\n  var SyntaxArrayExpression = 'ArrayExpression',\n      SyntaxBinaryExpression = 'BinaryExpression',\n      SyntaxCallExpression = 'CallExpression',\n      SyntaxConditionalExpression = 'ConditionalExpression',\n      SyntaxIdentifier = 'Identifier',\n      SyntaxLiteral = 'Literal',\n      SyntaxLogicalExpression = 'LogicalExpression',\n      SyntaxMemberExpression = 'MemberExpression',\n      SyntaxObjectExpression = 'ObjectExpression',\n      SyntaxProperty = 'Property',\n      SyntaxUnaryExpression = 'UnaryExpression';\n\n  // Error messages should be identical to V8.\n  var MessageUnexpectedToken = 'Unexpected token %0',\n      MessageUnexpectedNumber = 'Unexpected number',\n      MessageUnexpectedString = 'Unexpected string',\n      MessageUnexpectedIdentifier = 'Unexpected identifier',\n      MessageUnexpectedReserved = 'Unexpected reserved word',\n      MessageUnexpectedEOS = 'Unexpected end of input',\n      MessageInvalidRegExp = 'Invalid regular expression',\n      MessageUnterminatedRegExp = 'Invalid regular expression: missing /',\n      MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',\n      MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';\n\n  var ILLEGAL = 'ILLEGAL',\n      DISABLED = 'Disabled.';\n\n  // See also tools/generate-unicode-regex.py.\n  var RegexNonAsciiIdentifierStart = new RegExp('[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]'),\n      // eslint-disable-next-line no-misleading-character-class\n      RegexNonAsciiIdentifierPart = new RegExp('[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0300-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u0483-\\\\u0487\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0610-\\\\u061A\\\\u0620-\\\\u0669\\\\u066E-\\\\u06D3\\\\u06D5-\\\\u06DC\\\\u06DF-\\\\u06E8\\\\u06EA-\\\\u06FC\\\\u06FF\\\\u0710-\\\\u074A\\\\u074D-\\\\u07B1\\\\u07C0-\\\\u07F5\\\\u07FA\\\\u0800-\\\\u082D\\\\u0840-\\\\u085B\\\\u08A0-\\\\u08B2\\\\u08E4-\\\\u0963\\\\u0966-\\\\u096F\\\\u0971-\\\\u0983\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BC-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CE\\\\u09D7\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E3\\\\u09E6-\\\\u09F1\\\\u0A01-\\\\u0A03\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A66-\\\\u0A75\\\\u0A81-\\\\u0A83\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABC-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0AD0\\\\u0AE0-\\\\u0AE3\\\\u0AE6-\\\\u0AEF\\\\u0B01-\\\\u0B03\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3C-\\\\u0B44\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B56\\\\u0B57\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B63\\\\u0B66-\\\\u0B6F\\\\u0B71\\\\u0B82\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD0\\\\u0BD7\\\\u0BE6-\\\\u0BEF\\\\u0C00-\\\\u0C03\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C58\\\\u0C59\\\\u0C60-\\\\u0C63\\\\u0C66-\\\\u0C6F\\\\u0C81-\\\\u0C83\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBC-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0CDE\\\\u0CE0-\\\\u0CE3\\\\u0CE6-\\\\u0CEF\\\\u0CF1\\\\u0CF2\\\\u0D01-\\\\u0D03\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D-\\\\u0D44\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4E\\\\u0D57\\\\u0D60-\\\\u0D63\\\\u0D66-\\\\u0D6F\\\\u0D7A-\\\\u0D7F\\\\u0D82\\\\u0D83\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0DCA\\\\u0DCF-\\\\u0DD4\\\\u0DD6\\\\u0DD8-\\\\u0DDF\\\\u0DE6-\\\\u0DEF\\\\u0DF2\\\\u0DF3\\\\u0E01-\\\\u0E3A\\\\u0E40-\\\\u0E4E\\\\u0E50-\\\\u0E59\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB9\\\\u0EBB-\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EC8-\\\\u0ECD\\\\u0ED0-\\\\u0ED9\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F18\\\\u0F19\\\\u0F20-\\\\u0F29\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F71-\\\\u0F84\\\\u0F86-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u1000-\\\\u1049\\\\u1050-\\\\u109D\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u135D-\\\\u135F\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1714\\\\u1720-\\\\u1734\\\\u1740-\\\\u1753\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1772\\\\u1773\\\\u1780-\\\\u17D3\\\\u17D7\\\\u17DC\\\\u17DD\\\\u17E0-\\\\u17E9\\\\u180B-\\\\u180D\\\\u1810-\\\\u1819\\\\u1820-\\\\u1877\\\\u1880-\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1920-\\\\u192B\\\\u1930-\\\\u193B\\\\u1946-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u19D0-\\\\u19D9\\\\u1A00-\\\\u1A1B\\\\u1A20-\\\\u1A5E\\\\u1A60-\\\\u1A7C\\\\u1A7F-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1AA7\\\\u1AB0-\\\\u1ABD\\\\u1B00-\\\\u1B4B\\\\u1B50-\\\\u1B59\\\\u1B6B-\\\\u1B73\\\\u1B80-\\\\u1BF3\\\\u1C00-\\\\u1C37\\\\u1C40-\\\\u1C49\\\\u1C4D-\\\\u1C7D\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CF6\\\\u1CF8\\\\u1CF9\\\\u1D00-\\\\u1DF5\\\\u1DFC-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u200C\\\\u200D\\\\u203F\\\\u2040\\\\u2054\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D7F-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2DE0-\\\\u2DFF\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u302F\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u3099\\\\u309A\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA62B\\\\uA640-\\\\uA66F\\\\uA674-\\\\uA67D\\\\uA67F-\\\\uA69D\\\\uA69F-\\\\uA6F1\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA827\\\\uA840-\\\\uA873\\\\uA880-\\\\uA8C4\\\\uA8D0-\\\\uA8D9\\\\uA8E0-\\\\uA8F7\\\\uA8FB\\\\uA900-\\\\uA92D\\\\uA930-\\\\uA953\\\\uA960-\\\\uA97C\\\\uA980-\\\\uA9C0\\\\uA9CF-\\\\uA9D9\\\\uA9E0-\\\\uA9FE\\\\uAA00-\\\\uAA36\\\\uAA40-\\\\uAA4D\\\\uAA50-\\\\uAA59\\\\uAA60-\\\\uAA76\\\\uAA7A-\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEF\\\\uAAF2-\\\\uAAF6\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABEA\\\\uABEC\\\\uABED\\\\uABF0-\\\\uABF9\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2D\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF10-\\\\uFF19\\\\uFF21-\\\\uFF3A\\\\uFF3F\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]');\n\n  // Ensure the condition is true, otherwise throw an error.\n  // This is only to have a better contract semantic, i.e. another safety net\n  // to catch a logic error. The condition shall be fulfilled in normal case.\n  // Do NOT use this to enforce a certain condition on any user input.\n\n  function assert(condition, message) {\n    /* istanbul ignore next */\n    if (!condition) {\n      throw new Error('ASSERT: ' + message);\n    }\n  }\n\n  function isDecimalDigit(ch) {\n    return (ch >= 0x30 && ch <= 0x39); // 0..9\n  }\n\n  function isHexDigit(ch) {\n    return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n  }\n\n  function isOctalDigit(ch) {\n    return '01234567'.indexOf(ch) >= 0;\n  }\n\n  // 7.2 White Space\n\n  function isWhiteSpace(ch) {\n    return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n      (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\n  }\n\n  // 7.3 Line Terminators\n\n  function isLineTerminator(ch) {\n    return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\n  }\n\n  // 7.6 Identifier Names and Identifiers\n\n  function isIdentifierStart(ch) {\n    return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\n      (ch >= 0x41 && ch <= 0x5A) || // A..Z\n      (ch >= 0x61 && ch <= 0x7A) || // a..z\n      (ch === 0x5C) || // \\ (backslash)\n      ((ch >= 0x80) && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch)));\n  }\n\n  function isIdentifierPart(ch) {\n    return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\n      (ch >= 0x41 && ch <= 0x5A) || // A..Z\n      (ch >= 0x61 && ch <= 0x7A) || // a..z\n      (ch >= 0x30 && ch <= 0x39) || // 0..9\n      (ch === 0x5C) || // \\ (backslash)\n      ((ch >= 0x80) && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n  }\n\n  // 7.6.1.1 Keywords\n\n  var keywords = {\n    'if':1, 'in':1, 'do':1,\n    'var':1, 'for':1, 'new':1, 'try':1, 'let':1,\n    'this':1, 'else':1, 'case':1, 'void':1, 'with':1, 'enum':1,\n    'while':1, 'break':1, 'catch':1, 'throw':1, 'const':1, 'yield':1, 'class':1, 'super':1,\n    'return':1, 'typeof':1, 'delete':1, 'switch':1, 'export':1, 'import':1, 'public':1, 'static':1,\n    'default':1, 'finally':1, 'extends':1, 'package':1, 'private':1,\n    'function':1, 'continue':1, 'debugger':1,\n    'interface':1, 'protected':1,\n    'instanceof':1, 'implements':1\n  };\n\n  function skipComment() {\n    var ch;\n\n    while (index < length) {\n      ch = source.charCodeAt(index);\n\n      if (isWhiteSpace(ch) || isLineTerminator(ch)) {\n        ++index;\n      } else {\n        break;\n      }\n    }\n  }\n\n  function scanHexEscape(prefix) {\n    var i, len, ch, code = 0;\n\n    len = (prefix === 'u') ? 4 : 2;\n    for (i = 0; i < len; ++i) {\n      if (index < length && isHexDigit(source[index])) {\n        ch = source[index++];\n        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n      } else {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n    }\n    return String.fromCharCode(code);\n  }\n\n  function scanUnicodeCodePointEscape() {\n    var ch, code, cu1, cu2;\n\n    ch = source[index];\n    code = 0;\n\n    // At least, one hex digit is required.\n    if (ch === '}') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    while (index < length) {\n      ch = source[index++];\n      if (!isHexDigit(ch)) {\n        break;\n      }\n      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n    }\n\n    if (code > 0x10FFFF || ch !== '}') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    // UTF-16 Encoding\n    if (code <= 0xFFFF) {\n      return String.fromCharCode(code);\n    }\n    cu1 = ((code - 0x10000) >> 10) + 0xD800;\n    cu2 = ((code - 0x10000) & 1023) + 0xDC00;\n    return String.fromCharCode(cu1, cu2);\n  }\n\n  function getEscapedIdentifier() {\n    var ch, id;\n\n    ch = source.charCodeAt(index++);\n    id = String.fromCharCode(ch);\n\n    // '\\u' (U+005C, U+0075) denotes an escaped character.\n    if (ch === 0x5C) {\n      if (source.charCodeAt(index) !== 0x75) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n      ++index;\n      ch = scanHexEscape('u');\n      if (!ch || ch === '\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n      id = ch;\n    }\n\n    while (index < length) {\n      ch = source.charCodeAt(index);\n      if (!isIdentifierPart(ch)) {\n        break;\n      }\n      ++index;\n      id += String.fromCharCode(ch);\n\n      // '\\u' (U+005C, U+0075) denotes an escaped character.\n      if (ch === 0x5C) {\n        id = id.substr(0, id.length - 1);\n        if (source.charCodeAt(index) !== 0x75) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL);\n        }\n        ++index;\n        ch = scanHexEscape('u');\n        if (!ch || ch === '\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL);\n        }\n        id += ch;\n      }\n    }\n\n    return id;\n  }\n\n  function getIdentifier() {\n    var start, ch;\n\n    start = index++;\n    while (index < length) {\n      ch = source.charCodeAt(index);\n      if (ch === 0x5C) {\n        // Blackslash (U+005C) marks Unicode escape sequence.\n        index = start;\n        return getEscapedIdentifier();\n      }\n      if (isIdentifierPart(ch)) {\n        ++index;\n      } else {\n        break;\n      }\n    }\n\n    return source.slice(start, index);\n  }\n\n  function scanIdentifier() {\n    var start, id, type;\n\n    start = index;\n\n    // Backslash (U+005C) starts an escaped character.\n    id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();\n\n    // There is no keyword or literal with only one character.\n    // Thus, it must be an identifier.\n    if (id.length === 1) {\n      type = TokenIdentifier;\n    } else if (keywords.hasOwnProperty(id)) { // eslint-disable-line no-prototype-builtins\n      type = TokenKeyword;\n    } else if (id === 'null') {\n      type = TokenNullLiteral;\n    } else if (id === 'true' || id === 'false') {\n      type = TokenBooleanLiteral;\n    } else {\n      type = TokenIdentifier;\n    }\n\n    return {\n      type: type,\n      value: id,\n      start: start,\n      end: index\n    };\n  }\n\n  // 7.7 Punctuators\n\n  function scanPunctuator() {\n    var start = index,\n      code = source.charCodeAt(index),\n      code2,\n      ch1 = source[index],\n      ch2,\n      ch3,\n      ch4;\n\n    switch (code) {\n\n      // Check for most common single-character punctuators.\n      case 0x2E: // . dot\n      case 0x28: // ( open bracket\n      case 0x29: // ) close bracket\n      case 0x3B: // ; semicolon\n      case 0x2C: // , comma\n      case 0x7B: // { open curly brace\n      case 0x7D: // } close curly brace\n      case 0x5B: // [\n      case 0x5D: // ]\n      case 0x3A: // :\n      case 0x3F: // ?\n      case 0x7E: // ~\n        ++index;\n        return {\n          type: TokenPunctuator,\n          value: String.fromCharCode(code),\n          start: start,\n          end: index\n        };\n\n      default:\n        code2 = source.charCodeAt(index + 1);\n\n        // '=' (U+003D) marks an assignment or comparison operator.\n        if (code2 === 0x3D) {\n          switch (code) {\n            case 0x2B: // +\n            case 0x2D: // -\n            case 0x2F: // /\n            case 0x3C: // <\n            case 0x3E: // >\n            case 0x5E: // ^\n            case 0x7C: // |\n            case 0x25: // %\n            case 0x26: // &\n            case 0x2A: // *\n              index += 2;\n              return {\n                type: TokenPunctuator,\n                value: String.fromCharCode(code) + String.fromCharCode(code2),\n                start: start,\n                end: index\n              };\n\n            case 0x21: // !\n            case 0x3D: // =\n              index += 2;\n\n              // !== and ===\n              if (source.charCodeAt(index) === 0x3D) {\n                ++index;\n              }\n              return {\n                type: TokenPunctuator,\n                value: source.slice(start, index),\n                start: start,\n                end: index\n              };\n          }\n        }\n    }\n\n    // 4-character punctuator: >>>=\n\n    ch4 = source.substr(index, 4);\n\n    if (ch4 === '>>>=') {\n      index += 4;\n      return {\n        type: TokenPunctuator,\n        value: ch4,\n        start: start,\n        end: index\n      };\n    }\n\n    // 3-character punctuators: === !== >>> <<= >>=\n\n    ch3 = ch4.substr(0, 3);\n\n    if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\n      index += 3;\n      return {\n        type: TokenPunctuator,\n        value: ch3,\n        start: start,\n        end: index\n      };\n    }\n\n    // Other 2-character punctuators: ++ -- << >> && ||\n    ch2 = ch3.substr(0, 2);\n\n    if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {\n      index += 2;\n      return {\n        type: TokenPunctuator,\n        value: ch2,\n        start: start,\n        end: index\n      };\n    }\n\n    // 1-character punctuators: < > = ! + - * % & | ^ /\n\n    if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n      ++index;\n      return {\n        type: TokenPunctuator,\n        value: ch1,\n        start: start,\n        end: index\n      };\n    }\n\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  // 7.8.3 Numeric Literals\n\n  function scanHexLiteral(start) {\n    var number = '';\n\n    while (index < length) {\n      if (!isHexDigit(source[index])) {\n        break;\n      }\n      number += source[index++];\n    }\n\n    if (number.length === 0) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    if (isIdentifierStart(source.charCodeAt(index))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseInt('0x' + number, 16),\n      start: start,\n      end: index\n    };\n  }\n\n  function scanOctalLiteral(start) {\n    var number = '0' + source[index++];\n    while (index < length) {\n      if (!isOctalDigit(source[index])) {\n        break;\n      }\n      number += source[index++];\n    }\n\n    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseInt(number, 8),\n      octal: true,\n      start: start,\n      end: index\n    };\n  }\n\n  function scanNumericLiteral() {\n    var number, start, ch;\n\n    ch = source[index];\n    assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\n      'Numeric literal must start with a decimal digit or a decimal point');\n\n    start = index;\n    number = '';\n    if (ch !== '.') {\n      number = source[index++];\n      ch = source[index];\n\n      // Hex number starts with '0x'.\n      // Octal number starts with '0'.\n      if (number === '0') {\n        if (ch === 'x' || ch === 'X') {\n          ++index;\n          return scanHexLiteral(start);\n        }\n        if (isOctalDigit(ch)) {\n          return scanOctalLiteral(start);\n        }\n\n        // decimal number starts with '0' such as '09' is illegal.\n        if (ch && isDecimalDigit(ch.charCodeAt(0))) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL);\n        }\n      }\n\n      while (isDecimalDigit(source.charCodeAt(index))) {\n        number += source[index++];\n      }\n      ch = source[index];\n    }\n\n    if (ch === '.') {\n      number += source[index++];\n      while (isDecimalDigit(source.charCodeAt(index))) {\n        number += source[index++];\n      }\n      ch = source[index];\n    }\n\n    if (ch === 'e' || ch === 'E') {\n      number += source[index++];\n\n      ch = source[index];\n      if (ch === '+' || ch === '-') {\n        number += source[index++];\n      }\n      if (isDecimalDigit(source.charCodeAt(index))) {\n        while (isDecimalDigit(source.charCodeAt(index))) {\n          number += source[index++];\n        }\n      } else {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n    }\n\n    if (isIdentifierStart(source.charCodeAt(index))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseFloat(number),\n      start: start,\n      end: index\n    };\n  }\n\n  // 7.8.4 String Literals\n\n  function scanStringLiteral() {\n    var str = '',\n      quote, start, ch, code, octal = false;\n\n    quote = source[index];\n    assert((quote === '\\'' || quote === '\"'),\n      'String literal must starts with a quote');\n\n    start = index;\n    ++index;\n\n    while (index < length) {\n      ch = source[index++];\n\n      if (ch === quote) {\n        quote = '';\n        break;\n      } else if (ch === '\\\\') {\n        ch = source[index++];\n        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n          switch (ch) {\n            case 'u':\n            case 'x':\n              if (source[index] === '{') {\n                ++index;\n                str += scanUnicodeCodePointEscape();\n              } else {\n                str += scanHexEscape(ch);\n              }\n              break;\n            case 'n':\n              str += '\\n';\n              break;\n            case 'r':\n              str += '\\r';\n              break;\n            case 't':\n              str += '\\t';\n              break;\n            case 'b':\n              str += '\\b';\n              break;\n            case 'f':\n              str += '\\f';\n              break;\n            case 'v':\n              str += '\\x0B';\n              break;\n\n            default:\n              if (isOctalDigit(ch)) {\n                code = '01234567'.indexOf(ch);\n\n                // \\0 is not octal escape sequence\n                if (code !== 0) {\n                  octal = true;\n                }\n\n                if (index < length && isOctalDigit(source[index])) {\n                  octal = true;\n                  code = code * 8 + '01234567'.indexOf(source[index++]);\n\n                  // 3 digits are only allowed when string starts\n                  // with 0, 1, 2, 3\n                  if ('0123'.indexOf(ch) >= 0 &&\n                    index < length &&\n                    isOctalDigit(source[index])) {\n                    code = code * 8 + '01234567'.indexOf(source[index++]);\n                  }\n                }\n                str += String.fromCharCode(code);\n              } else {\n                str += ch;\n              }\n              break;\n          }\n        } else {\n          if (ch === '\\r' && source[index] === '\\n') {\n            ++index;\n          }\n        }\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\n        break;\n      } else {\n        str += ch;\n      }\n    }\n\n    if (quote !== '') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    return {\n      type: TokenStringLiteral,\n      value: str,\n      octal: octal,\n      start: start,\n      end: index\n    };\n  }\n\n  function testRegExp(pattern, flags) {\n    var tmp = pattern;\n\n    if (flags.indexOf('u') >= 0) {\n      // Replace each astral symbol and every Unicode code point\n      // escape sequence with a single ASCII symbol to avoid throwing on\n      // regular expressions that are only valid in combination with the\n      // `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it\n      // would be replaced by `[x-b]` which throws an error.\n      tmp = tmp\n        .replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, ($0, $1) => {\n          if (parseInt($1, 16) <= 0x10FFFF) {\n            return 'x';\n          }\n          throwError({}, MessageInvalidRegExp);\n        })\n        .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, 'x');\n    }\n\n    // First, detect invalid regular expressions.\n    try {\n      new RegExp(tmp);\n    } catch (e) {\n      throwError({}, MessageInvalidRegExp);\n    }\n\n    // Return a regular expression object for this pattern-flag pair, or\n    // `null` in case the current environment doesn't support the flags it\n    // uses.\n    try {\n      return new RegExp(pattern, flags);\n    } catch (exception) {\n      return null;\n    }\n  }\n\n  function scanRegExpBody() {\n    var ch, str, classMarker, terminated, body;\n\n    ch = source[index];\n    assert(ch === '/', 'Regular expression literal must start with a slash');\n    str = source[index++];\n\n    classMarker = false;\n    terminated = false;\n    while (index < length) {\n      ch = source[index++];\n      str += ch;\n      if (ch === '\\\\') {\n        ch = source[index++];\n        // ECMA-262 7.8.5\n        if (isLineTerminator(ch.charCodeAt(0))) {\n          throwError({}, MessageUnterminatedRegExp);\n        }\n        str += ch;\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\n        throwError({}, MessageUnterminatedRegExp);\n      } else if (classMarker) {\n        if (ch === ']') {\n          classMarker = false;\n        }\n      } else {\n        if (ch === '/') {\n          terminated = true;\n          break;\n        } else if (ch === '[') {\n          classMarker = true;\n        }\n      }\n    }\n\n    if (!terminated) {\n      throwError({}, MessageUnterminatedRegExp);\n    }\n\n    // Exclude leading and trailing slash.\n    body = str.substr(1, str.length - 2);\n    return {\n      value: body,\n      literal: str\n    };\n  }\n\n  function scanRegExpFlags() {\n    var ch, str, flags;\n\n    str = '';\n    flags = '';\n    while (index < length) {\n      ch = source[index];\n      if (!isIdentifierPart(ch.charCodeAt(0))) {\n        break;\n      }\n\n      ++index;\n      if (ch === '\\\\' && index < length) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      } else {\n        flags += ch;\n        str += ch;\n      }\n    }\n\n    if (flags.search(/[^gimuy]/g) >= 0) {\n      throwError({}, MessageInvalidRegExp, flags);\n    }\n\n    return {\n      value: flags,\n      literal: str\n    };\n  }\n\n  function scanRegExp() {\n    var start, body, flags, value;\n\n    lookahead = null;\n    skipComment();\n    start = index;\n\n    body = scanRegExpBody();\n    flags = scanRegExpFlags();\n    value = testRegExp(body.value, flags.value);\n\n    return {\n      literal: body.literal + flags.literal,\n      value: value,\n      regex: {\n        pattern: body.value,\n        flags: flags.value\n      },\n      start: start,\n      end: index\n    };\n  }\n\n  function isIdentifierName(token) {\n    return token.type === TokenIdentifier ||\n      token.type === TokenKeyword ||\n      token.type === TokenBooleanLiteral ||\n      token.type === TokenNullLiteral;\n  }\n\n  function advance() {\n    var ch;\n\n    skipComment();\n\n    if (index >= length) {\n      return {\n        type: TokenEOF,\n        start: index,\n        end: index\n      };\n    }\n\n    ch = source.charCodeAt(index);\n\n    if (isIdentifierStart(ch)) {\n      return scanIdentifier();\n    }\n\n    // Very common: ( and ) and ;\n    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\n      return scanPunctuator();\n    }\n\n    // String literal starts with single quote (U+0027) or double quote (U+0022).\n    if (ch === 0x27 || ch === 0x22) {\n      return scanStringLiteral();\n    }\n\n\n    // Dot (.) U+002E can also start a floating-point number, hence the need\n    // to check the next character.\n    if (ch === 0x2E) {\n      if (isDecimalDigit(source.charCodeAt(index + 1))) {\n        return scanNumericLiteral();\n      }\n      return scanPunctuator();\n    }\n\n    if (isDecimalDigit(ch)) {\n      return scanNumericLiteral();\n    }\n\n    return scanPunctuator();\n  }\n\n  function lex() {\n    var token;\n\n    token = lookahead;\n    index = token.end;\n\n    lookahead = advance();\n\n    index = token.end;\n\n    return token;\n  }\n\n  function peek() {\n    var pos;\n\n    pos = index;\n\n    lookahead = advance();\n    index = pos;\n  }\n\n  function finishArrayExpression(elements) {\n    var node = new ASTNode(SyntaxArrayExpression);\n    node.elements = elements;\n    return node;\n  }\n\n  function finishBinaryExpression(operator, left, right) {\n    var node = new ASTNode((operator === '||' || operator === '&&') ? SyntaxLogicalExpression : SyntaxBinaryExpression);\n    node.operator = operator;\n    node.left = left;\n    node.right = right;\n    return node;\n  }\n\n  function finishCallExpression(callee, args) {\n    var node = new ASTNode(SyntaxCallExpression);\n    node.callee = callee;\n    node.arguments = args;\n    return node;\n  }\n\n  function finishConditionalExpression(test, consequent, alternate) {\n    var node = new ASTNode(SyntaxConditionalExpression);\n    node.test = test;\n    node.consequent = consequent;\n    node.alternate = alternate;\n    return node;\n  }\n\n  function finishIdentifier(name) {\n    var node = new ASTNode(SyntaxIdentifier);\n    node.name = name;\n    return node;\n  }\n\n  function finishLiteral(token) {\n    var node = new ASTNode(SyntaxLiteral);\n    node.value = token.value;\n    node.raw = source.slice(token.start, token.end);\n    if (token.regex) {\n      if (node.raw === '//') {\n        node.raw = '/(?:)/';\n      }\n      node.regex = token.regex;\n    }\n    return node;\n  }\n\n  function finishMemberExpression(accessor, object, property) {\n    var node = new ASTNode(SyntaxMemberExpression);\n    node.computed = accessor === '[';\n    node.object = object;\n    node.property = property;\n    if (!node.computed) property.member = true;\n    return node;\n  }\n\n  function finishObjectExpression(properties) {\n    var node = new ASTNode(SyntaxObjectExpression);\n    node.properties = properties;\n    return node;\n  }\n\n  function finishProperty(kind, key, value) {\n    var node = new ASTNode(SyntaxProperty);\n    node.key = key;\n    node.value = value;\n    node.kind = kind;\n    return node;\n  }\n\n  function finishUnaryExpression(operator, argument) {\n    var node = new ASTNode(SyntaxUnaryExpression);\n    node.operator = operator;\n    node.argument = argument;\n    node.prefix = true;\n    return node;\n  }\n\n  // Throw an exception\n\n  function throwError(token, messageFormat) {\n    var error,\n      args = Array.prototype.slice.call(arguments, 2),\n      msg = messageFormat.replace(\n        /%(\\d)/g,\n        (whole, index) => {\n          assert(index < args.length, 'Message reference must be in range');\n          return args[index];\n        }\n      );\n\n\n    error = new Error(msg);\n    error.index = index;\n    error.description = msg;\n    throw error;\n  }\n\n  // Throw an exception because of the token.\n\n  function throwUnexpected(token) {\n    if (token.type === TokenEOF) {\n      throwError(token, MessageUnexpectedEOS);\n    }\n\n    if (token.type === TokenNumericLiteral) {\n      throwError(token, MessageUnexpectedNumber);\n    }\n\n    if (token.type === TokenStringLiteral) {\n      throwError(token, MessageUnexpectedString);\n    }\n\n    if (token.type === TokenIdentifier) {\n      throwError(token, MessageUnexpectedIdentifier);\n    }\n\n    if (token.type === TokenKeyword) {\n      throwError(token, MessageUnexpectedReserved);\n    }\n\n    // BooleanLiteral, NullLiteral, or Punctuator.\n    throwError(token, MessageUnexpectedToken, token.value);\n  }\n\n  // Expect the next token to match the specified punctuator.\n  // If not, an exception will be thrown.\n\n  function expect(value) {\n    var token = lex();\n    if (token.type !== TokenPunctuator || token.value !== value) {\n      throwUnexpected(token);\n    }\n  }\n\n  // Return true if the next token matches the specified punctuator.\n\n  function match(value) {\n    return lookahead.type === TokenPunctuator && lookahead.value === value;\n  }\n\n  // Return true if the next token matches the specified keyword\n\n  function matchKeyword(keyword) {\n    return lookahead.type === TokenKeyword && lookahead.value === keyword;\n  }\n\n  // 11.1.4 Array Initialiser\n\n  function parseArrayInitialiser() {\n    var elements = [];\n\n    index = lookahead.start;\n    expect('[');\n\n    while (!match(']')) {\n      if (match(',')) {\n        lex();\n        elements.push(null);\n      } else {\n        elements.push(parseConditionalExpression());\n\n        if (!match(']')) {\n          expect(',');\n        }\n      }\n    }\n\n    lex();\n\n    return finishArrayExpression(elements);\n  }\n\n  // 11.1.5 Object Initialiser\n\n  function parseObjectPropertyKey() {\n    var token;\n\n    index = lookahead.start;\n    token = lex();\n\n    // Note: This function is called only from parseObjectProperty(), where\n    // EOF and Punctuator tokens are already filtered out.\n\n    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {\n      if (token.octal) {\n        throwError(token, MessageStrictOctalLiteral);\n      }\n      return finishLiteral(token);\n    }\n\n    return finishIdentifier(token.value);\n  }\n\n  function parseObjectProperty() {\n    var token, key, id, value;\n\n    index = lookahead.start;\n    token = lookahead;\n\n    if (token.type === TokenIdentifier) {\n      id = parseObjectPropertyKey();\n      expect(':');\n      value = parseConditionalExpression();\n      return finishProperty('init', id, value);\n    }\n    if (token.type === TokenEOF || token.type === TokenPunctuator) {\n      throwUnexpected(token);\n    } else {\n      key = parseObjectPropertyKey();\n      expect(':');\n      value = parseConditionalExpression();\n      return finishProperty('init', key, value);\n    }\n  }\n\n  function parseObjectInitialiser() {\n    var properties = [],\n      property, name, key, map = {},\n      toString = String;\n\n    index = lookahead.start;\n    expect('{');\n\n    while (!match('}')) {\n      property = parseObjectProperty();\n\n      if (property.key.type === SyntaxIdentifier) {\n        name = property.key.name;\n      } else {\n        name = toString(property.key.value);\n      }\n\n      key = '$' + name;\n      if (Object.prototype.hasOwnProperty.call(map, key)) {\n        throwError({}, MessageStrictDuplicateProperty);\n      } else {\n        map[key] = true;\n      }\n\n      properties.push(property);\n\n      if (!match('}')) {\n        expect(',');\n      }\n    }\n\n    expect('}');\n\n    return finishObjectExpression(properties);\n  }\n\n  // 11.1.6 The Grouping Operator\n\n  function parseGroupExpression() {\n    var expr;\n\n    expect('(');\n\n    expr = parseExpression();\n\n    expect(')');\n\n    return expr;\n  }\n\n\n  // 11.1 Primary Expressions\n\n  var legalKeywords = {\n    'if': 1\n  };\n\n  function parsePrimaryExpression() {\n    var type, token, expr;\n\n    if (match('(')) {\n      return parseGroupExpression();\n    }\n\n    if (match('[')) {\n      return parseArrayInitialiser();\n    }\n\n    if (match('{')) {\n      return parseObjectInitialiser();\n    }\n\n    type = lookahead.type;\n    index = lookahead.start;\n\n\n    if (type === TokenIdentifier || legalKeywords[lookahead.value]) {\n      expr = finishIdentifier(lex().value);\n    } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {\n      if (lookahead.octal) {\n        throwError(lookahead, MessageStrictOctalLiteral);\n      }\n      expr = finishLiteral(lex());\n    } else if (type === TokenKeyword) {\n      throw new Error(DISABLED);\n    } else if (type === TokenBooleanLiteral) {\n      token = lex();\n      token.value = (token.value === 'true');\n      expr = finishLiteral(token);\n    } else if (type === TokenNullLiteral) {\n      token = lex();\n      token.value = null;\n      expr = finishLiteral(token);\n    } else if (match('/') || match('/=')) {\n      expr = finishLiteral(scanRegExp());\n      peek();\n    } else {\n      throwUnexpected(lex());\n    }\n\n    return expr;\n  }\n\n  // 11.2 Left-Hand-Side Expressions\n\n  function parseArguments() {\n    var args = [];\n\n    expect('(');\n\n    if (!match(')')) {\n      while (index < length) {\n        args.push(parseConditionalExpression());\n        if (match(')')) {\n          break;\n        }\n        expect(',');\n      }\n    }\n\n    expect(')');\n\n    return args;\n  }\n\n  function parseNonComputedProperty() {\n    var token;\n    index = lookahead.start;\n    token = lex();\n\n    if (!isIdentifierName(token)) {\n      throwUnexpected(token);\n    }\n\n    return finishIdentifier(token.value);\n  }\n\n  function parseNonComputedMember() {\n    expect('.');\n\n    return parseNonComputedProperty();\n  }\n\n  function parseComputedMember() {\n    var expr;\n\n    expect('[');\n\n    expr = parseExpression();\n\n    expect(']');\n\n    return expr;\n  }\n\n  function parseLeftHandSideExpressionAllowCall() {\n    var expr, args, property;\n\n    expr = parsePrimaryExpression();\n\n    for (;;) {\n      if (match('.')) {\n        property = parseNonComputedMember();\n        expr = finishMemberExpression('.', expr, property);\n      } else if (match('(')) {\n        args = parseArguments();\n        expr = finishCallExpression(expr, args);\n      } else if (match('[')) {\n        property = parseComputedMember();\n        expr = finishMemberExpression('[', expr, property);\n      } else {\n        break;\n      }\n    }\n\n    return expr;\n  }\n\n  // 11.3 Postfix Expressions\n\n  function parsePostfixExpression() {\n    var expr = parseLeftHandSideExpressionAllowCall();\n\n    if (lookahead.type === TokenPunctuator) {\n      if ((match('++') || match('--'))) {\n        throw new Error(DISABLED);\n      }\n    }\n\n    return expr;\n  }\n\n  // 11.4 Unary Operators\n\n  function parseUnaryExpression() {\n    var token, expr;\n\n    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {\n      expr = parsePostfixExpression();\n    } else if (match('++') || match('--')) {\n      throw new Error(DISABLED);\n    } else if (match('+') || match('-') || match('~') || match('!')) {\n      token = lex();\n      expr = parseUnaryExpression();\n      expr = finishUnaryExpression(token.value, expr);\n    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n      throw new Error(DISABLED);\n    } else {\n      expr = parsePostfixExpression();\n    }\n\n    return expr;\n  }\n\n  function binaryPrecedence(token) {\n    var prec = 0;\n\n    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {\n      return 0;\n    }\n\n    switch (token.value) {\n      case '||':\n        prec = 1;\n        break;\n\n      case '&&':\n        prec = 2;\n        break;\n\n      case '|':\n        prec = 3;\n        break;\n\n      case '^':\n        prec = 4;\n        break;\n\n      case '&':\n        prec = 5;\n        break;\n\n      case '==':\n      case '!=':\n      case '===':\n      case '!==':\n        prec = 6;\n        break;\n\n      case '<':\n      case '>':\n      case '<=':\n      case '>=':\n      case 'instanceof':\n      case 'in':\n        prec = 7;\n        break;\n\n      case '<<':\n      case '>>':\n      case '>>>':\n        prec = 8;\n        break;\n\n      case '+':\n      case '-':\n        prec = 9;\n        break;\n\n      case '*':\n      case '/':\n      case '%':\n        prec = 11;\n        break;\n    }\n\n    return prec;\n  }\n\n  // 11.5 Multiplicative Operators\n  // 11.6 Additive Operators\n  // 11.7 Bitwise Shift Operators\n  // 11.8 Relational Operators\n  // 11.9 Equality Operators\n  // 11.10 Binary Bitwise Operators\n  // 11.11 Binary Logical Operators\n\n  function parseBinaryExpression() {\n    var marker, markers, expr, token, prec, stack, right, operator, left, i;\n\n    marker = lookahead;\n    left = parseUnaryExpression();\n\n    token = lookahead;\n    prec = binaryPrecedence(token);\n    if (prec === 0) {\n      return left;\n    }\n    token.prec = prec;\n    lex();\n\n    markers = [marker, lookahead];\n    right = parseUnaryExpression();\n\n    stack = [left, token, right];\n\n    while ((prec = binaryPrecedence(lookahead)) > 0) {\n\n      // Reduce: make a binary expression from the three topmost entries.\n      while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n        right = stack.pop();\n        operator = stack.pop().value;\n        left = stack.pop();\n        markers.pop();\n        expr = finishBinaryExpression(operator, left, right);\n        stack.push(expr);\n      }\n\n      // Shift.\n      token = lex();\n      token.prec = prec;\n      stack.push(token);\n      markers.push(lookahead);\n      expr = parseUnaryExpression();\n      stack.push(expr);\n    }\n\n    // Final reduce to clean-up the stack.\n    i = stack.length - 1;\n    expr = stack[i];\n    markers.pop();\n    while (i > 1) {\n      markers.pop();\n      expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n      i -= 2;\n    }\n\n    return expr;\n  }\n\n  // 11.12 Conditional Operator\n\n  function parseConditionalExpression() {\n    var expr, consequent, alternate;\n\n    expr = parseBinaryExpression();\n\n    if (match('?')) {\n      lex();\n      consequent = parseConditionalExpression();\n      expect(':');\n      alternate = parseConditionalExpression();\n\n      expr = finishConditionalExpression(expr, consequent, alternate);\n    }\n\n    return expr;\n  }\n\n  // 11.14 Comma Operator\n\n  function parseExpression() {\n    var expr = parseConditionalExpression();\n\n    if (match(',')) {\n      throw new Error(DISABLED); // no sequence expressions\n    }\n\n    return expr;\n  }\n\n  function parser(code) {\n    source = code;\n    index = 0;\n    length = source.length;\n    lookahead = null;\n\n    peek();\n\n    var expr = parseExpression();\n\n    if (lookahead.type !== TokenEOF) {\n      throw new Error('Unexpect token after expression.');\n    }\n    return expr;\n  }\n\n  var Constants = {\n    NaN:       'NaN',\n    E:         'Math.E',\n    LN2:       'Math.LN2',\n    LN10:      'Math.LN10',\n    LOG2E:     'Math.LOG2E',\n    LOG10E:    'Math.LOG10E',\n    PI:        'Math.PI',\n    SQRT1_2:   'Math.SQRT1_2',\n    SQRT2:     'Math.SQRT2',\n    MIN_VALUE: 'Number.MIN_VALUE',\n    MAX_VALUE: 'Number.MAX_VALUE'\n  };\n\n  function Functions(codegen) {\n\n    function fncall(name, args, cast, type) {\n      let obj = codegen(args[0]);\n      if (cast) {\n        obj = cast + '(' + obj + ')';\n        if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';\n      }\n      return obj + '.' + name + (type < 0 ? '' : type === 0 ?\n        '()' :\n        '(' + args.slice(1).map(codegen).join(',') + ')');\n    }\n\n    function fn(name, cast, type) {\n      return args => fncall(name, args, cast, type);\n    }\n\n    const DATE = 'new Date',\n          STRING = 'String',\n          REGEXP = 'RegExp';\n\n    return {\n      // MATH functions\n      isNaN:    'Number.isNaN',\n      isFinite: 'Number.isFinite',\n      abs:      'Math.abs',\n      acos:     'Math.acos',\n      asin:     'Math.asin',\n      atan:     'Math.atan',\n      atan2:    'Math.atan2',\n      ceil:     'Math.ceil',\n      cos:      'Math.cos',\n      exp:      'Math.exp',\n      floor:    'Math.floor',\n      log:      'Math.log',\n      max:      'Math.max',\n      min:      'Math.min',\n      pow:      'Math.pow',\n      random:   'Math.random',\n      round:    'Math.round',\n      sin:      'Math.sin',\n      sqrt:     'Math.sqrt',\n      tan:      'Math.tan',\n\n      clamp: function(args) {\n        if (args.length < 3) vegaUtil.error('Missing arguments to clamp function.');\n        if (args.length > 3) vegaUtil.error('Too many arguments to clamp function.');\n        const a = args.map(codegen);\n        return 'Math.max('+a[1]+', Math.min('+a[2]+','+a[0]+'))';\n      },\n\n      // DATE functions\n      now:             'Date.now',\n      utc:             'Date.UTC',\n      datetime:        DATE,\n      date:            fn('getDate', DATE, 0),\n      day:             fn('getDay', DATE, 0),\n      year:            fn('getFullYear', DATE, 0),\n      month:           fn('getMonth', DATE, 0),\n      hours:           fn('getHours', DATE, 0),\n      minutes:         fn('getMinutes', DATE, 0),\n      seconds:         fn('getSeconds', DATE, 0),\n      milliseconds:    fn('getMilliseconds', DATE, 0),\n      time:            fn('getTime', DATE, 0),\n      timezoneoffset:  fn('getTimezoneOffset', DATE, 0),\n      utcdate:         fn('getUTCDate', DATE, 0),\n      utcday:          fn('getUTCDay', DATE, 0),\n      utcyear:         fn('getUTCFullYear', DATE, 0),\n      utcmonth:        fn('getUTCMonth', DATE, 0),\n      utchours:        fn('getUTCHours', DATE, 0),\n      utcminutes:      fn('getUTCMinutes', DATE, 0),\n      utcseconds:      fn('getUTCSeconds', DATE, 0),\n      utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),\n\n      // sequence functions\n      length:      fn('length', null, -1),\n      join:        fn('join', null),\n      indexof:     fn('indexOf', null),\n      lastindexof: fn('lastIndexOf', null),\n      slice:       fn('slice', null),\n\n      reverse: function(args) {\n        return '('+codegen(args[0])+').slice().reverse()';\n      },\n\n      // STRING functions\n      parseFloat:  'parseFloat',\n      parseInt:    'parseInt',\n      upper:       fn('toUpperCase', STRING, 0),\n      lower:       fn('toLowerCase', STRING, 0),\n      substring:   fn('substring', STRING),\n      split:       fn('split', STRING),\n      replace:     fn('replace', STRING),\n      trim:        fn('trim', STRING, 0),\n\n      // REGEXP functions\n      regexp:  REGEXP,\n      test:    fn('test', REGEXP),\n\n      // Control Flow functions\n      if: function(args) {\n          if (args.length < 3) vegaUtil.error('Missing arguments to if function.');\n          if (args.length > 3) vegaUtil.error('Too many arguments to if function.');\n          const a = args.map(codegen);\n          return '('+a[0]+'?'+a[1]+':'+a[2]+')';\n        }\n    };\n  }\n\n  function stripQuotes(s) {\n    const n = s && s.length - 1;\n    return n && (\n        (s[0]==='\"' && s[n]==='\"') ||\n        (s[0]==='\\'' && s[n]==='\\'')\n      ) ? s.slice(1, -1) : s;\n  }\n\n  function codegen(opt) {\n    opt = opt || {};\n\n    const whitelist = opt.whitelist ? vegaUtil.toSet(opt.whitelist) : {},\n          blacklist = opt.blacklist ? vegaUtil.toSet(opt.blacklist) : {},\n          constants = opt.constants || Constants,\n          functions = (opt.functions || Functions)(visit),\n          globalvar = opt.globalvar,\n          fieldvar = opt.fieldvar,\n          outputGlobal = vegaUtil.isFunction(globalvar)\n            ? globalvar\n            : id => `${globalvar}[\"${id}\"]`;\n\n    let globals = {},\n        fields = {},\n        memberDepth = 0;\n\n    function visit(ast) {\n      if (vegaUtil.isString(ast)) return ast;\n      const generator = Generators[ast.type];\n      if (generator == null) vegaUtil.error('Unsupported type: ' + ast.type);\n      return generator(ast);\n    }\n\n    const Generators = {\n      Literal: n => n.raw,\n\n      Identifier: n => {\n        const id = n.name;\n        if (memberDepth > 0) {\n          return id;\n        } else if (vegaUtil.hasOwnProperty(blacklist, id)) {\n          return vegaUtil.error('Illegal identifier: ' + id);\n        } else if (vegaUtil.hasOwnProperty(constants, id)) {\n          return constants[id];\n        } else if (vegaUtil.hasOwnProperty(whitelist, id)) {\n          return id;\n        } else {\n          globals[id] = 1;\n          return outputGlobal(id);\n        }\n      },\n\n      MemberExpression: n => {\n          const d = !n.computed,\n                o = visit(n.object);\n          if (d) memberDepth += 1;\n          const p = visit(n.property);\n          if (o === fieldvar) {\n            // strip quotes to sanitize field name (#1653)\n            fields[stripQuotes(p)] = 1;\n          }\n          if (d) memberDepth -= 1;\n          return o + (d ? '.'+p : '['+p+']');\n        },\n\n      CallExpression: n => {\n          if (n.callee.type !== 'Identifier') {\n            vegaUtil.error('Illegal callee type: ' + n.callee.type);\n          }\n          const callee = n.callee.name,\n                args = n.arguments,\n                fn = vegaUtil.hasOwnProperty(functions, callee) && functions[callee];\n          if (!fn) vegaUtil.error('Unrecognized function: ' + callee);\n          return vegaUtil.isFunction(fn)\n            ? fn(args)\n            : fn + '(' + args.map(visit).join(',') + ')';\n        },\n\n      ArrayExpression: n =>\n          '[' + n.elements.map(visit).join(',') + ']',\n\n      BinaryExpression: n =>\n          '(' + visit(n.left) + n.operator + visit(n.right) + ')',\n\n      UnaryExpression: n =>\n          '(' + n.operator + visit(n.argument) + ')',\n\n      ConditionalExpression: n =>\n          '(' + visit(n.test) +\n            '?' + visit(n.consequent) +\n            ':' + visit(n.alternate) +\n            ')',\n\n      LogicalExpression: n =>\n          '(' + visit(n.left) + n.operator + visit(n.right) + ')',\n\n      ObjectExpression: n =>\n          '{' + n.properties.map(visit).join(',') + '}',\n\n      Property: n => {\n          memberDepth += 1;\n          const k = visit(n.key);\n          memberDepth -= 1;\n          return k + ':' + visit(n.value);\n        }\n    };\n\n    function codegen(ast) {\n      const result = {\n        code:    visit(ast),\n        globals: Object.keys(globals),\n        fields:  Object.keys(fields)\n      };\n      globals = {};\n      fields = {};\n      return result;\n    }\n\n    codegen.functions = functions;\n    codegen.constants = constants;\n\n    return codegen;\n  }\n\n  exports.ASTNode = ASTNode;\n  exports.ArrayExpression = ArrayExpression;\n  exports.BinaryExpression = BinaryExpression;\n  exports.CallExpression = CallExpression;\n  exports.ConditionalExpression = ConditionalExpression;\n  exports.Identifier = Identifier;\n  exports.Literal = Literal;\n  exports.LogicalExpression = LogicalExpression;\n  exports.MemberExpression = MemberExpression;\n  exports.ObjectExpression = ObjectExpression;\n  exports.Property = Property;\n  exports.RawCode = RawCode;\n  exports.UnaryExpression = UnaryExpression;\n  exports.codegen = codegen;\n  exports.constants = Constants;\n  exports.functions = Functions;\n  exports.parse = parser;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$vega_util$build$vega_util"]],"~:properties",["^5",["properties","NaN","constants","floor","ceil","object","UnaryExpression","LOG10E","random","member","PI","utcmilliseconds","min","trim","utchours","right","milliseconds","LN2","index","upper","utcday","prefix","codegen","hours","ConditionalExpression","atan2","visit","operator","indexof","reverse","key","__esModule","max","regex","parseFloat","pow","flags","vega","atan","MAX_VALUE","utc","log","lastindexof","substring","LogicalExpression","name","sin","replace","octal","MemberExpression","value","E","ASTNode","if","RawCode","regexp","exp","minutes","LN10","start","split","timezoneoffset","clamp","seconds","sqrt","functions","consequent","property","time","length","tan","datetime","cos","kind","callee","SQRT1_2","utcdate","Property","CallExpression","year","pattern","type","BinaryExpression","globals","abs","isNaN","fields","argument","join","slice","LOG2E","lower","isFinite","parse","date","ArrayExpression","arguments","alternate","utcmonth","now","utcminutes","utcyear","prec","month","MIN_VALUE","day","raw","SQRT2","round","ObjectExpression","asin","literal","code","Literal","Identifier","end","elements","left","description","computed","test","acos","utcseconds","parseInt"]],"~:compiled-at",1600144480016,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$vega_expression$build$vega_expression.js\",\n\"lineCount\":54,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/vega-expression/build/vega-expression.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$vega_expression$build$vega_expression\\\"] = function(global,require,module,exports) {\\n(function (global, factory) {\\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util')) :\\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-util'], factory) :\\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega));\\n}(this, (function (exports, vegaUtil) { 'use strict';\\n\\n  const RawCode = 'RawCode';\\n  const Literal = 'Literal';\\n  const Property = 'Property';\\n  const Identifier = 'Identifier';\\n\\n  const ArrayExpression = 'ArrayExpression';\\n  const BinaryExpression = 'BinaryExpression';\\n  const CallExpression = 'CallExpression';\\n  const ConditionalExpression = 'ConditionalExpression';\\n  const LogicalExpression = 'LogicalExpression';\\n  const MemberExpression = 'MemberExpression';\\n  const ObjectExpression = 'ObjectExpression';\\n  const UnaryExpression = 'UnaryExpression';\\n\\n  function ASTNode(type) {\\n    this.type = type;\\n  }\\n\\n  ASTNode.prototype.visit = function(visitor) {\\n    let c, i, n;\\n\\n    if (visitor(this)) return 1;\\n\\n    for (c=children(this), i=0, n=c.length; i<n; ++i) {\\n      if (c[i].visit(visitor)) return 1;\\n    }\\n  };\\n\\n  function children(node) {\\n    switch (node.type) {\\n      case ArrayExpression:\\n        return node.elements;\\n      case BinaryExpression:\\n      case LogicalExpression:\\n        return [node.left, node.right];\\n      case CallExpression:\\n        return [node.callee].concat(node.arguments);\\n      case ConditionalExpression:\\n        return [node.test, node.consequent, node.alternate];\\n      case MemberExpression:\\n        return [node.object, node.property];\\n      case ObjectExpression:\\n        return node.properties;\\n      case Property:\\n        return [node.key, node.value];\\n      case UnaryExpression:\\n        return [node.argument];\\n      case Identifier:\\n      case Literal:\\n      case RawCode:\\n      default:\\n        return [];\\n    }\\n  }\\n\\n  /*\\n    The following expression parser is based on Esprima (http://esprima.org/).\\n    Original header comment and license for Esprima is included here:\\n\\n    Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\\n    Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\\n    Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\\n    Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\\n    Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\\n    Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\\n    Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\\n    Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\\n    Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\\n    Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\\n\\n    Redistribution and use in source and binary forms, with or without\\n    modification, are permitted provided that the following conditions are met:\\n\\n      * Redistributions of source code must retain the above copyright\\n        notice, this list of conditions and the following disclaimer.\\n      * Redistributions in binary form must reproduce the above copyright\\n        notice, this list of conditions and the following disclaimer in the\\n        documentation and/or other materials provided with the distribution.\\n\\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\\n    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\\n    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\n    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\\n    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\\n    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n  */\\n\\n  var TokenName,\\n      source,\\n      index,\\n      length,\\n      lookahead;\\n\\n  var TokenBooleanLiteral = 1,\\n      TokenEOF = 2,\\n      TokenIdentifier = 3,\\n      TokenKeyword = 4,\\n      TokenNullLiteral = 5,\\n      TokenNumericLiteral = 6,\\n      TokenPunctuator = 7,\\n      TokenStringLiteral = 8,\\n      TokenRegularExpression = 9;\\n\\n  TokenName = {};\\n  TokenName[TokenBooleanLiteral] = 'Boolean';\\n  TokenName[TokenEOF] = '<end>';\\n  TokenName[TokenIdentifier] = 'Identifier';\\n  TokenName[TokenKeyword] = 'Keyword';\\n  TokenName[TokenNullLiteral] = 'Null';\\n  TokenName[TokenNumericLiteral] = 'Numeric';\\n  TokenName[TokenPunctuator] = 'Punctuator';\\n  TokenName[TokenStringLiteral] = 'String';\\n  TokenName[TokenRegularExpression] = 'RegularExpression';\\n\\n  var SyntaxArrayExpression = 'ArrayExpression',\\n      SyntaxBinaryExpression = 'BinaryExpression',\\n      SyntaxCallExpression = 'CallExpression',\\n      SyntaxConditionalExpression = 'ConditionalExpression',\\n      SyntaxIdentifier = 'Identifier',\\n      SyntaxLiteral = 'Literal',\\n      SyntaxLogicalExpression = 'LogicalExpression',\\n      SyntaxMemberExpression = 'MemberExpression',\\n      SyntaxObjectExpression = 'ObjectExpression',\\n      SyntaxProperty = 'Property',\\n      SyntaxUnaryExpression = 'UnaryExpression';\\n\\n  // Error messages should be identical to V8.\\n  var MessageUnexpectedToken = 'Unexpected token %0',\\n      MessageUnexpectedNumber = 'Unexpected number',\\n      MessageUnexpectedString = 'Unexpected string',\\n      MessageUnexpectedIdentifier = 'Unexpected identifier',\\n      MessageUnexpectedReserved = 'Unexpected reserved word',\\n      MessageUnexpectedEOS = 'Unexpected end of input',\\n      MessageInvalidRegExp = 'Invalid regular expression',\\n      MessageUnterminatedRegExp = 'Invalid regular expression: missing /',\\n      MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',\\n      MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';\\n\\n  var ILLEGAL = 'ILLEGAL',\\n      DISABLED = 'Disabled.';\\n\\n  // See also tools/generate-unicode-regex.py.\\n  var RegexNonAsciiIdentifierStart = new RegExp('[\\\\\\\\xAA\\\\\\\\xB5\\\\\\\\xBA\\\\\\\\xC0-\\\\\\\\xD6\\\\\\\\xD8-\\\\\\\\xF6\\\\\\\\xF8-\\\\\\\\u02C1\\\\\\\\u02C6-\\\\\\\\u02D1\\\\\\\\u02E0-\\\\\\\\u02E4\\\\\\\\u02EC\\\\\\\\u02EE\\\\\\\\u0370-\\\\\\\\u0374\\\\\\\\u0376\\\\\\\\u0377\\\\\\\\u037A-\\\\\\\\u037D\\\\\\\\u037F\\\\\\\\u0386\\\\\\\\u0388-\\\\\\\\u038A\\\\\\\\u038C\\\\\\\\u038E-\\\\\\\\u03A1\\\\\\\\u03A3-\\\\\\\\u03F5\\\\\\\\u03F7-\\\\\\\\u0481\\\\\\\\u048A-\\\\\\\\u052F\\\\\\\\u0531-\\\\\\\\u0556\\\\\\\\u0559\\\\\\\\u0561-\\\\\\\\u0587\\\\\\\\u05D0-\\\\\\\\u05EA\\\\\\\\u05F0-\\\\\\\\u05F2\\\\\\\\u0620-\\\\\\\\u064A\\\\\\\\u066E\\\\\\\\u066F\\\\\\\\u0671-\\\\\\\\u06D3\\\\\\\\u06D5\\\\\\\\u06E5\\\\\\\\u06E6\\\\\\\\u06EE\\\\\\\\u06EF\\\\\\\\u06FA-\\\\\\\\u06FC\\\\\\\\u06FF\\\\\\\\u0710\\\\\\\\u0712-\\\\\\\\u072F\\\\\\\\u074D-\\\\\\\\u07A5\\\\\\\\u07B1\\\\\\\\u07CA-\\\\\\\\u07EA\\\\\\\\u07F4\\\\\\\\u07F5\\\\\\\\u07FA\\\\\\\\u0800-\\\\\\\\u0815\\\\\\\\u081A\\\\\\\\u0824\\\\\\\\u0828\\\\\\\\u0840-\\\\\\\\u0858\\\\\\\\u08A0-\\\\\\\\u08B2\\\\\\\\u0904-\\\\\\\\u0939\\\\\\\\u093D\\\\\\\\u0950\\\\\\\\u0958-\\\\\\\\u0961\\\\\\\\u0971-\\\\\\\\u0980\\\\\\\\u0985-\\\\\\\\u098C\\\\\\\\u098F\\\\\\\\u0990\\\\\\\\u0993-\\\\\\\\u09A8\\\\\\\\u09AA-\\\\\\\\u09B0\\\\\\\\u09B2\\\\\\\\u09B6-\\\\\\\\u09B9\\\\\\\\u09BD\\\\\\\\u09CE\\\\\\\\u09DC\\\\\\\\u09DD\\\\\\\\u09DF-\\\\\\\\u09E1\\\\\\\\u09F0\\\\\\\\u09F1\\\\\\\\u0A05-\\\\\\\\u0A0A\\\\\\\\u0A0F\\\\\\\\u0A10\\\\\\\\u0A13-\\\\\\\\u0A28\\\\\\\\u0A2A-\\\\\\\\u0A30\\\\\\\\u0A32\\\\\\\\u0A33\\\\\\\\u0A35\\\\\\\\u0A36\\\\\\\\u0A38\\\\\\\\u0A39\\\\\\\\u0A59-\\\\\\\\u0A5C\\\\\\\\u0A5E\\\\\\\\u0A72-\\\\\\\\u0A74\\\\\\\\u0A85-\\\\\\\\u0A8D\\\\\\\\u0A8F-\\\\\\\\u0A91\\\\\\\\u0A93-\\\\\\\\u0AA8\\\\\\\\u0AAA-\\\\\\\\u0AB0\\\\\\\\u0AB2\\\\\\\\u0AB3\\\\\\\\u0AB5-\\\\\\\\u0AB9\\\\\\\\u0ABD\\\\\\\\u0AD0\\\\\\\\u0AE0\\\\\\\\u0AE1\\\\\\\\u0B05-\\\\\\\\u0B0C\\\\\\\\u0B0F\\\\\\\\u0B10\\\\\\\\u0B13-\\\\\\\\u0B28\\\\\\\\u0B2A-\\\\\\\\u0B30\\\\\\\\u0B32\\\\\\\\u0B33\\\\\\\\u0B35-\\\\\\\\u0B39\\\\\\\\u0B3D\\\\\\\\u0B5C\\\\\\\\u0B5D\\\\\\\\u0B5F-\\\\\\\\u0B61\\\\\\\\u0B71\\\\\\\\u0B83\\\\\\\\u0B85-\\\\\\\\u0B8A\\\\\\\\u0B8E-\\\\\\\\u0B90\\\\\\\\u0B92-\\\\\\\\u0B95\\\\\\\\u0B99\\\\\\\\u0B9A\\\\\\\\u0B9C\\\\\\\\u0B9E\\\\\\\\u0B9F\\\\\\\\u0BA3\\\\\\\\u0BA4\\\\\\\\u0BA8-\\\\\\\\u0BAA\\\\\\\\u0BAE-\\\\\\\\u0BB9\\\\\\\\u0BD0\\\\\\\\u0C05-\\\\\\\\u0C0C\\\\\\\\u0C0E-\\\\\\\\u0C10\\\\\\\\u0C12-\\\\\\\\u0C28\\\\\\\\u0C2A-\\\\\\\\u0C39\\\\\\\\u0C3D\\\\\\\\u0C58\\\\\\\\u0C59\\\\\\\\u0C60\\\\\\\\u0C61\\\\\\\\u0C85-\\\\\\\\u0C8C\\\\\\\\u0C8E-\\\\\\\\u0C90\\\\\\\\u0C92-\\\\\\\\u0CA8\\\\\\\\u0CAA-\\\\\\\\u0CB3\\\\\\\\u0CB5-\\\\\\\\u0CB9\\\\\\\\u0CBD\\\\\\\\u0CDE\\\\\\\\u0CE0\\\\\\\\u0CE1\\\\\\\\u0CF1\\\\\\\\u0CF2\\\\\\\\u0D05-\\\\\\\\u0D0C\\\\\\\\u0D0E-\\\\\\\\u0D10\\\\\\\\u0D12-\\\\\\\\u0D3A\\\\\\\\u0D3D\\\\\\\\u0D4E\\\\\\\\u0D60\\\\\\\\u0D61\\\\\\\\u0D7A-\\\\\\\\u0D7F\\\\\\\\u0D85-\\\\\\\\u0D96\\\\\\\\u0D9A-\\\\\\\\u0DB1\\\\\\\\u0DB3-\\\\\\\\u0DBB\\\\\\\\u0DBD\\\\\\\\u0DC0-\\\\\\\\u0DC6\\\\\\\\u0E01-\\\\\\\\u0E30\\\\\\\\u0E32\\\\\\\\u0E33\\\\\\\\u0E40-\\\\\\\\u0E46\\\\\\\\u0E81\\\\\\\\u0E82\\\\\\\\u0E84\\\\\\\\u0E87\\\\\\\\u0E88\\\\\\\\u0E8A\\\\\\\\u0E8D\\\\\\\\u0E94-\\\\\\\\u0E97\\\\\\\\u0E99-\\\\\\\\u0E9F\\\\\\\\u0EA1-\\\\\\\\u0EA3\\\\\\\\u0EA5\\\\\\\\u0EA7\\\\\\\\u0EAA\\\\\\\\u0EAB\\\\\\\\u0EAD-\\\\\\\\u0EB0\\\\\\\\u0EB2\\\\\\\\u0EB3\\\\\\\\u0EBD\\\\\\\\u0EC0-\\\\\\\\u0EC4\\\\\\\\u0EC6\\\\\\\\u0EDC-\\\\\\\\u0EDF\\\\\\\\u0F00\\\\\\\\u0F40-\\\\\\\\u0F47\\\\\\\\u0F49-\\\\\\\\u0F6C\\\\\\\\u0F88-\\\\\\\\u0F8C\\\\\\\\u1000-\\\\\\\\u102A\\\\\\\\u103F\\\\\\\\u1050-\\\\\\\\u1055\\\\\\\\u105A-\\\\\\\\u105D\\\\\\\\u1061\\\\\\\\u1065\\\\\\\\u1066\\\\\\\\u106E-\\\\\\\\u1070\\\\\\\\u1075-\\\\\\\\u1081\\\\\\\\u108E\\\\\\\\u10A0-\\\\\\\\u10C5\\\\\\\\u10C7\\\\\\\\u10CD\\\\\\\\u10D0-\\\\\\\\u10FA\\\\\\\\u10FC-\\\\\\\\u1248\\\\\\\\u124A-\\\\\\\\u124D\\\\\\\\u1250-\\\\\\\\u1256\\\\\\\\u1258\\\\\\\\u125A-\\\\\\\\u125D\\\\\\\\u1260-\\\\\\\\u1288\\\\\\\\u128A-\\\\\\\\u128D\\\\\\\\u1290-\\\\\\\\u12B0\\\\\\\\u12B2-\\\\\\\\u12B5\\\\\\\\u12B8-\\\\\\\\u12BE\\\\\\\\u12C0\\\\\\\\u12C2-\\\\\\\\u12C5\\\\\\\\u12C8-\\\\\\\\u12D6\\\\\\\\u12D8-\\\\\\\\u1310\\\\\\\\u1312-\\\\\\\\u1315\\\\\\\\u1318-\\\\\\\\u135A\\\\\\\\u1380-\\\\\\\\u138F\\\\\\\\u13A0-\\\\\\\\u13F4\\\\\\\\u1401-\\\\\\\\u166C\\\\\\\\u166F-\\\\\\\\u167F\\\\\\\\u1681-\\\\\\\\u169A\\\\\\\\u16A0-\\\\\\\\u16EA\\\\\\\\u16EE-\\\\\\\\u16F8\\\\\\\\u1700-\\\\\\\\u170C\\\\\\\\u170E-\\\\\\\\u1711\\\\\\\\u1720-\\\\\\\\u1731\\\\\\\\u1740-\\\\\\\\u1751\\\\\\\\u1760-\\\\\\\\u176C\\\\\\\\u176E-\\\\\\\\u1770\\\\\\\\u1780-\\\\\\\\u17B3\\\\\\\\u17D7\\\\\\\\u17DC\\\\\\\\u1820-\\\\\\\\u1877\\\\\\\\u1880-\\\\\\\\u18A8\\\\\\\\u18AA\\\\\\\\u18B0-\\\\\\\\u18F5\\\\\\\\u1900-\\\\\\\\u191E\\\\\\\\u1950-\\\\\\\\u196D\\\\\\\\u1970-\\\\\\\\u1974\\\\\\\\u1980-\\\\\\\\u19AB\\\\\\\\u19C1-\\\\\\\\u19C7\\\\\\\\u1A00-\\\\\\\\u1A16\\\\\\\\u1A20-\\\\\\\\u1A54\\\\\\\\u1AA7\\\\\\\\u1B05-\\\\\\\\u1B33\\\\\\\\u1B45-\\\\\\\\u1B4B\\\\\\\\u1B83-\\\\\\\\u1BA0\\\\\\\\u1BAE\\\\\\\\u1BAF\\\\\\\\u1BBA-\\\\\\\\u1BE5\\\\\\\\u1C00-\\\\\\\\u1C23\\\\\\\\u1C4D-\\\\\\\\u1C4F\\\\\\\\u1C5A-\\\\\\\\u1C7D\\\\\\\\u1CE9-\\\\\\\\u1CEC\\\\\\\\u1CEE-\\\\\\\\u1CF1\\\\\\\\u1CF5\\\\\\\\u1CF6\\\\\\\\u1D00-\\\\\\\\u1DBF\\\\\\\\u1E00-\\\\\\\\u1F15\\\\\\\\u1F18-\\\\\\\\u1F1D\\\\\\\\u1F20-\\\\\\\\u1F45\\\\\\\\u1F48-\\\\\\\\u1F4D\\\\\\\\u1F50-\\\\\\\\u1F57\\\\\\\\u1F59\\\\\\\\u1F5B\\\\\\\\u1F5D\\\\\\\\u1F5F-\\\\\\\\u1F7D\\\\\\\\u1F80-\\\\\\\\u1FB4\\\\\\\\u1FB6-\\\\\\\\u1FBC\\\\\\\\u1FBE\\\\\\\\u1FC2-\\\\\\\\u1FC4\\\\\\\\u1FC6-\\\\\\\\u1FCC\\\\\\\\u1FD0-\\\\\\\\u1FD3\\\\\\\\u1FD6-\\\\\\\\u1FDB\\\\\\\\u1FE0-\\\\\\\\u1FEC\\\\\\\\u1FF2-\\\\\\\\u1FF4\\\\\\\\u1FF6-\\\\\\\\u1FFC\\\\\\\\u2071\\\\\\\\u207F\\\\\\\\u2090-\\\\\\\\u209C\\\\\\\\u2102\\\\\\\\u2107\\\\\\\\u210A-\\\\\\\\u2113\\\\\\\\u2115\\\\\\\\u2119-\\\\\\\\u211D\\\\\\\\u2124\\\\\\\\u2126\\\\\\\\u2128\\\\\\\\u212A-\\\\\\\\u212D\\\\\\\\u212F-\\\\\\\\u2139\\\\\\\\u213C-\\\\\\\\u213F\\\\\\\\u2145-\\\\\\\\u2149\\\\\\\\u214E\\\\\\\\u2160-\\\\\\\\u2188\\\\\\\\u2C00-\\\\\\\\u2C2E\\\\\\\\u2C30-\\\\\\\\u2C5E\\\\\\\\u2C60-\\\\\\\\u2CE4\\\\\\\\u2CEB-\\\\\\\\u2CEE\\\\\\\\u2CF2\\\\\\\\u2CF3\\\\\\\\u2D00-\\\\\\\\u2D25\\\\\\\\u2D27\\\\\\\\u2D2D\\\\\\\\u2D30-\\\\\\\\u2D67\\\\\\\\u2D6F\\\\\\\\u2D80-\\\\\\\\u2D96\\\\\\\\u2DA0-\\\\\\\\u2DA6\\\\\\\\u2DA8-\\\\\\\\u2DAE\\\\\\\\u2DB0-\\\\\\\\u2DB6\\\\\\\\u2DB8-\\\\\\\\u2DBE\\\\\\\\u2DC0-\\\\\\\\u2DC6\\\\\\\\u2DC8-\\\\\\\\u2DCE\\\\\\\\u2DD0-\\\\\\\\u2DD6\\\\\\\\u2DD8-\\\\\\\\u2DDE\\\\\\\\u2E2F\\\\\\\\u3005-\\\\\\\\u3007\\\\\\\\u3021-\\\\\\\\u3029\\\\\\\\u3031-\\\\\\\\u3035\\\\\\\\u3038-\\\\\\\\u303C\\\\\\\\u3041-\\\\\\\\u3096\\\\\\\\u309D-\\\\\\\\u309F\\\\\\\\u30A1-\\\\\\\\u30FA\\\\\\\\u30FC-\\\\\\\\u30FF\\\\\\\\u3105-\\\\\\\\u312D\\\\\\\\u3131-\\\\\\\\u318E\\\\\\\\u31A0-\\\\\\\\u31BA\\\\\\\\u31F0-\\\\\\\\u31FF\\\\\\\\u3400-\\\\\\\\u4DB5\\\\\\\\u4E00-\\\\\\\\u9FCC\\\\\\\\uA000-\\\\\\\\uA48C\\\\\\\\uA4D0-\\\\\\\\uA4FD\\\\\\\\uA500-\\\\\\\\uA60C\\\\\\\\uA610-\\\\\\\\uA61F\\\\\\\\uA62A\\\\\\\\uA62B\\\\\\\\uA640-\\\\\\\\uA66E\\\\\\\\uA67F-\\\\\\\\uA69D\\\\\\\\uA6A0-\\\\\\\\uA6EF\\\\\\\\uA717-\\\\\\\\uA71F\\\\\\\\uA722-\\\\\\\\uA788\\\\\\\\uA78B-\\\\\\\\uA78E\\\\\\\\uA790-\\\\\\\\uA7AD\\\\\\\\uA7B0\\\\\\\\uA7B1\\\\\\\\uA7F7-\\\\\\\\uA801\\\\\\\\uA803-\\\\\\\\uA805\\\\\\\\uA807-\\\\\\\\uA80A\\\\\\\\uA80C-\\\\\\\\uA822\\\\\\\\uA840-\\\\\\\\uA873\\\\\\\\uA882-\\\\\\\\uA8B3\\\\\\\\uA8F2-\\\\\\\\uA8F7\\\\\\\\uA8FB\\\\\\\\uA90A-\\\\\\\\uA925\\\\\\\\uA930-\\\\\\\\uA946\\\\\\\\uA960-\\\\\\\\uA97C\\\\\\\\uA984-\\\\\\\\uA9B2\\\\\\\\uA9CF\\\\\\\\uA9E0-\\\\\\\\uA9E4\\\\\\\\uA9E6-\\\\\\\\uA9EF\\\\\\\\uA9FA-\\\\\\\\uA9FE\\\\\\\\uAA00-\\\\\\\\uAA28\\\\\\\\uAA40-\\\\\\\\uAA42\\\\\\\\uAA44-\\\\\\\\uAA4B\\\\\\\\uAA60-\\\\\\\\uAA76\\\\\\\\uAA7A\\\\\\\\uAA7E-\\\\\\\\uAAAF\\\\\\\\uAAB1\\\\\\\\uAAB5\\\\\\\\uAAB6\\\\\\\\uAAB9-\\\\\\\\uAABD\\\\\\\\uAAC0\\\\\\\\uAAC2\\\\\\\\uAADB-\\\\\\\\uAADD\\\\\\\\uAAE0-\\\\\\\\uAAEA\\\\\\\\uAAF2-\\\\\\\\uAAF4\\\\\\\\uAB01-\\\\\\\\uAB06\\\\\\\\uAB09-\\\\\\\\uAB0E\\\\\\\\uAB11-\\\\\\\\uAB16\\\\\\\\uAB20-\\\\\\\\uAB26\\\\\\\\uAB28-\\\\\\\\uAB2E\\\\\\\\uAB30-\\\\\\\\uAB5A\\\\\\\\uAB5C-\\\\\\\\uAB5F\\\\\\\\uAB64\\\\\\\\uAB65\\\\\\\\uABC0-\\\\\\\\uABE2\\\\\\\\uAC00-\\\\\\\\uD7A3\\\\\\\\uD7B0-\\\\\\\\uD7C6\\\\\\\\uD7CB-\\\\\\\\uD7FB\\\\\\\\uF900-\\\\\\\\uFA6D\\\\\\\\uFA70-\\\\\\\\uFAD9\\\\\\\\uFB00-\\\\\\\\uFB06\\\\\\\\uFB13-\\\\\\\\uFB17\\\\\\\\uFB1D\\\\\\\\uFB1F-\\\\\\\\uFB28\\\\\\\\uFB2A-\\\\\\\\uFB36\\\\\\\\uFB38-\\\\\\\\uFB3C\\\\\\\\uFB3E\\\\\\\\uFB40\\\\\\\\uFB41\\\\\\\\uFB43\\\\\\\\uFB44\\\\\\\\uFB46-\\\\\\\\uFBB1\\\\\\\\uFBD3-\\\\\\\\uFD3D\\\\\\\\uFD50-\\\\\\\\uFD8F\\\\\\\\uFD92-\\\\\\\\uFDC7\\\\\\\\uFDF0-\\\\\\\\uFDFB\\\\\\\\uFE70-\\\\\\\\uFE74\\\\\\\\uFE76-\\\\\\\\uFEFC\\\\\\\\uFF21-\\\\\\\\uFF3A\\\\\\\\uFF41-\\\\\\\\uFF5A\\\\\\\\uFF66-\\\\\\\\uFFBE\\\\\\\\uFFC2-\\\\\\\\uFFC7\\\\\\\\uFFCA-\\\\\\\\uFFCF\\\\\\\\uFFD2-\\\\\\\\uFFD7\\\\\\\\uFFDA-\\\\\\\\uFFDC]'),\\n      // eslint-disable-next-line no-misleading-character-class\\n      RegexNonAsciiIdentifierPart = new RegExp('[\\\\\\\\xAA\\\\\\\\xB5\\\\\\\\xBA\\\\\\\\xC0-\\\\\\\\xD6\\\\\\\\xD8-\\\\\\\\xF6\\\\\\\\xF8-\\\\\\\\u02C1\\\\\\\\u02C6-\\\\\\\\u02D1\\\\\\\\u02E0-\\\\\\\\u02E4\\\\\\\\u02EC\\\\\\\\u02EE\\\\\\\\u0300-\\\\\\\\u0374\\\\\\\\u0376\\\\\\\\u0377\\\\\\\\u037A-\\\\\\\\u037D\\\\\\\\u037F\\\\\\\\u0386\\\\\\\\u0388-\\\\\\\\u038A\\\\\\\\u038C\\\\\\\\u038E-\\\\\\\\u03A1\\\\\\\\u03A3-\\\\\\\\u03F5\\\\\\\\u03F7-\\\\\\\\u0481\\\\\\\\u0483-\\\\\\\\u0487\\\\\\\\u048A-\\\\\\\\u052F\\\\\\\\u0531-\\\\\\\\u0556\\\\\\\\u0559\\\\\\\\u0561-\\\\\\\\u0587\\\\\\\\u0591-\\\\\\\\u05BD\\\\\\\\u05BF\\\\\\\\u05C1\\\\\\\\u05C2\\\\\\\\u05C4\\\\\\\\u05C5\\\\\\\\u05C7\\\\\\\\u05D0-\\\\\\\\u05EA\\\\\\\\u05F0-\\\\\\\\u05F2\\\\\\\\u0610-\\\\\\\\u061A\\\\\\\\u0620-\\\\\\\\u0669\\\\\\\\u066E-\\\\\\\\u06D3\\\\\\\\u06D5-\\\\\\\\u06DC\\\\\\\\u06DF-\\\\\\\\u06E8\\\\\\\\u06EA-\\\\\\\\u06FC\\\\\\\\u06FF\\\\\\\\u0710-\\\\\\\\u074A\\\\\\\\u074D-\\\\\\\\u07B1\\\\\\\\u07C0-\\\\\\\\u07F5\\\\\\\\u07FA\\\\\\\\u0800-\\\\\\\\u082D\\\\\\\\u0840-\\\\\\\\u085B\\\\\\\\u08A0-\\\\\\\\u08B2\\\\\\\\u08E4-\\\\\\\\u0963\\\\\\\\u0966-\\\\\\\\u096F\\\\\\\\u0971-\\\\\\\\u0983\\\\\\\\u0985-\\\\\\\\u098C\\\\\\\\u098F\\\\\\\\u0990\\\\\\\\u0993-\\\\\\\\u09A8\\\\\\\\u09AA-\\\\\\\\u09B0\\\\\\\\u09B2\\\\\\\\u09B6-\\\\\\\\u09B9\\\\\\\\u09BC-\\\\\\\\u09C4\\\\\\\\u09C7\\\\\\\\u09C8\\\\\\\\u09CB-\\\\\\\\u09CE\\\\\\\\u09D7\\\\\\\\u09DC\\\\\\\\u09DD\\\\\\\\u09DF-\\\\\\\\u09E3\\\\\\\\u09E6-\\\\\\\\u09F1\\\\\\\\u0A01-\\\\\\\\u0A03\\\\\\\\u0A05-\\\\\\\\u0A0A\\\\\\\\u0A0F\\\\\\\\u0A10\\\\\\\\u0A13-\\\\\\\\u0A28\\\\\\\\u0A2A-\\\\\\\\u0A30\\\\\\\\u0A32\\\\\\\\u0A33\\\\\\\\u0A35\\\\\\\\u0A36\\\\\\\\u0A38\\\\\\\\u0A39\\\\\\\\u0A3C\\\\\\\\u0A3E-\\\\\\\\u0A42\\\\\\\\u0A47\\\\\\\\u0A48\\\\\\\\u0A4B-\\\\\\\\u0A4D\\\\\\\\u0A51\\\\\\\\u0A59-\\\\\\\\u0A5C\\\\\\\\u0A5E\\\\\\\\u0A66-\\\\\\\\u0A75\\\\\\\\u0A81-\\\\\\\\u0A83\\\\\\\\u0A85-\\\\\\\\u0A8D\\\\\\\\u0A8F-\\\\\\\\u0A91\\\\\\\\u0A93-\\\\\\\\u0AA8\\\\\\\\u0AAA-\\\\\\\\u0AB0\\\\\\\\u0AB2\\\\\\\\u0AB3\\\\\\\\u0AB5-\\\\\\\\u0AB9\\\\\\\\u0ABC-\\\\\\\\u0AC5\\\\\\\\u0AC7-\\\\\\\\u0AC9\\\\\\\\u0ACB-\\\\\\\\u0ACD\\\\\\\\u0AD0\\\\\\\\u0AE0-\\\\\\\\u0AE3\\\\\\\\u0AE6-\\\\\\\\u0AEF\\\\\\\\u0B01-\\\\\\\\u0B03\\\\\\\\u0B05-\\\\\\\\u0B0C\\\\\\\\u0B0F\\\\\\\\u0B10\\\\\\\\u0B13-\\\\\\\\u0B28\\\\\\\\u0B2A-\\\\\\\\u0B30\\\\\\\\u0B32\\\\\\\\u0B33\\\\\\\\u0B35-\\\\\\\\u0B39\\\\\\\\u0B3C-\\\\\\\\u0B44\\\\\\\\u0B47\\\\\\\\u0B48\\\\\\\\u0B4B-\\\\\\\\u0B4D\\\\\\\\u0B56\\\\\\\\u0B57\\\\\\\\u0B5C\\\\\\\\u0B5D\\\\\\\\u0B5F-\\\\\\\\u0B63\\\\\\\\u0B66-\\\\\\\\u0B6F\\\\\\\\u0B71\\\\\\\\u0B82\\\\\\\\u0B83\\\\\\\\u0B85-\\\\\\\\u0B8A\\\\\\\\u0B8E-\\\\\\\\u0B90\\\\\\\\u0B92-\\\\\\\\u0B95\\\\\\\\u0B99\\\\\\\\u0B9A\\\\\\\\u0B9C\\\\\\\\u0B9E\\\\\\\\u0B9F\\\\\\\\u0BA3\\\\\\\\u0BA4\\\\\\\\u0BA8-\\\\\\\\u0BAA\\\\\\\\u0BAE-\\\\\\\\u0BB9\\\\\\\\u0BBE-\\\\\\\\u0BC2\\\\\\\\u0BC6-\\\\\\\\u0BC8\\\\\\\\u0BCA-\\\\\\\\u0BCD\\\\\\\\u0BD0\\\\\\\\u0BD7\\\\\\\\u0BE6-\\\\\\\\u0BEF\\\\\\\\u0C00-\\\\\\\\u0C03\\\\\\\\u0C05-\\\\\\\\u0C0C\\\\\\\\u0C0E-\\\\\\\\u0C10\\\\\\\\u0C12-\\\\\\\\u0C28\\\\\\\\u0C2A-\\\\\\\\u0C39\\\\\\\\u0C3D-\\\\\\\\u0C44\\\\\\\\u0C46-\\\\\\\\u0C48\\\\\\\\u0C4A-\\\\\\\\u0C4D\\\\\\\\u0C55\\\\\\\\u0C56\\\\\\\\u0C58\\\\\\\\u0C59\\\\\\\\u0C60-\\\\\\\\u0C63\\\\\\\\u0C66-\\\\\\\\u0C6F\\\\\\\\u0C81-\\\\\\\\u0C83\\\\\\\\u0C85-\\\\\\\\u0C8C\\\\\\\\u0C8E-\\\\\\\\u0C90\\\\\\\\u0C92-\\\\\\\\u0CA8\\\\\\\\u0CAA-\\\\\\\\u0CB3\\\\\\\\u0CB5-\\\\\\\\u0CB9\\\\\\\\u0CBC-\\\\\\\\u0CC4\\\\\\\\u0CC6-\\\\\\\\u0CC8\\\\\\\\u0CCA-\\\\\\\\u0CCD\\\\\\\\u0CD5\\\\\\\\u0CD6\\\\\\\\u0CDE\\\\\\\\u0CE0-\\\\\\\\u0CE3\\\\\\\\u0CE6-\\\\\\\\u0CEF\\\\\\\\u0CF1\\\\\\\\u0CF2\\\\\\\\u0D01-\\\\\\\\u0D03\\\\\\\\u0D05-\\\\\\\\u0D0C\\\\\\\\u0D0E-\\\\\\\\u0D10\\\\\\\\u0D12-\\\\\\\\u0D3A\\\\\\\\u0D3D-\\\\\\\\u0D44\\\\\\\\u0D46-\\\\\\\\u0D48\\\\\\\\u0D4A-\\\\\\\\u0D4E\\\\\\\\u0D57\\\\\\\\u0D60-\\\\\\\\u0D63\\\\\\\\u0D66-\\\\\\\\u0D6F\\\\\\\\u0D7A-\\\\\\\\u0D7F\\\\\\\\u0D82\\\\\\\\u0D83\\\\\\\\u0D85-\\\\\\\\u0D96\\\\\\\\u0D9A-\\\\\\\\u0DB1\\\\\\\\u0DB3-\\\\\\\\u0DBB\\\\\\\\u0DBD\\\\\\\\u0DC0-\\\\\\\\u0DC6\\\\\\\\u0DCA\\\\\\\\u0DCF-\\\\\\\\u0DD4\\\\\\\\u0DD6\\\\\\\\u0DD8-\\\\\\\\u0DDF\\\\\\\\u0DE6-\\\\\\\\u0DEF\\\\\\\\u0DF2\\\\\\\\u0DF3\\\\\\\\u0E01-\\\\\\\\u0E3A\\\\\\\\u0E40-\\\\\\\\u0E4E\\\\\\\\u0E50-\\\\\\\\u0E59\\\\\\\\u0E81\\\\\\\\u0E82\\\\\\\\u0E84\\\\\\\\u0E87\\\\\\\\u0E88\\\\\\\\u0E8A\\\\\\\\u0E8D\\\\\\\\u0E94-\\\\\\\\u0E97\\\\\\\\u0E99-\\\\\\\\u0E9F\\\\\\\\u0EA1-\\\\\\\\u0EA3\\\\\\\\u0EA5\\\\\\\\u0EA7\\\\\\\\u0EAA\\\\\\\\u0EAB\\\\\\\\u0EAD-\\\\\\\\u0EB9\\\\\\\\u0EBB-\\\\\\\\u0EBD\\\\\\\\u0EC0-\\\\\\\\u0EC4\\\\\\\\u0EC6\\\\\\\\u0EC8-\\\\\\\\u0ECD\\\\\\\\u0ED0-\\\\\\\\u0ED9\\\\\\\\u0EDC-\\\\\\\\u0EDF\\\\\\\\u0F00\\\\\\\\u0F18\\\\\\\\u0F19\\\\\\\\u0F20-\\\\\\\\u0F29\\\\\\\\u0F35\\\\\\\\u0F37\\\\\\\\u0F39\\\\\\\\u0F3E-\\\\\\\\u0F47\\\\\\\\u0F49-\\\\\\\\u0F6C\\\\\\\\u0F71-\\\\\\\\u0F84\\\\\\\\u0F86-\\\\\\\\u0F97\\\\\\\\u0F99-\\\\\\\\u0FBC\\\\\\\\u0FC6\\\\\\\\u1000-\\\\\\\\u1049\\\\\\\\u1050-\\\\\\\\u109D\\\\\\\\u10A0-\\\\\\\\u10C5\\\\\\\\u10C7\\\\\\\\u10CD\\\\\\\\u10D0-\\\\\\\\u10FA\\\\\\\\u10FC-\\\\\\\\u1248\\\\\\\\u124A-\\\\\\\\u124D\\\\\\\\u1250-\\\\\\\\u1256\\\\\\\\u1258\\\\\\\\u125A-\\\\\\\\u125D\\\\\\\\u1260-\\\\\\\\u1288\\\\\\\\u128A-\\\\\\\\u128D\\\\\\\\u1290-\\\\\\\\u12B0\\\\\\\\u12B2-\\\\\\\\u12B5\\\\\\\\u12B8-\\\\\\\\u12BE\\\\\\\\u12C0\\\\\\\\u12C2-\\\\\\\\u12C5\\\\\\\\u12C8-\\\\\\\\u12D6\\\\\\\\u12D8-\\\\\\\\u1310\\\\\\\\u1312-\\\\\\\\u1315\\\\\\\\u1318-\\\\\\\\u135A\\\\\\\\u135D-\\\\\\\\u135F\\\\\\\\u1380-\\\\\\\\u138F\\\\\\\\u13A0-\\\\\\\\u13F4\\\\\\\\u1401-\\\\\\\\u166C\\\\\\\\u166F-\\\\\\\\u167F\\\\\\\\u1681-\\\\\\\\u169A\\\\\\\\u16A0-\\\\\\\\u16EA\\\\\\\\u16EE-\\\\\\\\u16F8\\\\\\\\u1700-\\\\\\\\u170C\\\\\\\\u170E-\\\\\\\\u1714\\\\\\\\u1720-\\\\\\\\u1734\\\\\\\\u1740-\\\\\\\\u1753\\\\\\\\u1760-\\\\\\\\u176C\\\\\\\\u176E-\\\\\\\\u1770\\\\\\\\u1772\\\\\\\\u1773\\\\\\\\u1780-\\\\\\\\u17D3\\\\\\\\u17D7\\\\\\\\u17DC\\\\\\\\u17DD\\\\\\\\u17E0-\\\\\\\\u17E9\\\\\\\\u180B-\\\\\\\\u180D\\\\\\\\u1810-\\\\\\\\u1819\\\\\\\\u1820-\\\\\\\\u1877\\\\\\\\u1880-\\\\\\\\u18AA\\\\\\\\u18B0-\\\\\\\\u18F5\\\\\\\\u1900-\\\\\\\\u191E\\\\\\\\u1920-\\\\\\\\u192B\\\\\\\\u1930-\\\\\\\\u193B\\\\\\\\u1946-\\\\\\\\u196D\\\\\\\\u1970-\\\\\\\\u1974\\\\\\\\u1980-\\\\\\\\u19AB\\\\\\\\u19B0-\\\\\\\\u19C9\\\\\\\\u19D0-\\\\\\\\u19D9\\\\\\\\u1A00-\\\\\\\\u1A1B\\\\\\\\u1A20-\\\\\\\\u1A5E\\\\\\\\u1A60-\\\\\\\\u1A7C\\\\\\\\u1A7F-\\\\\\\\u1A89\\\\\\\\u1A90-\\\\\\\\u1A99\\\\\\\\u1AA7\\\\\\\\u1AB0-\\\\\\\\u1ABD\\\\\\\\u1B00-\\\\\\\\u1B4B\\\\\\\\u1B50-\\\\\\\\u1B59\\\\\\\\u1B6B-\\\\\\\\u1B73\\\\\\\\u1B80-\\\\\\\\u1BF3\\\\\\\\u1C00-\\\\\\\\u1C37\\\\\\\\u1C40-\\\\\\\\u1C49\\\\\\\\u1C4D-\\\\\\\\u1C7D\\\\\\\\u1CD0-\\\\\\\\u1CD2\\\\\\\\u1CD4-\\\\\\\\u1CF6\\\\\\\\u1CF8\\\\\\\\u1CF9\\\\\\\\u1D00-\\\\\\\\u1DF5\\\\\\\\u1DFC-\\\\\\\\u1F15\\\\\\\\u1F18-\\\\\\\\u1F1D\\\\\\\\u1F20-\\\\\\\\u1F45\\\\\\\\u1F48-\\\\\\\\u1F4D\\\\\\\\u1F50-\\\\\\\\u1F57\\\\\\\\u1F59\\\\\\\\u1F5B\\\\\\\\u1F5D\\\\\\\\u1F5F-\\\\\\\\u1F7D\\\\\\\\u1F80-\\\\\\\\u1FB4\\\\\\\\u1FB6-\\\\\\\\u1FBC\\\\\\\\u1FBE\\\\\\\\u1FC2-\\\\\\\\u1FC4\\\\\\\\u1FC6-\\\\\\\\u1FCC\\\\\\\\u1FD0-\\\\\\\\u1FD3\\\\\\\\u1FD6-\\\\\\\\u1FDB\\\\\\\\u1FE0-\\\\\\\\u1FEC\\\\\\\\u1FF2-\\\\\\\\u1FF4\\\\\\\\u1FF6-\\\\\\\\u1FFC\\\\\\\\u200C\\\\\\\\u200D\\\\\\\\u203F\\\\\\\\u2040\\\\\\\\u2054\\\\\\\\u2071\\\\\\\\u207F\\\\\\\\u2090-\\\\\\\\u209C\\\\\\\\u20D0-\\\\\\\\u20DC\\\\\\\\u20E1\\\\\\\\u20E5-\\\\\\\\u20F0\\\\\\\\u2102\\\\\\\\u2107\\\\\\\\u210A-\\\\\\\\u2113\\\\\\\\u2115\\\\\\\\u2119-\\\\\\\\u211D\\\\\\\\u2124\\\\\\\\u2126\\\\\\\\u2128\\\\\\\\u212A-\\\\\\\\u212D\\\\\\\\u212F-\\\\\\\\u2139\\\\\\\\u213C-\\\\\\\\u213F\\\\\\\\u2145-\\\\\\\\u2149\\\\\\\\u214E\\\\\\\\u2160-\\\\\\\\u2188\\\\\\\\u2C00-\\\\\\\\u2C2E\\\\\\\\u2C30-\\\\\\\\u2C5E\\\\\\\\u2C60-\\\\\\\\u2CE4\\\\\\\\u2CEB-\\\\\\\\u2CF3\\\\\\\\u2D00-\\\\\\\\u2D25\\\\\\\\u2D27\\\\\\\\u2D2D\\\\\\\\u2D30-\\\\\\\\u2D67\\\\\\\\u2D6F\\\\\\\\u2D7F-\\\\\\\\u2D96\\\\\\\\u2DA0-\\\\\\\\u2DA6\\\\\\\\u2DA8-\\\\\\\\u2DAE\\\\\\\\u2DB0-\\\\\\\\u2DB6\\\\\\\\u2DB8-\\\\\\\\u2DBE\\\\\\\\u2DC0-\\\\\\\\u2DC6\\\\\\\\u2DC8-\\\\\\\\u2DCE\\\\\\\\u2DD0-\\\\\\\\u2DD6\\\\\\\\u2DD8-\\\\\\\\u2DDE\\\\\\\\u2DE0-\\\\\\\\u2DFF\\\\\\\\u2E2F\\\\\\\\u3005-\\\\\\\\u3007\\\\\\\\u3021-\\\\\\\\u302F\\\\\\\\u3031-\\\\\\\\u3035\\\\\\\\u3038-\\\\\\\\u303C\\\\\\\\u3041-\\\\\\\\u3096\\\\\\\\u3099\\\\\\\\u309A\\\\\\\\u309D-\\\\\\\\u309F\\\\\\\\u30A1-\\\\\\\\u30FA\\\\\\\\u30FC-\\\\\\\\u30FF\\\\\\\\u3105-\\\\\\\\u312D\\\\\\\\u3131-\\\\\\\\u318E\\\\\\\\u31A0-\\\\\\\\u31BA\\\\\\\\u31F0-\\\\\\\\u31FF\\\\\\\\u3400-\\\\\\\\u4DB5\\\\\\\\u4E00-\\\\\\\\u9FCC\\\\\\\\uA000-\\\\\\\\uA48C\\\\\\\\uA4D0-\\\\\\\\uA4FD\\\\\\\\uA500-\\\\\\\\uA60C\\\\\\\\uA610-\\\\\\\\uA62B\\\\\\\\uA640-\\\\\\\\uA66F\\\\\\\\uA674-\\\\\\\\uA67D\\\\\\\\uA67F-\\\\\\\\uA69D\\\\\\\\uA69F-\\\\\\\\uA6F1\\\\\\\\uA717-\\\\\\\\uA71F\\\\\\\\uA722-\\\\\\\\uA788\\\\\\\\uA78B-\\\\\\\\uA78E\\\\\\\\uA790-\\\\\\\\uA7AD\\\\\\\\uA7B0\\\\\\\\uA7B1\\\\\\\\uA7F7-\\\\\\\\uA827\\\\\\\\uA840-\\\\\\\\uA873\\\\\\\\uA880-\\\\\\\\uA8C4\\\\\\\\uA8D0-\\\\\\\\uA8D9\\\\\\\\uA8E0-\\\\\\\\uA8F7\\\\\\\\uA8FB\\\\\\\\uA900-\\\\\\\\uA92D\\\\\\\\uA930-\\\\\\\\uA953\\\\\\\\uA960-\\\\\\\\uA97C\\\\\\\\uA980-\\\\\\\\uA9C0\\\\\\\\uA9CF-\\\\\\\\uA9D9\\\\\\\\uA9E0-\\\\\\\\uA9FE\\\\\\\\uAA00-\\\\\\\\uAA36\\\\\\\\uAA40-\\\\\\\\uAA4D\\\\\\\\uAA50-\\\\\\\\uAA59\\\\\\\\uAA60-\\\\\\\\uAA76\\\\\\\\uAA7A-\\\\\\\\uAAC2\\\\\\\\uAADB-\\\\\\\\uAADD\\\\\\\\uAAE0-\\\\\\\\uAAEF\\\\\\\\uAAF2-\\\\\\\\uAAF6\\\\\\\\uAB01-\\\\\\\\uAB06\\\\\\\\uAB09-\\\\\\\\uAB0E\\\\\\\\uAB11-\\\\\\\\uAB16\\\\\\\\uAB20-\\\\\\\\uAB26\\\\\\\\uAB28-\\\\\\\\uAB2E\\\\\\\\uAB30-\\\\\\\\uAB5A\\\\\\\\uAB5C-\\\\\\\\uAB5F\\\\\\\\uAB64\\\\\\\\uAB65\\\\\\\\uABC0-\\\\\\\\uABEA\\\\\\\\uABEC\\\\\\\\uABED\\\\\\\\uABF0-\\\\\\\\uABF9\\\\\\\\uAC00-\\\\\\\\uD7A3\\\\\\\\uD7B0-\\\\\\\\uD7C6\\\\\\\\uD7CB-\\\\\\\\uD7FB\\\\\\\\uF900-\\\\\\\\uFA6D\\\\\\\\uFA70-\\\\\\\\uFAD9\\\\\\\\uFB00-\\\\\\\\uFB06\\\\\\\\uFB13-\\\\\\\\uFB17\\\\\\\\uFB1D-\\\\\\\\uFB28\\\\\\\\uFB2A-\\\\\\\\uFB36\\\\\\\\uFB38-\\\\\\\\uFB3C\\\\\\\\uFB3E\\\\\\\\uFB40\\\\\\\\uFB41\\\\\\\\uFB43\\\\\\\\uFB44\\\\\\\\uFB46-\\\\\\\\uFBB1\\\\\\\\uFBD3-\\\\\\\\uFD3D\\\\\\\\uFD50-\\\\\\\\uFD8F\\\\\\\\uFD92-\\\\\\\\uFDC7\\\\\\\\uFDF0-\\\\\\\\uFDFB\\\\\\\\uFE00-\\\\\\\\uFE0F\\\\\\\\uFE20-\\\\\\\\uFE2D\\\\\\\\uFE33\\\\\\\\uFE34\\\\\\\\uFE4D-\\\\\\\\uFE4F\\\\\\\\uFE70-\\\\\\\\uFE74\\\\\\\\uFE76-\\\\\\\\uFEFC\\\\\\\\uFF10-\\\\\\\\uFF19\\\\\\\\uFF21-\\\\\\\\uFF3A\\\\\\\\uFF3F\\\\\\\\uFF41-\\\\\\\\uFF5A\\\\\\\\uFF66-\\\\\\\\uFFBE\\\\\\\\uFFC2-\\\\\\\\uFFC7\\\\\\\\uFFCA-\\\\\\\\uFFCF\\\\\\\\uFFD2-\\\\\\\\uFFD7\\\\\\\\uFFDA-\\\\\\\\uFFDC]');\\n\\n  // Ensure the condition is true, otherwise throw an error.\\n  // This is only to have a better contract semantic, i.e. another safety net\\n  // to catch a logic error. The condition shall be fulfilled in normal case.\\n  // Do NOT use this to enforce a certain condition on any user input.\\n\\n  function assert(condition, message) {\\n    /* istanbul ignore next */\\n    if (!condition) {\\n      throw new Error('ASSERT: ' + message);\\n    }\\n  }\\n\\n  function isDecimalDigit(ch) {\\n    return (ch >= 0x30 && ch <= 0x39); // 0..9\\n  }\\n\\n  function isHexDigit(ch) {\\n    return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\\n  }\\n\\n  function isOctalDigit(ch) {\\n    return '01234567'.indexOf(ch) >= 0;\\n  }\\n\\n  // 7.2 White Space\\n\\n  function isWhiteSpace(ch) {\\n    return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\\n      (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\\n  }\\n\\n  // 7.3 Line Terminators\\n\\n  function isLineTerminator(ch) {\\n    return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\\n  }\\n\\n  // 7.6 Identifier Names and Identifiers\\n\\n  function isIdentifierStart(ch) {\\n    return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\\n      (ch >= 0x41 && ch <= 0x5A) || // A..Z\\n      (ch >= 0x61 && ch <= 0x7A) || // a..z\\n      (ch === 0x5C) || // \\\\ (backslash)\\n      ((ch >= 0x80) && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch)));\\n  }\\n\\n  function isIdentifierPart(ch) {\\n    return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\\n      (ch >= 0x41 && ch <= 0x5A) || // A..Z\\n      (ch >= 0x61 && ch <= 0x7A) || // a..z\\n      (ch >= 0x30 && ch <= 0x39) || // 0..9\\n      (ch === 0x5C) || // \\\\ (backslash)\\n      ((ch >= 0x80) && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch)));\\n  }\\n\\n  // 7.6.1.1 Keywords\\n\\n  var keywords = {\\n    'if':1, 'in':1, 'do':1,\\n    'var':1, 'for':1, 'new':1, 'try':1, 'let':1,\\n    'this':1, 'else':1, 'case':1, 'void':1, 'with':1, 'enum':1,\\n    'while':1, 'break':1, 'catch':1, 'throw':1, 'const':1, 'yield':1, 'class':1, 'super':1,\\n    'return':1, 'typeof':1, 'delete':1, 'switch':1, 'export':1, 'import':1, 'public':1, 'static':1,\\n    'default':1, 'finally':1, 'extends':1, 'package':1, 'private':1,\\n    'function':1, 'continue':1, 'debugger':1,\\n    'interface':1, 'protected':1,\\n    'instanceof':1, 'implements':1\\n  };\\n\\n  function skipComment() {\\n    var ch;\\n\\n    while (index < length) {\\n      ch = source.charCodeAt(index);\\n\\n      if (isWhiteSpace(ch) || isLineTerminator(ch)) {\\n        ++index;\\n      } else {\\n        break;\\n      }\\n    }\\n  }\\n\\n  function scanHexEscape(prefix) {\\n    var i, len, ch, code = 0;\\n\\n    len = (prefix === 'u') ? 4 : 2;\\n    for (i = 0; i < len; ++i) {\\n      if (index < length && isHexDigit(source[index])) {\\n        ch = source[index++];\\n        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\\n      } else {\\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\\n      }\\n    }\\n    return String.fromCharCode(code);\\n  }\\n\\n  function scanUnicodeCodePointEscape() {\\n    var ch, code, cu1, cu2;\\n\\n    ch = source[index];\\n    code = 0;\\n\\n    // At least, one hex digit is required.\\n    if (ch === '}') {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\\n    }\\n\\n    while (index < length) {\\n      ch = source[index++];\\n      if (!isHexDigit(ch)) {\\n        break;\\n      }\\n      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\\n    }\\n\\n    if (code > 0x10FFFF || ch !== '}') {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\\n    }\\n\\n    // UTF-16 Encoding\\n    if (code <= 0xFFFF) {\\n      return String.fromCharCode(code);\\n    }\\n    cu1 = ((code - 0x10000) >> 10) + 0xD800;\\n    cu2 = ((code - 0x10000) & 1023) + 0xDC00;\\n    return String.fromCharCode(cu1, cu2);\\n  }\\n\\n  function getEscapedIdentifier() {\\n    var ch, id;\\n\\n    ch = source.charCodeAt(index++);\\n    id = String.fromCharCode(ch);\\n\\n    // '\\\\u' (U+005C, U+0075) denotes an escaped character.\\n    if (ch === 0x5C) {\\n      if (source.charCodeAt(index) !== 0x75) {\\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\\n      }\\n      ++index;\\n      ch = scanHexEscape('u');\\n      if (!ch || ch === '\\\\\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\\n      }\\n      id = ch;\\n    }\\n\\n    while (index < length) {\\n      ch = source.charCodeAt(index);\\n      if (!isIdentifierPart(ch)) {\\n        break;\\n      }\\n      ++index;\\n      id += String.fromCharCode(ch);\\n\\n      // '\\\\u' (U+005C, U+0075) denotes an escaped character.\\n      if (ch === 0x5C) {\\n        id = id.substr(0, id.length - 1);\\n        if (source.charCodeAt(index) !== 0x75) {\\n          throwError({}, MessageUnexpectedToken, ILLEGAL);\\n        }\\n        ++index;\\n        ch = scanHexEscape('u');\\n        if (!ch || ch === '\\\\\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\\n          throwError({}, MessageUnexpectedToken, ILLEGAL);\\n        }\\n        id += ch;\\n      }\\n    }\\n\\n    return id;\\n  }\\n\\n  function getIdentifier() {\\n    var start, ch;\\n\\n    start = index++;\\n    while (index < length) {\\n      ch = source.charCodeAt(index);\\n      if (ch === 0x5C) {\\n        // Blackslash (U+005C) marks Unicode escape sequence.\\n        index = start;\\n        return getEscapedIdentifier();\\n      }\\n      if (isIdentifierPart(ch)) {\\n        ++index;\\n      } else {\\n        break;\\n      }\\n    }\\n\\n    return source.slice(start, index);\\n  }\\n\\n  function scanIdentifier() {\\n    var start, id, type;\\n\\n    start = index;\\n\\n    // Backslash (U+005C) starts an escaped character.\\n    id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();\\n\\n    // There is no keyword or literal with only one character.\\n    // Thus, it must be an identifier.\\n    if (id.length === 1) {\\n      type = TokenIdentifier;\\n    } else if (keywords.hasOwnProperty(id)) { // eslint-disable-line no-prototype-builtins\\n      type = TokenKeyword;\\n    } else if (id === 'null') {\\n      type = TokenNullLiteral;\\n    } else if (id === 'true' || id === 'false') {\\n      type = TokenBooleanLiteral;\\n    } else {\\n      type = TokenIdentifier;\\n    }\\n\\n    return {\\n      type: type,\\n      value: id,\\n      start: start,\\n      end: index\\n    };\\n  }\\n\\n  // 7.7 Punctuators\\n\\n  function scanPunctuator() {\\n    var start = index,\\n      code = source.charCodeAt(index),\\n      code2,\\n      ch1 = source[index],\\n      ch2,\\n      ch3,\\n      ch4;\\n\\n    switch (code) {\\n\\n      // Check for most common single-character punctuators.\\n      case 0x2E: // . dot\\n      case 0x28: // ( open bracket\\n      case 0x29: // ) close bracket\\n      case 0x3B: // ; semicolon\\n      case 0x2C: // , comma\\n      case 0x7B: // { open curly brace\\n      case 0x7D: // } close curly brace\\n      case 0x5B: // [\\n      case 0x5D: // ]\\n      case 0x3A: // :\\n      case 0x3F: // ?\\n      case 0x7E: // ~\\n        ++index;\\n        return {\\n          type: TokenPunctuator,\\n          value: String.fromCharCode(code),\\n          start: start,\\n          end: index\\n        };\\n\\n      default:\\n        code2 = source.charCodeAt(index + 1);\\n\\n        // '=' (U+003D) marks an assignment or comparison operator.\\n        if (code2 === 0x3D) {\\n          switch (code) {\\n            case 0x2B: // +\\n            case 0x2D: // -\\n            case 0x2F: // /\\n            case 0x3C: // <\\n            case 0x3E: // >\\n            case 0x5E: // ^\\n            case 0x7C: // |\\n            case 0x25: // %\\n            case 0x26: // &\\n            case 0x2A: // *\\n              index += 2;\\n              return {\\n                type: TokenPunctuator,\\n                value: String.fromCharCode(code) + String.fromCharCode(code2),\\n                start: start,\\n                end: index\\n              };\\n\\n            case 0x21: // !\\n            case 0x3D: // =\\n              index += 2;\\n\\n              // !== and ===\\n              if (source.charCodeAt(index) === 0x3D) {\\n                ++index;\\n              }\\n              return {\\n                type: TokenPunctuator,\\n                value: source.slice(start, index),\\n                start: start,\\n                end: index\\n              };\\n          }\\n        }\\n    }\\n\\n    // 4-character punctuator: >>>=\\n\\n    ch4 = source.substr(index, 4);\\n\\n    if (ch4 === '>>>=') {\\n      index += 4;\\n      return {\\n        type: TokenPunctuator,\\n        value: ch4,\\n        start: start,\\n        end: index\\n      };\\n    }\\n\\n    // 3-character punctuators: === !== >>> <<= >>=\\n\\n    ch3 = ch4.substr(0, 3);\\n\\n    if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\\n      index += 3;\\n      return {\\n        type: TokenPunctuator,\\n        value: ch3,\\n        start: start,\\n        end: index\\n      };\\n    }\\n\\n    // Other 2-character punctuators: ++ -- << >> && ||\\n    ch2 = ch3.substr(0, 2);\\n\\n    if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {\\n      index += 2;\\n      return {\\n        type: TokenPunctuator,\\n        value: ch2,\\n        start: start,\\n        end: index\\n      };\\n    }\\n\\n    // 1-character punctuators: < > = ! + - * % & | ^ /\\n\\n    if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\\n      ++index;\\n      return {\\n        type: TokenPunctuator,\\n        value: ch1,\\n        start: start,\\n        end: index\\n      };\\n    }\\n\\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\\n  }\\n\\n  // 7.8.3 Numeric Literals\\n\\n  function scanHexLiteral(start) {\\n    var number = '';\\n\\n    while (index < length) {\\n      if (!isHexDigit(source[index])) {\\n        break;\\n      }\\n      number += source[index++];\\n    }\\n\\n    if (number.length === 0) {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\\n    }\\n\\n    if (isIdentifierStart(source.charCodeAt(index))) {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\\n    }\\n\\n    return {\\n      type: TokenNumericLiteral,\\n      value: parseInt('0x' + number, 16),\\n      start: start,\\n      end: index\\n    };\\n  }\\n\\n  function scanOctalLiteral(start) {\\n    var number = '0' + source[index++];\\n    while (index < length) {\\n      if (!isOctalDigit(source[index])) {\\n        break;\\n      }\\n      number += source[index++];\\n    }\\n\\n    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\\n    }\\n\\n    return {\\n      type: TokenNumericLiteral,\\n      value: parseInt(number, 8),\\n      octal: true,\\n      start: start,\\n      end: index\\n    };\\n  }\\n\\n  function scanNumericLiteral() {\\n    var number, start, ch;\\n\\n    ch = source[index];\\n    assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\\n      'Numeric literal must start with a decimal digit or a decimal point');\\n\\n    start = index;\\n    number = '';\\n    if (ch !== '.') {\\n      number = source[index++];\\n      ch = source[index];\\n\\n      // Hex number starts with '0x'.\\n      // Octal number starts with '0'.\\n      if (number === '0') {\\n        if (ch === 'x' || ch === 'X') {\\n          ++index;\\n          return scanHexLiteral(start);\\n        }\\n        if (isOctalDigit(ch)) {\\n          return scanOctalLiteral(start);\\n        }\\n\\n        // decimal number starts with '0' such as '09' is illegal.\\n        if (ch && isDecimalDigit(ch.charCodeAt(0))) {\\n          throwError({}, MessageUnexpectedToken, ILLEGAL);\\n        }\\n      }\\n\\n      while (isDecimalDigit(source.charCodeAt(index))) {\\n        number += source[index++];\\n      }\\n      ch = source[index];\\n    }\\n\\n    if (ch === '.') {\\n      number += source[index++];\\n      while (isDecimalDigit(source.charCodeAt(index))) {\\n        number += source[index++];\\n      }\\n      ch = source[index];\\n    }\\n\\n    if (ch === 'e' || ch === 'E') {\\n      number += source[index++];\\n\\n      ch = source[index];\\n      if (ch === '+' || ch === '-') {\\n        number += source[index++];\\n      }\\n      if (isDecimalDigit(source.charCodeAt(index))) {\\n        while (isDecimalDigit(source.charCodeAt(index))) {\\n          number += source[index++];\\n        }\\n      } else {\\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\\n      }\\n    }\\n\\n    if (isIdentifierStart(source.charCodeAt(index))) {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\\n    }\\n\\n    return {\\n      type: TokenNumericLiteral,\\n      value: parseFloat(number),\\n      start: start,\\n      end: index\\n    };\\n  }\\n\\n  // 7.8.4 String Literals\\n\\n  function scanStringLiteral() {\\n    var str = '',\\n      quote, start, ch, code, octal = false;\\n\\n    quote = source[index];\\n    assert((quote === '\\\\'' || quote === '\\\"'),\\n      'String literal must starts with a quote');\\n\\n    start = index;\\n    ++index;\\n\\n    while (index < length) {\\n      ch = source[index++];\\n\\n      if (ch === quote) {\\n        quote = '';\\n        break;\\n      } else if (ch === '\\\\\\\\') {\\n        ch = source[index++];\\n        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\\n          switch (ch) {\\n            case 'u':\\n            case 'x':\\n              if (source[index] === '{') {\\n                ++index;\\n                str += scanUnicodeCodePointEscape();\\n              } else {\\n                str += scanHexEscape(ch);\\n              }\\n              break;\\n            case 'n':\\n              str += '\\\\n';\\n              break;\\n            case 'r':\\n              str += '\\\\r';\\n              break;\\n            case 't':\\n              str += '\\\\t';\\n              break;\\n            case 'b':\\n              str += '\\\\b';\\n              break;\\n            case 'f':\\n              str += '\\\\f';\\n              break;\\n            case 'v':\\n              str += '\\\\x0B';\\n              break;\\n\\n            default:\\n              if (isOctalDigit(ch)) {\\n                code = '01234567'.indexOf(ch);\\n\\n                // \\\\0 is not octal escape sequence\\n                if (code !== 0) {\\n                  octal = true;\\n                }\\n\\n                if (index < length && isOctalDigit(source[index])) {\\n                  octal = true;\\n                  code = code * 8 + '01234567'.indexOf(source[index++]);\\n\\n                  // 3 digits are only allowed when string starts\\n                  // with 0, 1, 2, 3\\n                  if ('0123'.indexOf(ch) >= 0 &&\\n                    index < length &&\\n                    isOctalDigit(source[index])) {\\n                    code = code * 8 + '01234567'.indexOf(source[index++]);\\n                  }\\n                }\\n                str += String.fromCharCode(code);\\n              } else {\\n                str += ch;\\n              }\\n              break;\\n          }\\n        } else {\\n          if (ch === '\\\\r' && source[index] === '\\\\n') {\\n            ++index;\\n          }\\n        }\\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\\n        break;\\n      } else {\\n        str += ch;\\n      }\\n    }\\n\\n    if (quote !== '') {\\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\\n    }\\n\\n    return {\\n      type: TokenStringLiteral,\\n      value: str,\\n      octal: octal,\\n      start: start,\\n      end: index\\n    };\\n  }\\n\\n  function testRegExp(pattern, flags) {\\n    var tmp = pattern;\\n\\n    if (flags.indexOf('u') >= 0) {\\n      // Replace each astral symbol and every Unicode code point\\n      // escape sequence with a single ASCII symbol to avoid throwing on\\n      // regular expressions that are only valid in combination with the\\n      // `/u` flag.\\n      // Note: replacing with the ASCII symbol `x` might cause false\\n      // negatives in unlikely scenarios. For example, `[\\\\u{61}-b]` is a\\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it\\n      // would be replaced by `[x-b]` which throws an error.\\n      tmp = tmp\\n        .replace(/\\\\\\\\u\\\\{([0-9a-fA-F]+)\\\\}/g, ($0, $1) => {\\n          if (parseInt($1, 16) <= 0x10FFFF) {\\n            return 'x';\\n          }\\n          throwError({}, MessageInvalidRegExp);\\n        })\\n        .replace(/[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]/g, 'x');\\n    }\\n\\n    // First, detect invalid regular expressions.\\n    try {\\n      new RegExp(tmp);\\n    } catch (e) {\\n      throwError({}, MessageInvalidRegExp);\\n    }\\n\\n    // Return a regular expression object for this pattern-flag pair, or\\n    // `null` in case the current environment doesn't support the flags it\\n    // uses.\\n    try {\\n      return new RegExp(pattern, flags);\\n    } catch (exception) {\\n      return null;\\n    }\\n  }\\n\\n  function scanRegExpBody() {\\n    var ch, str, classMarker, terminated, body;\\n\\n    ch = source[index];\\n    assert(ch === '/', 'Regular expression literal must start with a slash');\\n    str = source[index++];\\n\\n    classMarker = false;\\n    terminated = false;\\n    while (index < length) {\\n      ch = source[index++];\\n      str += ch;\\n      if (ch === '\\\\\\\\') {\\n        ch = source[index++];\\n        // ECMA-262 7.8.5\\n        if (isLineTerminator(ch.charCodeAt(0))) {\\n          throwError({}, MessageUnterminatedRegExp);\\n        }\\n        str += ch;\\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\\n        throwError({}, MessageUnterminatedRegExp);\\n      } else if (classMarker) {\\n        if (ch === ']') {\\n          classMarker = false;\\n        }\\n      } else {\\n        if (ch === '/') {\\n          terminated = true;\\n          break;\\n        } else if (ch === '[') {\\n          classMarker = true;\\n        }\\n      }\\n    }\\n\\n    if (!terminated) {\\n      throwError({}, MessageUnterminatedRegExp);\\n    }\\n\\n    // Exclude leading and trailing slash.\\n    body = str.substr(1, str.length - 2);\\n    return {\\n      value: body,\\n      literal: str\\n    };\\n  }\\n\\n  function scanRegExpFlags() {\\n    var ch, str, flags;\\n\\n    str = '';\\n    flags = '';\\n    while (index < length) {\\n      ch = source[index];\\n      if (!isIdentifierPart(ch.charCodeAt(0))) {\\n        break;\\n      }\\n\\n      ++index;\\n      if (ch === '\\\\\\\\' && index < length) {\\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\\n      } else {\\n        flags += ch;\\n        str += ch;\\n      }\\n    }\\n\\n    if (flags.search(/[^gimuy]/g) >= 0) {\\n      throwError({}, MessageInvalidRegExp, flags);\\n    }\\n\\n    return {\\n      value: flags,\\n      literal: str\\n    };\\n  }\\n\\n  function scanRegExp() {\\n    var start, body, flags, value;\\n\\n    lookahead = null;\\n    skipComment();\\n    start = index;\\n\\n    body = scanRegExpBody();\\n    flags = scanRegExpFlags();\\n    value = testRegExp(body.value, flags.value);\\n\\n    return {\\n      literal: body.literal + flags.literal,\\n      value: value,\\n      regex: {\\n        pattern: body.value,\\n        flags: flags.value\\n      },\\n      start: start,\\n      end: index\\n    };\\n  }\\n\\n  function isIdentifierName(token) {\\n    return token.type === TokenIdentifier ||\\n      token.type === TokenKeyword ||\\n      token.type === TokenBooleanLiteral ||\\n      token.type === TokenNullLiteral;\\n  }\\n\\n  function advance() {\\n    var ch;\\n\\n    skipComment();\\n\\n    if (index >= length) {\\n      return {\\n        type: TokenEOF,\\n        start: index,\\n        end: index\\n      };\\n    }\\n\\n    ch = source.charCodeAt(index);\\n\\n    if (isIdentifierStart(ch)) {\\n      return scanIdentifier();\\n    }\\n\\n    // Very common: ( and ) and ;\\n    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\\n      return scanPunctuator();\\n    }\\n\\n    // String literal starts with single quote (U+0027) or double quote (U+0022).\\n    if (ch === 0x27 || ch === 0x22) {\\n      return scanStringLiteral();\\n    }\\n\\n\\n    // Dot (.) U+002E can also start a floating-point number, hence the need\\n    // to check the next character.\\n    if (ch === 0x2E) {\\n      if (isDecimalDigit(source.charCodeAt(index + 1))) {\\n        return scanNumericLiteral();\\n      }\\n      return scanPunctuator();\\n    }\\n\\n    if (isDecimalDigit(ch)) {\\n      return scanNumericLiteral();\\n    }\\n\\n    return scanPunctuator();\\n  }\\n\\n  function lex() {\\n    var token;\\n\\n    token = lookahead;\\n    index = token.end;\\n\\n    lookahead = advance();\\n\\n    index = token.end;\\n\\n    return token;\\n  }\\n\\n  function peek() {\\n    var pos;\\n\\n    pos = index;\\n\\n    lookahead = advance();\\n    index = pos;\\n  }\\n\\n  function finishArrayExpression(elements) {\\n    var node = new ASTNode(SyntaxArrayExpression);\\n    node.elements = elements;\\n    return node;\\n  }\\n\\n  function finishBinaryExpression(operator, left, right) {\\n    var node = new ASTNode((operator === '||' || operator === '&&') ? SyntaxLogicalExpression : SyntaxBinaryExpression);\\n    node.operator = operator;\\n    node.left = left;\\n    node.right = right;\\n    return node;\\n  }\\n\\n  function finishCallExpression(callee, args) {\\n    var node = new ASTNode(SyntaxCallExpression);\\n    node.callee = callee;\\n    node.arguments = args;\\n    return node;\\n  }\\n\\n  function finishConditionalExpression(test, consequent, alternate) {\\n    var node = new ASTNode(SyntaxConditionalExpression);\\n    node.test = test;\\n    node.consequent = consequent;\\n    node.alternate = alternate;\\n    return node;\\n  }\\n\\n  function finishIdentifier(name) {\\n    var node = new ASTNode(SyntaxIdentifier);\\n    node.name = name;\\n    return node;\\n  }\\n\\n  function finishLiteral(token) {\\n    var node = new ASTNode(SyntaxLiteral);\\n    node.value = token.value;\\n    node.raw = source.slice(token.start, token.end);\\n    if (token.regex) {\\n      if (node.raw === '//') {\\n        node.raw = '/(?:)/';\\n      }\\n      node.regex = token.regex;\\n    }\\n    return node;\\n  }\\n\\n  function finishMemberExpression(accessor, object, property) {\\n    var node = new ASTNode(SyntaxMemberExpression);\\n    node.computed = accessor === '[';\\n    node.object = object;\\n    node.property = property;\\n    if (!node.computed) property.member = true;\\n    return node;\\n  }\\n\\n  function finishObjectExpression(properties) {\\n    var node = new ASTNode(SyntaxObjectExpression);\\n    node.properties = properties;\\n    return node;\\n  }\\n\\n  function finishProperty(kind, key, value) {\\n    var node = new ASTNode(SyntaxProperty);\\n    node.key = key;\\n    node.value = value;\\n    node.kind = kind;\\n    return node;\\n  }\\n\\n  function finishUnaryExpression(operator, argument) {\\n    var node = new ASTNode(SyntaxUnaryExpression);\\n    node.operator = operator;\\n    node.argument = argument;\\n    node.prefix = true;\\n    return node;\\n  }\\n\\n  // Throw an exception\\n\\n  function throwError(token, messageFormat) {\\n    var error,\\n      args = Array.prototype.slice.call(arguments, 2),\\n      msg = messageFormat.replace(\\n        /%(\\\\d)/g,\\n        (whole, index) => {\\n          assert(index < args.length, 'Message reference must be in range');\\n          return args[index];\\n        }\\n      );\\n\\n\\n    error = new Error(msg);\\n    error.index = index;\\n    error.description = msg;\\n    throw error;\\n  }\\n\\n  // Throw an exception because of the token.\\n\\n  function throwUnexpected(token) {\\n    if (token.type === TokenEOF) {\\n      throwError(token, MessageUnexpectedEOS);\\n    }\\n\\n    if (token.type === TokenNumericLiteral) {\\n      throwError(token, MessageUnexpectedNumber);\\n    }\\n\\n    if (token.type === TokenStringLiteral) {\\n      throwError(token, MessageUnexpectedString);\\n    }\\n\\n    if (token.type === TokenIdentifier) {\\n      throwError(token, MessageUnexpectedIdentifier);\\n    }\\n\\n    if (token.type === TokenKeyword) {\\n      throwError(token, MessageUnexpectedReserved);\\n    }\\n\\n    // BooleanLiteral, NullLiteral, or Punctuator.\\n    throwError(token, MessageUnexpectedToken, token.value);\\n  }\\n\\n  // Expect the next token to match the specified punctuator.\\n  // If not, an exception will be thrown.\\n\\n  function expect(value) {\\n    var token = lex();\\n    if (token.type !== TokenPunctuator || token.value !== value) {\\n      throwUnexpected(token);\\n    }\\n  }\\n\\n  // Return true if the next token matches the specified punctuator.\\n\\n  function match(value) {\\n    return lookahead.type === TokenPunctuator && lookahead.value === value;\\n  }\\n\\n  // Return true if the next token matches the specified keyword\\n\\n  function matchKeyword(keyword) {\\n    return lookahead.type === TokenKeyword && lookahead.value === keyword;\\n  }\\n\\n  // 11.1.4 Array Initialiser\\n\\n  function parseArrayInitialiser() {\\n    var elements = [];\\n\\n    index = lookahead.start;\\n    expect('[');\\n\\n    while (!match(']')) {\\n      if (match(',')) {\\n        lex();\\n        elements.push(null);\\n      } else {\\n        elements.push(parseConditionalExpression());\\n\\n        if (!match(']')) {\\n          expect(',');\\n        }\\n      }\\n    }\\n\\n    lex();\\n\\n    return finishArrayExpression(elements);\\n  }\\n\\n  // 11.1.5 Object Initialiser\\n\\n  function parseObjectPropertyKey() {\\n    var token;\\n\\n    index = lookahead.start;\\n    token = lex();\\n\\n    // Note: This function is called only from parseObjectProperty(), where\\n    // EOF and Punctuator tokens are already filtered out.\\n\\n    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {\\n      if (token.octal) {\\n        throwError(token, MessageStrictOctalLiteral);\\n      }\\n      return finishLiteral(token);\\n    }\\n\\n    return finishIdentifier(token.value);\\n  }\\n\\n  function parseObjectProperty() {\\n    var token, key, id, value;\\n\\n    index = lookahead.start;\\n    token = lookahead;\\n\\n    if (token.type === TokenIdentifier) {\\n      id = parseObjectPropertyKey();\\n      expect(':');\\n      value = parseConditionalExpression();\\n      return finishProperty('init', id, value);\\n    }\\n    if (token.type === TokenEOF || token.type === TokenPunctuator) {\\n      throwUnexpected(token);\\n    } else {\\n      key = parseObjectPropertyKey();\\n      expect(':');\\n      value = parseConditionalExpression();\\n      return finishProperty('init', key, value);\\n    }\\n  }\\n\\n  function parseObjectInitialiser() {\\n    var properties = [],\\n      property, name, key, map = {},\\n      toString = String;\\n\\n    index = lookahead.start;\\n    expect('{');\\n\\n    while (!match('}')) {\\n      property = parseObjectProperty();\\n\\n      if (property.key.type === SyntaxIdentifier) {\\n        name = property.key.name;\\n      } else {\\n        name = toString(property.key.value);\\n      }\\n\\n      key = '$' + name;\\n      if (Object.prototype.hasOwnProperty.call(map, key)) {\\n        throwError({}, MessageStrictDuplicateProperty);\\n      } else {\\n        map[key] = true;\\n      }\\n\\n      properties.push(property);\\n\\n      if (!match('}')) {\\n        expect(',');\\n      }\\n    }\\n\\n    expect('}');\\n\\n    return finishObjectExpression(properties);\\n  }\\n\\n  // 11.1.6 The Grouping Operator\\n\\n  function parseGroupExpression() {\\n    var expr;\\n\\n    expect('(');\\n\\n    expr = parseExpression();\\n\\n    expect(')');\\n\\n    return expr;\\n  }\\n\\n\\n  // 11.1 Primary Expressions\\n\\n  var legalKeywords = {\\n    'if': 1\\n  };\\n\\n  function parsePrimaryExpression() {\\n    var type, token, expr;\\n\\n    if (match('(')) {\\n      return parseGroupExpression();\\n    }\\n\\n    if (match('[')) {\\n      return parseArrayInitialiser();\\n    }\\n\\n    if (match('{')) {\\n      return parseObjectInitialiser();\\n    }\\n\\n    type = lookahead.type;\\n    index = lookahead.start;\\n\\n\\n    if (type === TokenIdentifier || legalKeywords[lookahead.value]) {\\n      expr = finishIdentifier(lex().value);\\n    } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {\\n      if (lookahead.octal) {\\n        throwError(lookahead, MessageStrictOctalLiteral);\\n      }\\n      expr = finishLiteral(lex());\\n    } else if (type === TokenKeyword) {\\n      throw new Error(DISABLED);\\n    } else if (type === TokenBooleanLiteral) {\\n      token = lex();\\n      token.value = (token.value === 'true');\\n      expr = finishLiteral(token);\\n    } else if (type === TokenNullLiteral) {\\n      token = lex();\\n      token.value = null;\\n      expr = finishLiteral(token);\\n    } else if (match('/') || match('/=')) {\\n      expr = finishLiteral(scanRegExp());\\n      peek();\\n    } else {\\n      throwUnexpected(lex());\\n    }\\n\\n    return expr;\\n  }\\n\\n  // 11.2 Left-Hand-Side Expressions\\n\\n  function parseArguments() {\\n    var args = [];\\n\\n    expect('(');\\n\\n    if (!match(')')) {\\n      while (index < length) {\\n        args.push(parseConditionalExpression());\\n        if (match(')')) {\\n          break;\\n        }\\n        expect(',');\\n      }\\n    }\\n\\n    expect(')');\\n\\n    return args;\\n  }\\n\\n  function parseNonComputedProperty() {\\n    var token;\\n    index = lookahead.start;\\n    token = lex();\\n\\n    if (!isIdentifierName(token)) {\\n      throwUnexpected(token);\\n    }\\n\\n    return finishIdentifier(token.value);\\n  }\\n\\n  function parseNonComputedMember() {\\n    expect('.');\\n\\n    return parseNonComputedProperty();\\n  }\\n\\n  function parseComputedMember() {\\n    var expr;\\n\\n    expect('[');\\n\\n    expr = parseExpression();\\n\\n    expect(']');\\n\\n    return expr;\\n  }\\n\\n  function parseLeftHandSideExpressionAllowCall() {\\n    var expr, args, property;\\n\\n    expr = parsePrimaryExpression();\\n\\n    for (;;) {\\n      if (match('.')) {\\n        property = parseNonComputedMember();\\n        expr = finishMemberExpression('.', expr, property);\\n      } else if (match('(')) {\\n        args = parseArguments();\\n        expr = finishCallExpression(expr, args);\\n      } else if (match('[')) {\\n        property = parseComputedMember();\\n        expr = finishMemberExpression('[', expr, property);\\n      } else {\\n        break;\\n      }\\n    }\\n\\n    return expr;\\n  }\\n\\n  // 11.3 Postfix Expressions\\n\\n  function parsePostfixExpression() {\\n    var expr = parseLeftHandSideExpressionAllowCall();\\n\\n    if (lookahead.type === TokenPunctuator) {\\n      if ((match('++') || match('--'))) {\\n        throw new Error(DISABLED);\\n      }\\n    }\\n\\n    return expr;\\n  }\\n\\n  // 11.4 Unary Operators\\n\\n  function parseUnaryExpression() {\\n    var token, expr;\\n\\n    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {\\n      expr = parsePostfixExpression();\\n    } else if (match('++') || match('--')) {\\n      throw new Error(DISABLED);\\n    } else if (match('+') || match('-') || match('~') || match('!')) {\\n      token = lex();\\n      expr = parseUnaryExpression();\\n      expr = finishUnaryExpression(token.value, expr);\\n    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\\n      throw new Error(DISABLED);\\n    } else {\\n      expr = parsePostfixExpression();\\n    }\\n\\n    return expr;\\n  }\\n\\n  function binaryPrecedence(token) {\\n    var prec = 0;\\n\\n    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {\\n      return 0;\\n    }\\n\\n    switch (token.value) {\\n      case '||':\\n        prec = 1;\\n        break;\\n\\n      case '&&':\\n        prec = 2;\\n        break;\\n\\n      case '|':\\n        prec = 3;\\n        break;\\n\\n      case '^':\\n        prec = 4;\\n        break;\\n\\n      case '&':\\n        prec = 5;\\n        break;\\n\\n      case '==':\\n      case '!=':\\n      case '===':\\n      case '!==':\\n        prec = 6;\\n        break;\\n\\n      case '<':\\n      case '>':\\n      case '<=':\\n      case '>=':\\n      case 'instanceof':\\n      case 'in':\\n        prec = 7;\\n        break;\\n\\n      case '<<':\\n      case '>>':\\n      case '>>>':\\n        prec = 8;\\n        break;\\n\\n      case '+':\\n      case '-':\\n        prec = 9;\\n        break;\\n\\n      case '*':\\n      case '/':\\n      case '%':\\n        prec = 11;\\n        break;\\n    }\\n\\n    return prec;\\n  }\\n\\n  // 11.5 Multiplicative Operators\\n  // 11.6 Additive Operators\\n  // 11.7 Bitwise Shift Operators\\n  // 11.8 Relational Operators\\n  // 11.9 Equality Operators\\n  // 11.10 Binary Bitwise Operators\\n  // 11.11 Binary Logical Operators\\n\\n  function parseBinaryExpression() {\\n    var marker, markers, expr, token, prec, stack, right, operator, left, i;\\n\\n    marker = lookahead;\\n    left = parseUnaryExpression();\\n\\n    token = lookahead;\\n    prec = binaryPrecedence(token);\\n    if (prec === 0) {\\n      return left;\\n    }\\n    token.prec = prec;\\n    lex();\\n\\n    markers = [marker, lookahead];\\n    right = parseUnaryExpression();\\n\\n    stack = [left, token, right];\\n\\n    while ((prec = binaryPrecedence(lookahead)) > 0) {\\n\\n      // Reduce: make a binary expression from the three topmost entries.\\n      while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\\n        right = stack.pop();\\n        operator = stack.pop().value;\\n        left = stack.pop();\\n        markers.pop();\\n        expr = finishBinaryExpression(operator, left, right);\\n        stack.push(expr);\\n      }\\n\\n      // Shift.\\n      token = lex();\\n      token.prec = prec;\\n      stack.push(token);\\n      markers.push(lookahead);\\n      expr = parseUnaryExpression();\\n      stack.push(expr);\\n    }\\n\\n    // Final reduce to clean-up the stack.\\n    i = stack.length - 1;\\n    expr = stack[i];\\n    markers.pop();\\n    while (i > 1) {\\n      markers.pop();\\n      expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\\n      i -= 2;\\n    }\\n\\n    return expr;\\n  }\\n\\n  // 11.12 Conditional Operator\\n\\n  function parseConditionalExpression() {\\n    var expr, consequent, alternate;\\n\\n    expr = parseBinaryExpression();\\n\\n    if (match('?')) {\\n      lex();\\n      consequent = parseConditionalExpression();\\n      expect(':');\\n      alternate = parseConditionalExpression();\\n\\n      expr = finishConditionalExpression(expr, consequent, alternate);\\n    }\\n\\n    return expr;\\n  }\\n\\n  // 11.14 Comma Operator\\n\\n  function parseExpression() {\\n    var expr = parseConditionalExpression();\\n\\n    if (match(',')) {\\n      throw new Error(DISABLED); // no sequence expressions\\n    }\\n\\n    return expr;\\n  }\\n\\n  function parser(code) {\\n    source = code;\\n    index = 0;\\n    length = source.length;\\n    lookahead = null;\\n\\n    peek();\\n\\n    var expr = parseExpression();\\n\\n    if (lookahead.type !== TokenEOF) {\\n      throw new Error('Unexpect token after expression.');\\n    }\\n    return expr;\\n  }\\n\\n  var Constants = {\\n    NaN:       'NaN',\\n    E:         'Math.E',\\n    LN2:       'Math.LN2',\\n    LN10:      'Math.LN10',\\n    LOG2E:     'Math.LOG2E',\\n    LOG10E:    'Math.LOG10E',\\n    PI:        'Math.PI',\\n    SQRT1_2:   'Math.SQRT1_2',\\n    SQRT2:     'Math.SQRT2',\\n    MIN_VALUE: 'Number.MIN_VALUE',\\n    MAX_VALUE: 'Number.MAX_VALUE'\\n  };\\n\\n  function Functions(codegen) {\\n\\n    function fncall(name, args, cast, type) {\\n      let obj = codegen(args[0]);\\n      if (cast) {\\n        obj = cast + '(' + obj + ')';\\n        if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';\\n      }\\n      return obj + '.' + name + (type < 0 ? '' : type === 0 ?\\n        '()' :\\n        '(' + args.slice(1).map(codegen).join(',') + ')');\\n    }\\n\\n    function fn(name, cast, type) {\\n      return args => fncall(name, args, cast, type);\\n    }\\n\\n    const DATE = 'new Date',\\n          STRING = 'String',\\n          REGEXP = 'RegExp';\\n\\n    return {\\n      // MATH functions\\n      isNaN:    'Number.isNaN',\\n      isFinite: 'Number.isFinite',\\n      abs:      'Math.abs',\\n      acos:     'Math.acos',\\n      asin:     'Math.asin',\\n      atan:     'Math.atan',\\n      atan2:    'Math.atan2',\\n      ceil:     'Math.ceil',\\n      cos:      'Math.cos',\\n      exp:      'Math.exp',\\n      floor:    'Math.floor',\\n      log:      'Math.log',\\n      max:      'Math.max',\\n      min:      'Math.min',\\n      pow:      'Math.pow',\\n      random:   'Math.random',\\n      round:    'Math.round',\\n      sin:      'Math.sin',\\n      sqrt:     'Math.sqrt',\\n      tan:      'Math.tan',\\n\\n      clamp: function(args) {\\n        if (args.length < 3) vegaUtil.error('Missing arguments to clamp function.');\\n        if (args.length > 3) vegaUtil.error('Too many arguments to clamp function.');\\n        const a = args.map(codegen);\\n        return 'Math.max('+a[1]+', Math.min('+a[2]+','+a[0]+'))';\\n      },\\n\\n      // DATE functions\\n      now:             'Date.now',\\n      utc:             'Date.UTC',\\n      datetime:        DATE,\\n      date:            fn('getDate', DATE, 0),\\n      day:             fn('getDay', DATE, 0),\\n      year:            fn('getFullYear', DATE, 0),\\n      month:           fn('getMonth', DATE, 0),\\n      hours:           fn('getHours', DATE, 0),\\n      minutes:         fn('getMinutes', DATE, 0),\\n      seconds:         fn('getSeconds', DATE, 0),\\n      milliseconds:    fn('getMilliseconds', DATE, 0),\\n      time:            fn('getTime', DATE, 0),\\n      timezoneoffset:  fn('getTimezoneOffset', DATE, 0),\\n      utcdate:         fn('getUTCDate', DATE, 0),\\n      utcday:          fn('getUTCDay', DATE, 0),\\n      utcyear:         fn('getUTCFullYear', DATE, 0),\\n      utcmonth:        fn('getUTCMonth', DATE, 0),\\n      utchours:        fn('getUTCHours', DATE, 0),\\n      utcminutes:      fn('getUTCMinutes', DATE, 0),\\n      utcseconds:      fn('getUTCSeconds', DATE, 0),\\n      utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),\\n\\n      // sequence functions\\n      length:      fn('length', null, -1),\\n      join:        fn('join', null),\\n      indexof:     fn('indexOf', null),\\n      lastindexof: fn('lastIndexOf', null),\\n      slice:       fn('slice', null),\\n\\n      reverse: function(args) {\\n        return '('+codegen(args[0])+').slice().reverse()';\\n      },\\n\\n      // STRING functions\\n      parseFloat:  'parseFloat',\\n      parseInt:    'parseInt',\\n      upper:       fn('toUpperCase', STRING, 0),\\n      lower:       fn('toLowerCase', STRING, 0),\\n      substring:   fn('substring', STRING),\\n      split:       fn('split', STRING),\\n      replace:     fn('replace', STRING),\\n      trim:        fn('trim', STRING, 0),\\n\\n      // REGEXP functions\\n      regexp:  REGEXP,\\n      test:    fn('test', REGEXP),\\n\\n      // Control Flow functions\\n      if: function(args) {\\n          if (args.length < 3) vegaUtil.error('Missing arguments to if function.');\\n          if (args.length > 3) vegaUtil.error('Too many arguments to if function.');\\n          const a = args.map(codegen);\\n          return '('+a[0]+'?'+a[1]+':'+a[2]+')';\\n        }\\n    };\\n  }\\n\\n  function stripQuotes(s) {\\n    const n = s && s.length - 1;\\n    return n && (\\n        (s[0]==='\\\"' && s[n]==='\\\"') ||\\n        (s[0]==='\\\\'' && s[n]==='\\\\'')\\n      ) ? s.slice(1, -1) : s;\\n  }\\n\\n  function codegen(opt) {\\n    opt = opt || {};\\n\\n    const whitelist = opt.whitelist ? vegaUtil.toSet(opt.whitelist) : {},\\n          blacklist = opt.blacklist ? vegaUtil.toSet(opt.blacklist) : {},\\n          constants = opt.constants || Constants,\\n          functions = (opt.functions || Functions)(visit),\\n          globalvar = opt.globalvar,\\n          fieldvar = opt.fieldvar,\\n          outputGlobal = vegaUtil.isFunction(globalvar)\\n            ? globalvar\\n            : id => `${globalvar}[\\\"${id}\\\"]`;\\n\\n    let globals = {},\\n        fields = {},\\n        memberDepth = 0;\\n\\n    function visit(ast) {\\n      if (vegaUtil.isString(ast)) return ast;\\n      const generator = Generators[ast.type];\\n      if (generator == null) vegaUtil.error('Unsupported type: ' + ast.type);\\n      return generator(ast);\\n    }\\n\\n    const Generators = {\\n      Literal: n => n.raw,\\n\\n      Identifier: n => {\\n        const id = n.name;\\n        if (memberDepth > 0) {\\n          return id;\\n        } else if (vegaUtil.hasOwnProperty(blacklist, id)) {\\n          return vegaUtil.error('Illegal identifier: ' + id);\\n        } else if (vegaUtil.hasOwnProperty(constants, id)) {\\n          return constants[id];\\n        } else if (vegaUtil.hasOwnProperty(whitelist, id)) {\\n          return id;\\n        } else {\\n          globals[id] = 1;\\n          return outputGlobal(id);\\n        }\\n      },\\n\\n      MemberExpression: n => {\\n          const d = !n.computed,\\n                o = visit(n.object);\\n          if (d) memberDepth += 1;\\n          const p = visit(n.property);\\n          if (o === fieldvar) {\\n            // strip quotes to sanitize field name (#1653)\\n            fields[stripQuotes(p)] = 1;\\n          }\\n          if (d) memberDepth -= 1;\\n          return o + (d ? '.'+p : '['+p+']');\\n        },\\n\\n      CallExpression: n => {\\n          if (n.callee.type !== 'Identifier') {\\n            vegaUtil.error('Illegal callee type: ' + n.callee.type);\\n          }\\n          const callee = n.callee.name,\\n                args = n.arguments,\\n                fn = vegaUtil.hasOwnProperty(functions, callee) && functions[callee];\\n          if (!fn) vegaUtil.error('Unrecognized function: ' + callee);\\n          return vegaUtil.isFunction(fn)\\n            ? fn(args)\\n            : fn + '(' + args.map(visit).join(',') + ')';\\n        },\\n\\n      ArrayExpression: n =>\\n          '[' + n.elements.map(visit).join(',') + ']',\\n\\n      BinaryExpression: n =>\\n          '(' + visit(n.left) + n.operator + visit(n.right) + ')',\\n\\n      UnaryExpression: n =>\\n          '(' + n.operator + visit(n.argument) + ')',\\n\\n      ConditionalExpression: n =>\\n          '(' + visit(n.test) +\\n            '?' + visit(n.consequent) +\\n            ':' + visit(n.alternate) +\\n            ')',\\n\\n      LogicalExpression: n =>\\n          '(' + visit(n.left) + n.operator + visit(n.right) + ')',\\n\\n      ObjectExpression: n =>\\n          '{' + n.properties.map(visit).join(',') + '}',\\n\\n      Property: n => {\\n          memberDepth += 1;\\n          const k = visit(n.key);\\n          memberDepth -= 1;\\n          return k + ':' + visit(n.value);\\n        }\\n    };\\n\\n    function codegen(ast) {\\n      const result = {\\n        code:    visit(ast),\\n        globals: Object.keys(globals),\\n        fields:  Object.keys(fields)\\n      };\\n      globals = {};\\n      fields = {};\\n      return result;\\n    }\\n\\n    codegen.functions = functions;\\n    codegen.constants = constants;\\n\\n    return codegen;\\n  }\\n\\n  exports.ASTNode = ASTNode;\\n  exports.ArrayExpression = ArrayExpression;\\n  exports.BinaryExpression = BinaryExpression;\\n  exports.CallExpression = CallExpression;\\n  exports.ConditionalExpression = ConditionalExpression;\\n  exports.Identifier = Identifier;\\n  exports.Literal = Literal;\\n  exports.LogicalExpression = LogicalExpression;\\n  exports.MemberExpression = MemberExpression;\\n  exports.ObjectExpression = ObjectExpression;\\n  exports.Property = Property;\\n  exports.RawCode = RawCode;\\n  exports.UnaryExpression = UnaryExpression;\\n  exports.codegen = codegen;\\n  exports.constants = Constants;\\n  exports.functions = Functions;\\n  exports.parse = parser;\\n\\n  Object.defineProperty(exports, '__esModule', { value: true });\\n\\n})));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"globalThis\",\"self\",\"vega\",\"vegaUtil\",\"ASTNode\",\"type\",\"children\",\"node\",\"ArrayExpression\",\"elements\",\"BinaryExpression\",\"LogicalExpression\",\"left\",\"right\",\"CallExpression\",\"callee\",\"concat\",\"arguments\",\"ConditionalExpression\",\"test\",\"consequent\",\"alternate\",\"MemberExpression\",\"object\",\"property\",\"ObjectExpression\",\"properties\",\"Property\",\"key\",\"value\",\"UnaryExpression\",\"argument\",\"assert\",\"condition\",\"message\",\"Error\",\"isDecimalDigit\",\"ch\",\"isHexDigit\",\"indexOf\",\"isOctalDigit\",\"isLineTerminator\",\"isIdentifierStart\",\"RegexNonAsciiIdentifierStart\",\"String\",\"fromCharCode\",\"isIdentifierPart\",\"RegexNonAsciiIdentifierPart\",\"skipComment\",\"index\",\"length\",\"source\",\"charCodeAt\",\"scanHexEscape\",\"prefix\",\"code\",\"len\",\"i\",\"toLowerCase\",\"throwError\",\"MessageUnexpectedToken\",\"ILLEGAL\",\"getEscapedIdentifier\",\"id\",\"substr\",\"scanPunctuator\",\"start\",\"ch1\",\"TokenPunctuator\",\"end\",\"code2\",\"slice\",\"ch4\",\"ch3\",\"ch2\",\"scanNumericLiteral\",\"number\",\"TokenNumericLiteral\",\"parseInt\",\"octal\",\"parseFloat\",\"testRegExp\",\"pattern\",\"flags\",\"tmp\",\"replace\",\"$0\",\"$1\",\"MessageInvalidRegExp\",\"RegExp\",\"e\",\"exception\",\"advance\",\"TokenEOF\",\"TokenIdentifier\",\"keywords\",\"hasOwnProperty\",\"TokenKeyword\",\"TokenNullLiteral\",\"TokenBooleanLiteral\",\"str\",\"quote\",\"TokenStringLiteral\",\"lex\",\"token\",\"lookahead\",\"peek\",\"pos\",\"finishBinaryExpression\",\"operator\",\"SyntaxLogicalExpression\",\"SyntaxBinaryExpression\",\"finishIdentifier\",\"name\",\"SyntaxIdentifier\",\"finishLiteral\",\"SyntaxLiteral\",\"raw\",\"regex\",\"finishMemberExpression\",\"accessor\",\"SyntaxMemberExpression\",\"computed\",\"member\",\"finishProperty\",\"kind\",\"SyntaxProperty\",\"messageFormat\",\"args\",\"Array\",\"prototype\",\"call\",\"msg\",\"whole\",\"error\",\"description\",\"throwUnexpected\",\"MessageUnexpectedEOS\",\"MessageUnexpectedNumber\",\"MessageUnexpectedString\",\"MessageUnexpectedIdentifier\",\"MessageUnexpectedReserved\",\"expect\",\"match\",\"parseObjectPropertyKey\",\"MessageStrictOctalLiteral\",\"parsePrimaryExpression\",\"expr\",\"parseExpression\",\"push\",\"parseConditionalExpression\",\"SyntaxArrayExpression\",\"map\",\"toString\",\"Object\",\"MessageStrictDuplicateProperty\",\"SyntaxObjectExpression\",\"legalKeywords\",\"DISABLED\",\"terminated\",\"classMarker\",\"MessageUnterminatedRegExp\",\"body\",\"search\",\"literal\",\"parsePostfixExpression\",\"SyntaxCallExpression\",\"parseUnaryExpression\",\"SyntaxUnaryExpression\",\"keyword\",\"binaryPrecedence\",\"prec\",\"marker\",\"markers\",\"stack\",\"pop\",\"SyntaxConditionalExpression\",\"Functions\",\"codegen\",\"fn\",\"cast\",\"obj\",\"lastIndexOf\",\"join\",\"isNaN\",\"isFinite\",\"abs\",\"acos\",\"asin\",\"atan\",\"atan2\",\"ceil\",\"cos\",\"exp\",\"floor\",\"log\",\"max\",\"min\",\"pow\",\"random\",\"round\",\"sin\",\"sqrt\",\"tan\",\"clamp\",\"a\",\"now\",\"utc\",\"datetime\",\"DATE\",\"date\",\"day\",\"year\",\"month\",\"hours\",\"minutes\",\"seconds\",\"milliseconds\",\"time\",\"timezoneoffset\",\"utcdate\",\"utcday\",\"utcyear\",\"utcmonth\",\"utchours\",\"utcminutes\",\"utcseconds\",\"utcmilliseconds\",\"indexof\",\"lastindexof\",\"reverse\",\"upper\",\"STRING\",\"lower\",\"substring\",\"split\",\"trim\",\"regexp\",\"REGEXP\",\"if\",\"visit\",\"ASTNode.prototype.visit\",\"visitor\",\"n\",\"c\",\"Constants\",\"NaN\",\"E\",\"LN2\",\"LN10\",\"LOG2E\",\"LOG10E\",\"PI\",\"SQRT1_2\",\"SQRT2\",\"MIN_VALUE\",\"MAX_VALUE\",\"Identifier\",\"Literal\",\"RawCode\",\"opt\",\"ast\",\"isString\",\"generator\",\"Generators\",\"result\",\"globals\",\"keys\",\"fields\",\"whitelist\",\"toSet\",\"blacklist\",\"constants\",\"functions\",\"globalvar\",\"fieldvar\",\"outputGlobal\",\"isFunction\",\"memberDepth\",\"d\",\"o\",\"p\",\"k\",\"parse\",\"parser\",\"defineProperty\"]\n}\n"]